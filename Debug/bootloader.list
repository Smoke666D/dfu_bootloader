
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000389c  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003a20  08003a20  00013a20  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ac0  08003ac0  00020140  2**0
                  CONTENTS
  4 .ARM          00000008  08003ac0  08003ac0  00013ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ac8  08003ac8  00020140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ac8  08003ac8  00013ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003acc  08003acc  00013acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000140  20000000  08003ad0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a14  20000140  08003c10  00020140  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b54  08003c10  00020b54  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152a1  00000000  00000000  00020169  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039b7  00000000  00000000  0003540a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000068d4  00000000  00000000  00038dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000a58  00000000  00000000  0003f698  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000d70  00000000  00000000  000400f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00021e9d  00000000  00000000  00040e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000d114  00000000  00000000  00062cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000bc143  00000000  00000000  0006fe11  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0012bf54  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b10  00000000  00000000  0012bfd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000140 	.word	0x20000140
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08003a08 	.word	0x08003a08

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000144 	.word	0x20000144
 80001c0:	08003a08 	.word	0x08003a08

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b974 	b.w	80004c4 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	468c      	mov	ip, r1
 80001fa:	4604      	mov	r4, r0
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d14b      	bne.n	800029a <__udivmoddi4+0xa6>
 8000202:	428a      	cmp	r2, r1
 8000204:	4615      	mov	r5, r2
 8000206:	d967      	bls.n	80002d8 <__udivmoddi4+0xe4>
 8000208:	fab2 f282 	clz	r2, r2
 800020c:	b14a      	cbz	r2, 8000222 <__udivmoddi4+0x2e>
 800020e:	f1c2 0720 	rsb	r7, r2, #32
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	fa20 f707 	lsr.w	r7, r0, r7
 800021a:	4095      	lsls	r5, r2
 800021c:	ea47 0c03 	orr.w	ip, r7, r3
 8000220:	4094      	lsls	r4, r2
 8000222:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000226:	fbbc f7fe 	udiv	r7, ip, lr
 800022a:	fa1f f885 	uxth.w	r8, r5
 800022e:	fb0e c317 	mls	r3, lr, r7, ip
 8000232:	fb07 f908 	mul.w	r9, r7, r8
 8000236:	0c21      	lsrs	r1, r4, #16
 8000238:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023c:	4599      	cmp	r9, r3
 800023e:	d909      	bls.n	8000254 <__udivmoddi4+0x60>
 8000240:	18eb      	adds	r3, r5, r3
 8000242:	f107 31ff 	add.w	r1, r7, #4294967295
 8000246:	f080 811c 	bcs.w	8000482 <__udivmoddi4+0x28e>
 800024a:	4599      	cmp	r9, r3
 800024c:	f240 8119 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000250:	3f02      	subs	r7, #2
 8000252:	442b      	add	r3, r5
 8000254:	eba3 0309 	sub.w	r3, r3, r9
 8000258:	fbb3 f0fe 	udiv	r0, r3, lr
 800025c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000260:	fb00 f108 	mul.w	r1, r0, r8
 8000264:	b2a4      	uxth	r4, r4
 8000266:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026a:	42a1      	cmp	r1, r4
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x8e>
 800026e:	192c      	adds	r4, r5, r4
 8000270:	f100 33ff 	add.w	r3, r0, #4294967295
 8000274:	f080 8107 	bcs.w	8000486 <__udivmoddi4+0x292>
 8000278:	42a1      	cmp	r1, r4
 800027a:	f240 8104 	bls.w	8000486 <__udivmoddi4+0x292>
 800027e:	3802      	subs	r0, #2
 8000280:	442c      	add	r4, r5
 8000282:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000286:	2700      	movs	r7, #0
 8000288:	1a64      	subs	r4, r4, r1
 800028a:	b11e      	cbz	r6, 8000294 <__udivmoddi4+0xa0>
 800028c:	2300      	movs	r3, #0
 800028e:	40d4      	lsrs	r4, r2
 8000290:	e9c6 4300 	strd	r4, r3, [r6]
 8000294:	4639      	mov	r1, r7
 8000296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029a:	428b      	cmp	r3, r1
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0xbe>
 800029e:	2e00      	cmp	r6, #0
 80002a0:	f000 80ec 	beq.w	800047c <__udivmoddi4+0x288>
 80002a4:	2700      	movs	r7, #0
 80002a6:	e9c6 0100 	strd	r0, r1, [r6]
 80002aa:	4638      	mov	r0, r7
 80002ac:	4639      	mov	r1, r7
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	fab3 f783 	clz	r7, r3
 80002b6:	2f00      	cmp	r7, #0
 80002b8:	d148      	bne.n	800034c <__udivmoddi4+0x158>
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xd0>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 80fb 	bhi.w	80004ba <__udivmoddi4+0x2c6>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	469c      	mov	ip, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d0e0      	beq.n	8000294 <__udivmoddi4+0xa0>
 80002d2:	e9c6 4c00 	strd	r4, ip, [r6]
 80002d6:	e7dd      	b.n	8000294 <__udivmoddi4+0xa0>
 80002d8:	b902      	cbnz	r2, 80002dc <__udivmoddi4+0xe8>
 80002da:	deff      	udf	#255	; 0xff
 80002dc:	fab2 f282 	clz	r2, r2
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f040 808f 	bne.w	8000404 <__udivmoddi4+0x210>
 80002e6:	2701      	movs	r7, #1
 80002e8:	1b49      	subs	r1, r1, r5
 80002ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002ee:	fa1f f985 	uxth.w	r9, r5
 80002f2:	fbb1 fef8 	udiv	lr, r1, r8
 80002f6:	fb08 111e 	mls	r1, r8, lr, r1
 80002fa:	fb09 f00e 	mul.w	r0, r9, lr
 80002fe:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000302:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000306:	4298      	cmp	r0, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x126>
 800030a:	18eb      	adds	r3, r5, r3
 800030c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x124>
 8000312:	4298      	cmp	r0, r3
 8000314:	f200 80cd 	bhi.w	80004b2 <__udivmoddi4+0x2be>
 8000318:	468e      	mov	lr, r1
 800031a:	1a1b      	subs	r3, r3, r0
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	fb09 f900 	mul.w	r9, r9, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800032e:	45a1      	cmp	r9, r4
 8000330:	d907      	bls.n	8000342 <__udivmoddi4+0x14e>
 8000332:	192c      	adds	r4, r5, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x14c>
 800033a:	45a1      	cmp	r9, r4
 800033c:	f200 80b6 	bhi.w	80004ac <__udivmoddi4+0x2b8>
 8000340:	4618      	mov	r0, r3
 8000342:	eba4 0409 	sub.w	r4, r4, r9
 8000346:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800034a:	e79e      	b.n	800028a <__udivmoddi4+0x96>
 800034c:	f1c7 0520 	rsb	r5, r7, #32
 8000350:	40bb      	lsls	r3, r7
 8000352:	fa22 fc05 	lsr.w	ip, r2, r5
 8000356:	ea4c 0c03 	orr.w	ip, ip, r3
 800035a:	fa21 f405 	lsr.w	r4, r1, r5
 800035e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000362:	fbb4 f9fe 	udiv	r9, r4, lr
 8000366:	fa1f f88c 	uxth.w	r8, ip
 800036a:	fb0e 4419 	mls	r4, lr, r9, r4
 800036e:	fa20 f305 	lsr.w	r3, r0, r5
 8000372:	40b9      	lsls	r1, r7
 8000374:	fb09 fa08 	mul.w	sl, r9, r8
 8000378:	4319      	orrs	r1, r3
 800037a:	0c0b      	lsrs	r3, r1, #16
 800037c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000380:	45a2      	cmp	sl, r4
 8000382:	fa02 f207 	lsl.w	r2, r2, r7
 8000386:	fa00 f307 	lsl.w	r3, r0, r7
 800038a:	d90b      	bls.n	80003a4 <__udivmoddi4+0x1b0>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f109 30ff 	add.w	r0, r9, #4294967295
 8000394:	f080 8088 	bcs.w	80004a8 <__udivmoddi4+0x2b4>
 8000398:	45a2      	cmp	sl, r4
 800039a:	f240 8085 	bls.w	80004a8 <__udivmoddi4+0x2b4>
 800039e:	f1a9 0902 	sub.w	r9, r9, #2
 80003a2:	4464      	add	r4, ip
 80003a4:	eba4 040a 	sub.w	r4, r4, sl
 80003a8:	fbb4 f0fe 	udiv	r0, r4, lr
 80003ac:	fb0e 4410 	mls	r4, lr, r0, r4
 80003b0:	fb00 fa08 	mul.w	sl, r0, r8
 80003b4:	b289      	uxth	r1, r1
 80003b6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003ba:	45a2      	cmp	sl, r4
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x1dc>
 80003be:	eb1c 0404 	adds.w	r4, ip, r4
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	d26b      	bcs.n	80004a0 <__udivmoddi4+0x2ac>
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d969      	bls.n	80004a0 <__udivmoddi4+0x2ac>
 80003cc:	3802      	subs	r0, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d4:	fba0 8902 	umull	r8, r9, r0, r2
 80003d8:	eba4 040a 	sub.w	r4, r4, sl
 80003dc:	454c      	cmp	r4, r9
 80003de:	4641      	mov	r1, r8
 80003e0:	46ce      	mov	lr, r9
 80003e2:	d354      	bcc.n	800048e <__udivmoddi4+0x29a>
 80003e4:	d051      	beq.n	800048a <__udivmoddi4+0x296>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d069      	beq.n	80004be <__udivmoddi4+0x2ca>
 80003ea:	1a5a      	subs	r2, r3, r1
 80003ec:	eb64 040e 	sbc.w	r4, r4, lr
 80003f0:	fa04 f505 	lsl.w	r5, r4, r5
 80003f4:	fa22 f307 	lsr.w	r3, r2, r7
 80003f8:	40fc      	lsrs	r4, r7
 80003fa:	431d      	orrs	r5, r3
 80003fc:	e9c6 5400 	strd	r5, r4, [r6]
 8000400:	2700      	movs	r7, #0
 8000402:	e747      	b.n	8000294 <__udivmoddi4+0xa0>
 8000404:	4095      	lsls	r5, r2
 8000406:	f1c2 0320 	rsb	r3, r2, #32
 800040a:	fa21 f003 	lsr.w	r0, r1, r3
 800040e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000412:	fbb0 f7f8 	udiv	r7, r0, r8
 8000416:	fa1f f985 	uxth.w	r9, r5
 800041a:	fb08 0017 	mls	r0, r8, r7, r0
 800041e:	fa24 f303 	lsr.w	r3, r4, r3
 8000422:	4091      	lsls	r1, r2
 8000424:	fb07 fc09 	mul.w	ip, r7, r9
 8000428:	430b      	orrs	r3, r1
 800042a:	0c19      	lsrs	r1, r3, #16
 800042c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000430:	458c      	cmp	ip, r1
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x254>
 8000438:	1869      	adds	r1, r5, r1
 800043a:	f107 30ff 	add.w	r0, r7, #4294967295
 800043e:	d231      	bcs.n	80004a4 <__udivmoddi4+0x2b0>
 8000440:	458c      	cmp	ip, r1
 8000442:	d92f      	bls.n	80004a4 <__udivmoddi4+0x2b0>
 8000444:	3f02      	subs	r7, #2
 8000446:	4429      	add	r1, r5
 8000448:	eba1 010c 	sub.w	r1, r1, ip
 800044c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000450:	fb08 1c10 	mls	ip, r8, r0, r1
 8000454:	fb00 fe09 	mul.w	lr, r0, r9
 8000458:	b299      	uxth	r1, r3
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	458e      	cmp	lr, r1
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x27e>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f100 33ff 	add.w	r3, r0, #4294967295
 8000468:	d218      	bcs.n	800049c <__udivmoddi4+0x2a8>
 800046a:	458e      	cmp	lr, r1
 800046c:	d916      	bls.n	800049c <__udivmoddi4+0x2a8>
 800046e:	3802      	subs	r0, #2
 8000470:	4429      	add	r1, r5
 8000472:	eba1 010e 	sub.w	r1, r1, lr
 8000476:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047a:	e73a      	b.n	80002f2 <__udivmoddi4+0xfe>
 800047c:	4637      	mov	r7, r6
 800047e:	4630      	mov	r0, r6
 8000480:	e708      	b.n	8000294 <__udivmoddi4+0xa0>
 8000482:	460f      	mov	r7, r1
 8000484:	e6e6      	b.n	8000254 <__udivmoddi4+0x60>
 8000486:	4618      	mov	r0, r3
 8000488:	e6fb      	b.n	8000282 <__udivmoddi4+0x8e>
 800048a:	4543      	cmp	r3, r8
 800048c:	d2ab      	bcs.n	80003e6 <__udivmoddi4+0x1f2>
 800048e:	ebb8 0102 	subs.w	r1, r8, r2
 8000492:	eb69 020c 	sbc.w	r2, r9, ip
 8000496:	3801      	subs	r0, #1
 8000498:	4696      	mov	lr, r2
 800049a:	e7a4      	b.n	80003e6 <__udivmoddi4+0x1f2>
 800049c:	4618      	mov	r0, r3
 800049e:	e7e8      	b.n	8000472 <__udivmoddi4+0x27e>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e795      	b.n	80003d0 <__udivmoddi4+0x1dc>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e7cf      	b.n	8000448 <__udivmoddi4+0x254>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e77b      	b.n	80003a4 <__udivmoddi4+0x1b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	442c      	add	r4, r5
 80004b0:	e747      	b.n	8000342 <__udivmoddi4+0x14e>
 80004b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b6:	442b      	add	r3, r5
 80004b8:	e72f      	b.n	800031a <__udivmoddi4+0x126>
 80004ba:	4638      	mov	r0, r7
 80004bc:	e707      	b.n	80002ce <__udivmoddi4+0xda>
 80004be:	4637      	mov	r7, r6
 80004c0:	e6e8      	b.n	8000294 <__udivmoddi4+0xa0>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c8:	221c      	movs	r2, #28
{
 80004ca:	b510      	push	{r4, lr}
 80004cc:	b092      	sub	sp, #72	; 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	eb0d 0002 	add.w	r0, sp, r2
 80004d2:	2100      	movs	r1, #0
 80004d4:	f003 f9d8 	bl	8003888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d8:	2214      	movs	r2, #20
 80004da:	2100      	movs	r1, #0
 80004dc:	a801      	add	r0, sp, #4
 80004de:	f003 f9d3 	bl	8003888 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004e2:	2201      	movs	r2, #1
 80004e4:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 13;
  RCC_OscInitStruct.PLL.PLLN = 195;
 80004e6:	210d      	movs	r1, #13
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004e8:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 195;
 80004ec:	23c3      	movs	r3, #195	; 0xc3
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ee:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 195;
 80004f0:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80004f4:	2305      	movs	r3, #5
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80004f8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004fa:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004fc:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004fe:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000500:	f001 f986 	bl	8001810 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000504:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000506:	2000      	movs	r0, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000508:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800050c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000510:	e9cd 0303 	strd	r0, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000514:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000518:	2103      	movs	r1, #3
 800051a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800051c:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800051e:	f001 fb47 	bl	8001bb0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000522:	b012      	add	sp, #72	; 0x48
 8000524:	bd10      	pop	{r4, pc}
	...

08000528 <main>:
{
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 800052c:	f000 f91a 	bl	8000764 <HAL_Init>
  SystemClock_Config();
 8000530:	f7ff ffca 	bl	80004c8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000534:	2210      	movs	r2, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000536:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000538:	f44f 5500 	mov.w	r5, #8192	; 0x2000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053c:	2100      	movs	r1, #0
 800053e:	eb0d 0002 	add.w	r0, sp, r2
 8000542:	f003 f9a1 	bl	8003888 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000546:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <main+0x8c>)
 8000548:	9401      	str	r4, [sp, #4]
 800054a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800054c:	a908      	add	r1, sp, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800054e:	f042 0204 	orr.w	r2, r2, #4
 8000552:	631a      	str	r2, [r3, #48]	; 0x30
 8000554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000556:	4818      	ldr	r0, [pc, #96]	; (80005b8 <main+0x90>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000558:	f002 0204 	and.w	r2, r2, #4
 800055c:	9201      	str	r2, [sp, #4]
 800055e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000560:	9402      	str	r4, [sp, #8]
 8000562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000564:	f042 0201 	orr.w	r2, r2, #1
 8000568:	631a      	str	r2, [r3, #48]	; 0x30
 800056a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800056c:	f841 5d14 	str.w	r5, [r1, #-20]!
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000570:	f003 0301 	and.w	r3, r3, #1
 8000574:	9302      	str	r3, [sp, #8]
 8000576:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000578:	f000 fb54 	bl	8000c24 <HAL_GPIO_Init>
  if ( HAL_GPIO_ReadPin( BOOT1_GPIO_Port, BOOT1_Pin ) == GPIO_PIN_SET )
 800057c:	4629      	mov	r1, r5
 800057e:	480e      	ldr	r0, [pc, #56]	; (80005b8 <main+0x90>)
 8000580:	f000 fc34 	bl	8000dec <HAL_GPIO_ReadPin>
 8000584:	2801      	cmp	r0, #1
 8000586:	d102      	bne.n	800058e <main+0x66>
    MX_USB_DEVICE_Init();
 8000588:	f002 fec4 	bl	8003314 <MX_USB_DEVICE_Init>
 800058c:	e7fe      	b.n	800058c <main+0x64>
    uint32_t  JumpAddress = *( __IO uint32_t* )( APP_ADDRESS + 4U );
 800058e:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <main+0x94>)
 8000590:	681d      	ldr	r5, [r3, #0]
    HAL_RCC_DeInit();
 8000592:	f001 f8bf 	bl	8001714 <HAL_RCC_DeInit>
    HAL_DeInit();
 8000596:	f000 f8ab 	bl	80006f0 <HAL_DeInit>
    SysTick->CTRL = 0U;
 800059a:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <main+0x98>)
    SCB->VTOR     = APP_ADDRESS;
 800059c:	4a09      	ldr	r2, [pc, #36]	; (80005c4 <main+0x9c>)
    SysTick->CTRL = 0U;
 800059e:	601c      	str	r4, [r3, #0]
    SysTick->LOAD = 0U;
 80005a0:	605c      	str	r4, [r3, #4]
    SysTick->VAL  = 0U;
 80005a2:	609c      	str	r4, [r3, #8]
    SCB->VTOR     = APP_ADDRESS;
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <main+0xa0>)
 80005a6:	6093      	str	r3, [r2, #8]
    __set_MSP( *( __IO uint32_t* ) APP_ADDRESS );
 80005a8:	681b      	ldr	r3, [r3, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80005aa:	f383 8808 	msr	MSP, r3
    Jump();
 80005ae:	47a8      	blx	r5
 80005b0:	e7ec      	b.n	800058c <main+0x64>
 80005b2:	bf00      	nop
 80005b4:	40023800 	.word	0x40023800
 80005b8:	40020800 	.word	0x40020800
 80005bc:	08004004 	.word	0x08004004
 80005c0:	e000e010 	.word	0xe000e010
 80005c4:	e000ed00 	.word	0xe000ed00
 80005c8:	08004000 	.word	0x08004000

080005cc <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005cc:	4770      	bx	lr
	...

080005d0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d0:	2100      	movs	r1, #0
{
 80005d2:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <HAL_MspInit+0x34>)
 80005d6:	9100      	str	r1, [sp, #0]
 80005d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80005de:	645a      	str	r2, [r3, #68]	; 0x44
 80005e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80005e2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80005e6:	9200      	str	r2, [sp, #0]
 80005e8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ea:	9101      	str	r1, [sp, #4]
 80005ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80005f2:	641a      	str	r2, [r3, #64]	; 0x40
 80005f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fe:	b002      	add	sp, #8
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800

08000608 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000608:	4770      	bx	lr

0800060a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800060a:	e7fe      	b.n	800060a <HardFault_Handler>

0800060c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800060c:	e7fe      	b.n	800060c <MemManage_Handler>

0800060e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060e:	e7fe      	b.n	800060e <BusFault_Handler>

08000610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000610:	e7fe      	b.n	8000610 <UsageFault_Handler>

08000612 <SVC_Handler>:
 8000612:	4770      	bx	lr

08000614 <DebugMon_Handler>:
 8000614:	4770      	bx	lr

08000616 <PendSV_Handler>:
 8000616:	4770      	bx	lr

08000618 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000618:	f000 b8be 	b.w	8000798 <HAL_IncTick>

0800061c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800061c:	4801      	ldr	r0, [pc, #4]	; (8000624 <OTG_FS_IRQHandler+0x8>)
 800061e:	f000 bca7 	b.w	8000f70 <HAL_PCD_IRQHandler>
 8000622:	bf00      	nop
 8000624:	20000750 	.word	0x20000750

08000628 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000628:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800062a:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <_sbrk+0x2c>)
{
 800062c:	4602      	mov	r2, r0
	if (heap_end == 0)
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	b909      	cbnz	r1, 8000636 <_sbrk+0xe>
		heap_end = &end;
 8000632:	4909      	ldr	r1, [pc, #36]	; (8000658 <_sbrk+0x30>)
 8000634:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8000636:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8000638:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800063a:	4402      	add	r2, r0
 800063c:	428a      	cmp	r2, r1
 800063e:	d906      	bls.n	800064e <_sbrk+0x26>
	{
		errno = ENOMEM;
 8000640:	f003 f8e8 	bl	8003814 <__errno>
 8000644:	230c      	movs	r3, #12
 8000646:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000648:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 800064c:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800064e:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8000650:	e7fc      	b.n	800064c <_sbrk+0x24>
 8000652:	bf00      	nop
 8000654:	2000015c 	.word	0x2000015c
 8000658:	20000b58 	.word	0x20000b58

0800065c <SystemInit>:
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800065c:	2100      	movs	r1, #0
  RCC->CR |= (uint32_t)0x00000001;
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <SystemInit+0x34>)
 8000660:	681a      	ldr	r2, [r3, #0]
 8000662:	f042 0201 	orr.w	r2, r2, #1
 8000666:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000668:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000670:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000674:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000676:	4a07      	ldr	r2, [pc, #28]	; (8000694 <SystemInit+0x38>)
 8000678:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000680:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000682:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  RCC->CIR = 0x00000000;
 8000686:	60d9      	str	r1, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <SystemInit+0x3c>)
 800068a:	609a      	str	r2, [r3, #8]
#endif
}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	24003010 	.word	0x24003010
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800069c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80006a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80006a2:	e003      	b.n	80006ac <LoopCopyDataInit>

080006a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80006a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80006a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80006aa:	3104      	adds	r1, #4

080006ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80006ac:	480b      	ldr	r0, [pc, #44]	; (80006dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80006ae:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80006b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80006b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80006b4:	d3f6      	bcc.n	80006a4 <CopyDataInit>
  ldr  r2, =_sbss
 80006b6:	4a0b      	ldr	r2, [pc, #44]	; (80006e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80006b8:	e002      	b.n	80006c0 <LoopFillZerobss>

080006ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80006ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80006bc:	f842 3b04 	str.w	r3, [r2], #4

080006c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80006c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80006c4:	d3f9      	bcc.n	80006ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80006c6:	f7ff ffc9 	bl	800065c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006ca:	f003 f8a9 	bl	8003820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006ce:	f7ff ff2b 	bl	8000528 <main>
  bx  lr
 80006d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80006d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80006d8:	08003ad0 	.word	0x08003ad0
  ldr  r0, =_sdata
 80006dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80006e0:	20000140 	.word	0x20000140
  ldr  r2, =_sbss
 80006e4:	20000140 	.word	0x20000140
  ldr  r3, = _ebss
 80006e8:	20000b54 	.word	0x20000b54

080006ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006ec:	e7fe      	b.n	80006ec <ADC_IRQHandler>

080006ee <HAL_MspDeInit>:
 80006ee:	4770      	bx	lr

080006f0 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80006f0:	b510      	push	{r4, lr}
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80006f2:	f04f 32ff 	mov.w	r2, #4294967295
  __HAL_RCC_APB1_RELEASE_RESET();
 80006f6:	2400      	movs	r4, #0
  __HAL_RCC_APB1_FORCE_RESET();
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <HAL_DeInit+0x28>)
 80006fa:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80006fc:	621c      	str	r4, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80006fe:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000700:	625c      	str	r4, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000702:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000704:	611c      	str	r4, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000706:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000708:	615c      	str	r4, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 800070a:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 800070c:	619c      	str	r4, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800070e:	f7ff ffee 	bl	80006ee <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
}
 8000712:	4620      	mov	r0, r4
 8000714:	bd10      	pop	{r4, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800

0800071c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800071c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <HAL_InitTick+0x3c>)
{
 8000720:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000722:	7818      	ldrb	r0, [r3, #0]
 8000724:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000728:	fbb3 f3f0 	udiv	r3, r3, r0
 800072c:	4a0b      	ldr	r2, [pc, #44]	; (800075c <HAL_InitTick+0x40>)
 800072e:	6810      	ldr	r0, [r2, #0]
 8000730:	fbb0 f0f3 	udiv	r0, r0, r3
 8000734:	f000 f8aa 	bl	800088c <HAL_SYSTICK_Config>
 8000738:	4604      	mov	r4, r0
 800073a:	b958      	cbnz	r0, 8000754 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800073c:	2d0f      	cmp	r5, #15
 800073e:	d809      	bhi.n	8000754 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000740:	4602      	mov	r2, r0
 8000742:	4629      	mov	r1, r5
 8000744:	f04f 30ff 	mov.w	r0, #4294967295
 8000748:	f000 f85e 	bl	8000808 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800074c:	4620      	mov	r0, r4
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <HAL_InitTick+0x44>)
 8000750:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000752:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000754:	2001      	movs	r0, #1
 8000756:	e7fc      	b.n	8000752 <HAL_InitTick+0x36>
 8000758:	20000004 	.word	0x20000004
 800075c:	20000000 	.word	0x20000000
 8000760:	20000008 	.word	0x20000008

08000764 <HAL_Init>:
{
 8000764:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <HAL_Init+0x30>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000768:	2003      	movs	r0, #3
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000770:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000778:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000780:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000782:	f000 f82f 	bl	80007e4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000786:	2000      	movs	r0, #0
 8000788:	f7ff ffc8 	bl	800071c <HAL_InitTick>
  HAL_MspInit();
 800078c:	f7ff ff20 	bl	80005d0 <HAL_MspInit>
}
 8000790:	2000      	movs	r0, #0
 8000792:	bd08      	pop	{r3, pc}
 8000794:	40023c00 	.word	0x40023c00

08000798 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000798:	4a03      	ldr	r2, [pc, #12]	; (80007a8 <HAL_IncTick+0x10>)
 800079a:	4b04      	ldr	r3, [pc, #16]	; (80007ac <HAL_IncTick+0x14>)
 800079c:	6811      	ldr	r1, [r2, #0]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	440b      	add	r3, r1
 80007a2:	6013      	str	r3, [r2, #0]
}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	20000268 	.word	0x20000268
 80007ac:	20000004 	.word	0x20000004

080007b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80007b0:	4b01      	ldr	r3, [pc, #4]	; (80007b8 <HAL_GetTick+0x8>)
 80007b2:	6818      	ldr	r0, [r3, #0]
}
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	20000268 	.word	0x20000268

080007bc <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80007bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80007be:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c0:	f7ff fff6 	bl	80007b0 <HAL_GetTick>
 80007c4:	4605      	mov	r5, r0
  uint32_t wait = Delay;
 80007c6:	9c01      	ldr	r4, [sp, #4]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007c8:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80007ca:	bf1e      	ittt	ne
 80007cc:	4b04      	ldrne	r3, [pc, #16]	; (80007e0 <HAL_Delay+0x24>)
 80007ce:	781b      	ldrbne	r3, [r3, #0]
 80007d0:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007d2:	f7ff ffed 	bl	80007b0 <HAL_GetTick>
 80007d6:	1b40      	subs	r0, r0, r5
 80007d8:	42a0      	cmp	r0, r4
 80007da:	d3fa      	bcc.n	80007d2 <HAL_Delay+0x16>
  {
  }
}
 80007dc:	b003      	add	sp, #12
 80007de:	bd30      	pop	{r4, r5, pc}
 80007e0:	20000004 	.word	0x20000004

080007e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e4:	4a07      	ldr	r2, [pc, #28]	; (8000804 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007e6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007ea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007f2:	041b      	lsls	r3, r3, #16
 80007f4:	0c1b      	lsrs	r3, r3, #16
 80007f6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80007fe:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000800:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000802:	4770      	bx	lr
 8000804:	e000ed00 	.word	0xe000ed00

08000808 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800080a:	b570      	push	{r4, r5, r6, lr}
 800080c:	68dc      	ldr	r4, [r3, #12]

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080e:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000812:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000816:	f1c4 0507 	rsb	r5, r4, #7
 800081a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081c:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000820:	bf28      	it	cs
 8000822:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000824:	2b06      	cmp	r3, #6
 8000826:	bf98      	it	ls
 8000828:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082a:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082e:	bf88      	it	hi
 8000830:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000832:	ea21 0303 	bic.w	r3, r1, r3
 8000836:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000838:	fa06 f404 	lsl.w	r4, r6, r4
 800083c:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000840:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000842:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000846:	bfa8      	it	ge
 8000848:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 800084c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000850:	bfb8      	it	lt
 8000852:	4a06      	ldrlt	r2, [pc, #24]	; (800086c <HAL_NVIC_SetPriority+0x64>)
 8000854:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000856:	bfab      	itete	ge
 8000858:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800085c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000860:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000864:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	e000ed00 	.word	0xe000ed00
 800086c:	e000ed14 	.word	0xe000ed14

08000870 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000870:	2800      	cmp	r0, #0
 8000872:	db08      	blt.n	8000886 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000874:	2301      	movs	r3, #1
 8000876:	0942      	lsrs	r2, r0, #5
 8000878:	f000 001f 	and.w	r0, r0, #31
 800087c:	fa03 f000 	lsl.w	r0, r3, r0
 8000880:	4b01      	ldr	r3, [pc, #4]	; (8000888 <HAL_NVIC_EnableIRQ+0x18>)
 8000882:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000886:	4770      	bx	lr
 8000888:	e000e100 	.word	0xe000e100

0800088c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800088c:	3801      	subs	r0, #1
 800088e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000892:	d20a      	bcs.n	80008aa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000894:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000898:	4a06      	ldr	r2, [pc, #24]	; (80008b4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800089a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800089c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008a4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80008aa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000e010 	.word	0xe000e010
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <FLASH_Program_DoubleWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80008b8:	4909      	ldr	r1, [pc, #36]	; (80008e0 <FLASH_Program_DoubleWord+0x28>)
{
 80008ba:	b510      	push	{r4, lr}
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80008bc:	690c      	ldr	r4, [r1, #16]
 80008be:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 80008c2:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80008c4:	690c      	ldr	r4, [r1, #16]
 80008c6:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 80008ca:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 80008cc:	690c      	ldr	r4, [r1, #16]
 80008ce:	f044 0401 	orr.w	r4, r4, #1
 80008d2:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80008d4:	6002      	str	r2, [r0, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80008d6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80008da:	6043      	str	r3, [r0, #4]
}
 80008dc:	bd10      	pop	{r4, pc}
 80008de:	bf00      	nop
 80008e0:	40023c00 	.word	0x40023c00

080008e4 <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <FLASH_Program_Word+0x20>)
 80008e6:	691a      	ldr	r2, [r3, #16]
 80008e8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80008ec:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80008ee:	691a      	ldr	r2, [r3, #16]
 80008f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80008f4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 80008f6:	691a      	ldr	r2, [r3, #16]
 80008f8:	f042 0201 	orr.w	r2, r2, #1
 80008fc:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t*)Address = Data;
 80008fe:	6001      	str	r1, [r0, #0]
}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40023c00 	.word	0x40023c00

08000908 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000908:	4b07      	ldr	r3, [pc, #28]	; (8000928 <FLASH_Program_HalfWord+0x20>)
 800090a:	691a      	ldr	r2, [r3, #16]
 800090c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000910:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8000912:	691a      	ldr	r2, [r3, #16]
 8000914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000918:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800091a:	691a      	ldr	r2, [r3, #16]
 800091c:	f042 0201 	orr.w	r2, r2, #1
 8000920:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t*)Address = Data;
 8000922:	8001      	strh	r1, [r0, #0]
}
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40023c00 	.word	0x40023c00

0800092c <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800092c:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <FLASH_SetErrorCode+0x6c>)
 800092e:	68da      	ldr	r2, [r3, #12]
 8000930:	06d2      	lsls	r2, r2, #27
 8000932:	d506      	bpl.n	8000942 <FLASH_SetErrorCode+0x16>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000934:	4919      	ldr	r1, [pc, #100]	; (800099c <FLASH_SetErrorCode+0x70>)
 8000936:	69ca      	ldr	r2, [r1, #28]
 8000938:	f042 0208 	orr.w	r2, r2, #8
 800093c:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800093e:	2210      	movs	r2, #16
 8000940:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8000942:	68da      	ldr	r2, [r3, #12]
 8000944:	0690      	lsls	r0, r2, #26
 8000946:	d506      	bpl.n	8000956 <FLASH_SetErrorCode+0x2a>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000948:	4914      	ldr	r1, [pc, #80]	; (800099c <FLASH_SetErrorCode+0x70>)
 800094a:	69ca      	ldr	r2, [r1, #28]
 800094c:	f042 0204 	orr.w	r2, r2, #4
 8000950:	61ca      	str	r2, [r1, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8000952:	2220      	movs	r2, #32
 8000954:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <FLASH_SetErrorCode+0x6c>)
 8000958:	68da      	ldr	r2, [r3, #12]
 800095a:	0651      	lsls	r1, r2, #25
 800095c:	d506      	bpl.n	800096c <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800095e:	490f      	ldr	r1, [pc, #60]	; (800099c <FLASH_SetErrorCode+0x70>)
 8000960:	69ca      	ldr	r2, [r1, #28]
 8000962:	f042 0202 	orr.w	r2, r2, #2
 8000966:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8000968:	2240      	movs	r2, #64	; 0x40
 800096a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800096c:	68da      	ldr	r2, [r3, #12]
 800096e:	0612      	lsls	r2, r2, #24
 8000970:	d506      	bpl.n	8000980 <FLASH_SetErrorCode+0x54>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8000972:	490a      	ldr	r1, [pc, #40]	; (800099c <FLASH_SetErrorCode+0x70>)
 8000974:	69ca      	ldr	r2, [r1, #28]
 8000976:	f042 0201 	orr.w	r2, r2, #1
 800097a:	61ca      	str	r2, [r1, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800097c:	2280      	movs	r2, #128	; 0x80
 800097e:	60da      	str	r2, [r3, #12]
  }
    
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8000980:	4a05      	ldr	r2, [pc, #20]	; (8000998 <FLASH_SetErrorCode+0x6c>)
 8000982:	68d3      	ldr	r3, [r2, #12]
 8000984:	079b      	lsls	r3, r3, #30
 8000986:	d506      	bpl.n	8000996 <FLASH_SetErrorCode+0x6a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8000988:	4904      	ldr	r1, [pc, #16]	; (800099c <FLASH_SetErrorCode+0x70>)
 800098a:	69cb      	ldr	r3, [r1, #28]
 800098c:	f043 0310 	orr.w	r3, r3, #16
 8000990:	61cb      	str	r3, [r1, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8000992:	2302      	movs	r3, #2
 8000994:	60d3      	str	r3, [r2, #12]
  }
}
 8000996:	4770      	bx	lr
 8000998:	40023c00 	.word	0x40023c00
 800099c:	2000026c 	.word	0x2000026c

080009a0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_FLASH_Unlock+0x1c>)
 80009a2:	691a      	ldr	r2, [r3, #16]
 80009a4:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80009a6:	bfbf      	itttt	lt
 80009a8:	4a05      	ldrlt	r2, [pc, #20]	; (80009c0 <HAL_FLASH_Unlock+0x20>)
 80009aa:	605a      	strlt	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80009ac:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 80009b0:	605a      	strlt	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80009b2:	bfba      	itte	lt
 80009b4:	6918      	ldrlt	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 80009b6:	0fc0      	lsrlt	r0, r0, #31
 80009b8:	2000      	movge	r0, #0
}
 80009ba:	4770      	bx	lr
 80009bc:	40023c00 	.word	0x40023c00
 80009c0:	45670123 	.word	0x45670123

080009c4 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 80009c4:	4a03      	ldr	r2, [pc, #12]	; (80009d4 <HAL_FLASH_Lock+0x10>)
}
 80009c6:	2000      	movs	r0, #0
  FLASH->CR |= FLASH_CR_LOCK;
 80009c8:	6913      	ldr	r3, [r2, #16]
 80009ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ce:	6113      	str	r3, [r2, #16]
}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	40023c00 	.word	0x40023c00

080009d8 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80009d8:	2200      	movs	r2, #0
{ 
 80009da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <FLASH_WaitForLastOperation+0x4c>)
{ 
 80009de:	4605      	mov	r5, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80009e0:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 80009e2:	f7ff fee5 	bl	80007b0 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80009e6:	4c10      	ldr	r4, [pc, #64]	; (8000a28 <FLASH_WaitForLastOperation+0x50>)
  tickstart = HAL_GetTick();
 80009e8:	4607      	mov	r7, r0
 80009ea:	4626      	mov	r6, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80009ec:	68e3      	ldr	r3, [r4, #12]
 80009ee:	03da      	lsls	r2, r3, #15
 80009f0:	d40c      	bmi.n	8000a0c <FLASH_WaitForLastOperation+0x34>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80009f2:	68e3      	ldr	r3, [r4, #12]
 80009f4:	07db      	lsls	r3, r3, #31
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80009f6:	bf44      	itt	mi
 80009f8:	2301      	movmi	r3, #1
 80009fa:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80009fc:	68f0      	ldr	r0, [r6, #12]
 80009fe:	f010 00f2 	ands.w	r0, r0, #242	; 0xf2
 8000a02:	d007      	beq.n	8000a14 <FLASH_WaitForLastOperation+0x3c>
    FLASH_SetErrorCode();
 8000a04:	f7ff ff92 	bl	800092c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000a08:	2001      	movs	r0, #1
 8000a0a:	e003      	b.n	8000a14 <FLASH_WaitForLastOperation+0x3c>
    if(Timeout != HAL_MAX_DELAY)
 8000a0c:	1c69      	adds	r1, r5, #1
 8000a0e:	d0ed      	beq.n	80009ec <FLASH_WaitForLastOperation+0x14>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000a10:	b90d      	cbnz	r5, 8000a16 <FLASH_WaitForLastOperation+0x3e>
        return HAL_TIMEOUT;
 8000a12:	2003      	movs	r0, #3
}  
 8000a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000a16:	f7ff fecb 	bl	80007b0 <HAL_GetTick>
 8000a1a:	1bc0      	subs	r0, r0, r7
 8000a1c:	42a8      	cmp	r0, r5
 8000a1e:	d9e5      	bls.n	80009ec <FLASH_WaitForLastOperation+0x14>
 8000a20:	e7f7      	b.n	8000a12 <FLASH_WaitForLastOperation+0x3a>
 8000a22:	bf00      	nop
 8000a24:	2000026c 	.word	0x2000026c
 8000a28:	40023c00 	.word	0x40023c00

08000a2c <HAL_FLASH_Program>:
{
 8000a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8000a30:	4d1f      	ldr	r5, [pc, #124]	; (8000ab0 <HAL_FLASH_Program+0x84>)
{
 8000a32:	4698      	mov	r8, r3
  __HAL_LOCK(&pFlash);
 8000a34:	7e2b      	ldrb	r3, [r5, #24]
{
 8000a36:	4607      	mov	r7, r0
  __HAL_LOCK(&pFlash);
 8000a38:	2b01      	cmp	r3, #1
{
 8000a3a:	460e      	mov	r6, r1
 8000a3c:	4614      	mov	r4, r2
  __HAL_LOCK(&pFlash);
 8000a3e:	d035      	beq.n	8000aac <HAL_FLASH_Program+0x80>
 8000a40:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000a42:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000a46:	762b      	strb	r3, [r5, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000a48:	f7ff ffc6 	bl	80009d8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000a4c:	b9b0      	cbnz	r0, 8000a7c <HAL_FLASH_Program+0x50>
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8000a4e:	b9cf      	cbnz	r7, 8000a84 <HAL_FLASH_Program+0x58>
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <HAL_FLASH_Program+0x88>)
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8000a52:	b2e4      	uxtb	r4, r4
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000a54:	691a      	ldr	r2, [r3, #16]
 8000a56:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000a5a:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8000a5c:	691a      	ldr	r2, [r3, #16]
 8000a5e:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 8000a60:	691a      	ldr	r2, [r3, #16]
 8000a62:	f042 0201 	orr.w	r2, r2, #1
 8000a66:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 8000a68:	7034      	strb	r4, [r6, #0]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000a6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000a6e:	f7ff ffb3 	bl	80009d8 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);  
 8000a72:	4a10      	ldr	r2, [pc, #64]	; (8000ab4 <HAL_FLASH_Program+0x88>)
 8000a74:	6913      	ldr	r3, [r2, #16]
 8000a76:	f023 0301 	bic.w	r3, r3, #1
 8000a7a:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	762b      	strb	r3, [r5, #24]
}
 8000a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000a84:	2f01      	cmp	r7, #1
 8000a86:	d104      	bne.n	8000a92 <HAL_FLASH_Program+0x66>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8000a88:	b2a1      	uxth	r1, r4
 8000a8a:	4630      	mov	r0, r6
 8000a8c:	f7ff ff3c 	bl	8000908 <FLASH_Program_HalfWord>
 8000a90:	e7eb      	b.n	8000a6a <HAL_FLASH_Program+0x3e>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000a92:	2f02      	cmp	r7, #2
 8000a94:	d104      	bne.n	8000aa0 <HAL_FLASH_Program+0x74>
      FLASH_Program_Word(Address, (uint32_t) Data);
 8000a96:	4621      	mov	r1, r4
 8000a98:	4630      	mov	r0, r6
 8000a9a:	f7ff ff23 	bl	80008e4 <FLASH_Program_Word>
 8000a9e:	e7e4      	b.n	8000a6a <HAL_FLASH_Program+0x3e>
      FLASH_Program_DoubleWord(Address, Data);
 8000aa0:	4622      	mov	r2, r4
 8000aa2:	4643      	mov	r3, r8
 8000aa4:	4630      	mov	r0, r6
 8000aa6:	f7ff ff07 	bl	80008b8 <FLASH_Program_DoubleWord>
 8000aaa:	e7de      	b.n	8000a6a <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 8000aac:	2002      	movs	r0, #2
 8000aae:	e7e7      	b.n	8000a80 <HAL_FLASH_Program+0x54>
 8000ab0:	2000026c 	.word	0x2000026c
 8000ab4:	40023c00 	.word	0x40023c00

08000ab8 <FLASH_MassErase.isra.0>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <FLASH_MassErase.isra.0+0x20>)
 8000aba:	691a      	ldr	r2, [r3, #16]
 8000abc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000ac0:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 8000ac2:	691a      	ldr	r2, [r3, #16]
 8000ac4:	f042 0204 	orr.w	r2, r2, #4
 8000ac8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8000aca:	691a      	ldr	r2, [r3, #16]
 8000acc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000ad0:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8000ad4:	6118      	str	r0, [r3, #16]
}
 8000ad6:	4770      	bx	lr
 8000ad8:	40023c00 	.word	0x40023c00

08000adc <FLASH_Erase_Sector>:
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8000adc:	b139      	cbz	r1, 8000aee <FLASH_Erase_Sector+0x12>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8000ade:	2901      	cmp	r1, #1
 8000ae0:	d021      	beq.n	8000b26 <FLASH_Erase_Sector+0x4a>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8000ae2:	2902      	cmp	r1, #2
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8000ae4:	bf0c      	ite	eq
 8000ae6:	f44f 7100 	moveq.w	r1, #512	; 0x200
 8000aea:	f44f 7140 	movne.w	r1, #768	; 0x300
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <FLASH_Erase_Sector+0x50>)
 8000af0:	691a      	ldr	r2, [r3, #16]
 8000af2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000af6:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 8000af8:	691a      	ldr	r2, [r3, #16]
 8000afa:	4311      	orrs	r1, r2
 8000afc:	6119      	str	r1, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8000afe:	691a      	ldr	r2, [r3, #16]
 8000b00:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000b04:	611a      	str	r2, [r3, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b06:	22f8      	movs	r2, #248	; 0xf8
 8000b08:	fa92 f2a2 	rbit	r2, r2
  FLASH->CR |= FLASH_CR_SER | (Sector << POSITION_VAL(FLASH_CR_SNB));
 8000b0c:	fab2 f282 	clz	r2, r2
 8000b10:	6919      	ldr	r1, [r3, #16]
 8000b12:	4090      	lsls	r0, r2
 8000b14:	f041 0202 	orr.w	r2, r1, #2
 8000b18:	4310      	orrs	r0, r2
 8000b1a:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8000b1c:	691a      	ldr	r2, [r3, #16]
 8000b1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b22:	611a      	str	r2, [r3, #16]
}
 8000b24:	4770      	bx	lr
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8000b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b2a:	e7e0      	b.n	8000aee <FLASH_Erase_Sector+0x12>
 8000b2c:	40023c00 	.word	0x40023c00

08000b30 <FLASH_FlushCaches>:
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <FLASH_FlushCaches+0x54>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	0591      	lsls	r1, r2, #22
 8000b36:	d50f      	bpl.n	8000b58 <FLASH_FlushCaches+0x28>
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b3e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b4e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b56:	601a      	str	r2, [r3, #0]
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <FLASH_FlushCaches+0x54>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	0552      	lsls	r2, r2, #21
 8000b5e:	d50f      	bpl.n	8000b80 <FLASH_FlushCaches+0x50>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b66:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000b76:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b7e:	601a      	str	r2, [r3, #0]
}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40023c00 	.word	0x40023c00

08000b88 <HAL_FLASHEx_Erase>:
{
 8000b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 8000b8c:	4e23      	ldr	r6, [pc, #140]	; (8000c1c <HAL_FLASHEx_Erase+0x94>)
{
 8000b8e:	4604      	mov	r4, r0
  __HAL_LOCK(&pFlash);
 8000b90:	7e33      	ldrb	r3, [r6, #24]
{
 8000b92:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d03f      	beq.n	8000c18 <HAL_FLASHEx_Erase+0x90>
 8000b98:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000b9a:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8000b9e:	7633      	strb	r3, [r6, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000ba0:	f7ff ff1a 	bl	80009d8 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8000ba4:	4605      	mov	r5, r0
 8000ba6:	b9a8      	cbnz	r0, 8000bd4 <HAL_FLASHEx_Erase+0x4c>
    *SectorError = 0xFFFFFFFFU;
 8000ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bac:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000bb0:	6823      	ldr	r3, [r4, #0]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d113      	bne.n	8000bde <HAL_FLASHEx_Erase+0x56>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8000bb6:	7c20      	ldrb	r0, [r4, #16]
 8000bb8:	f7ff ff7e 	bl	8000ab8 <FLASH_MassErase.isra.0>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000bbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bc0:	f7ff ff0a 	bl	80009d8 <FLASH_WaitForLastOperation>
 8000bc4:	4605      	mov	r5, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 8000bc6:	4a16      	ldr	r2, [pc, #88]	; (8000c20 <HAL_FLASHEx_Erase+0x98>)
 8000bc8:	6913      	ldr	r3, [r2, #16]
 8000bca:	f023 0304 	bic.w	r3, r3, #4
 8000bce:	6113      	str	r3, [r2, #16]
    FLASH_FlushCaches();    
 8000bd0:	f7ff ffae 	bl	8000b30 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	7633      	strb	r3, [r6, #24]
}
 8000bd8:	4628      	mov	r0, r5
 8000bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000bde:	68a7      	ldr	r7, [r4, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8000be0:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8000c20 <HAL_FLASHEx_Erase+0x98>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000be4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8000be8:	4413      	add	r3, r2
 8000bea:	42bb      	cmp	r3, r7
 8000bec:	d9f0      	bls.n	8000bd0 <HAL_FLASHEx_Erase+0x48>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8000bee:	7c21      	ldrb	r1, [r4, #16]
 8000bf0:	4638      	mov	r0, r7
 8000bf2:	f7ff ff73 	bl	8000adc <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000bf6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bfa:	f7ff feed 	bl	80009d8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8000bfe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8000c02:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8000c06:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 8000c0a:	b118      	cbz	r0, 8000c14 <HAL_FLASHEx_Erase+0x8c>
          *SectorError = index;
 8000c0c:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000c10:	4605      	mov	r5, r0
          break;
 8000c12:	e7dd      	b.n	8000bd0 <HAL_FLASHEx_Erase+0x48>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8000c14:	3701      	adds	r7, #1
 8000c16:	e7e5      	b.n	8000be4 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8000c18:	2502      	movs	r5, #2
 8000c1a:	e7dd      	b.n	8000bd8 <HAL_FLASHEx_Erase+0x50>
 8000c1c:	2000026c 	.word	0x2000026c
 8000c20:	40023c00 	.word	0x40023c00

08000c24 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8000c24:	2300      	movs	r3, #0
{
 8000c26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2a:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8000de8 <HAL_GPIO_Init+0x1c4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c32:	4a6b      	ldr	r2, [pc, #428]	; (8000de0 <HAL_GPIO_Init+0x1bc>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c34:	fa38 f403 	lsrs.w	r4, r8, r3
 8000c38:	d102      	bne.n	8000c40 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8000c3a:	b003      	add	sp, #12
 8000c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c40:	f04f 0c01 	mov.w	ip, #1
 8000c44:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8000c48:	ea1c 0608 	ands.w	r6, ip, r8
 8000c4c:	f000 80b6 	beq.w	8000dbc <HAL_GPIO_Init+0x198>
 8000c50:	2503      	movs	r5, #3
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c52:	684c      	ldr	r4, [r1, #4]
 8000c54:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000c58:	f024 0a10 	bic.w	sl, r4, #16
 8000c5c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8000c60:	fa05 f50e 	lsl.w	r5, r5, lr
 8000c64:	2f01      	cmp	r7, #1
 8000c66:	ea6f 0505 	mvn.w	r5, r5
 8000c6a:	d811      	bhi.n	8000c90 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->OSPEEDR;
 8000c6c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c6e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c72:	68cf      	ldr	r7, [r1, #12]
 8000c74:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c78:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8000c7c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c7e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c80:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000c84:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000c88:	409f      	lsls	r7, r3
 8000c8a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8000c8e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c90:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c92:	f1ba 0f02 	cmp.w	sl, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c96:	ea07 0c05 	and.w	ip, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c9a:	688f      	ldr	r7, [r1, #8]
 8000c9c:	fa07 f70e 	lsl.w	r7, r7, lr
 8000ca0:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->PUPDR = temp;
 8000ca4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ca6:	d116      	bne.n	8000cd6 <HAL_GPIO_Init+0xb2>
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ca8:	f04f 0c0f 	mov.w	ip, #15
        temp = GPIOx->AFR[position >> 3u];
 8000cac:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000cb0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cb4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000cb8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cbc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000cc0:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000cc4:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cc8:	690f      	ldr	r7, [r1, #16]
 8000cca:	fa07 f70b 	lsl.w	r7, r7, fp
 8000cce:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3u] = temp;
 8000cd2:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000cd6:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000cd8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cda:	f004 0703 	and.w	r7, r4, #3
 8000cde:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000ce2:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 8000ce6:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ce8:	00e5      	lsls	r5, r4, #3
 8000cea:	d567      	bpl.n	8000dbc <HAL_GPIO_Init+0x198>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cec:	f04f 0b00 	mov.w	fp, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cf0:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf4:	f8cd b004 	str.w	fp, [sp, #4]
 8000cf8:	f8d9 7044 	ldr.w	r7, [r9, #68]	; 0x44
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cfc:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d00:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000d04:	f8c9 7044 	str.w	r7, [r9, #68]	; 0x44
 8000d08:	f8d9 7044 	ldr.w	r7, [r9, #68]	; 0x44
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d0c:	4d35      	ldr	r5, [pc, #212]	; (8000de4 <HAL_GPIO_Init+0x1c0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000d12:	9701      	str	r7, [sp, #4]
 8000d14:	9f01      	ldr	r7, [sp, #4]
 8000d16:	f023 0703 	bic.w	r7, r3, #3
 8000d1a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000d1e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp = SYSCFG->EXTICR[position >> 2u];
 8000d22:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d26:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000d2a:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d2e:	42a8      	cmp	r0, r5
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d30:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d34:	d044      	beq.n	8000dc0 <HAL_GPIO_Init+0x19c>
 8000d36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d3a:	42a8      	cmp	r0, r5
 8000d3c:	d042      	beq.n	8000dc4 <HAL_GPIO_Init+0x1a0>
 8000d3e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d42:	42a8      	cmp	r0, r5
 8000d44:	d040      	beq.n	8000dc8 <HAL_GPIO_Init+0x1a4>
 8000d46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d4a:	42a8      	cmp	r0, r5
 8000d4c:	d03e      	beq.n	8000dcc <HAL_GPIO_Init+0x1a8>
 8000d4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d52:	42a8      	cmp	r0, r5
 8000d54:	d03c      	beq.n	8000dd0 <HAL_GPIO_Init+0x1ac>
 8000d56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d5a:	42a8      	cmp	r0, r5
 8000d5c:	d03a      	beq.n	8000dd4 <HAL_GPIO_Init+0x1b0>
 8000d5e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d62:	42a8      	cmp	r0, r5
 8000d64:	d038      	beq.n	8000dd8 <HAL_GPIO_Init+0x1b4>
 8000d66:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d6a:	42a8      	cmp	r0, r5
 8000d6c:	d036      	beq.n	8000ddc <HAL_GPIO_Init+0x1b8>
 8000d6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d72:	42a8      	cmp	r0, r5
 8000d74:	bf14      	ite	ne
 8000d76:	2509      	movne	r5, #9
 8000d78:	2508      	moveq	r5, #8
 8000d7a:	fa05 f50e 	lsl.w	r5, r5, lr
 8000d7e:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d82:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8000d84:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 8000d86:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d88:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8000d8c:	bf0c      	ite	eq
 8000d8e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000d90:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 8000d92:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000d94:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d96:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8000d9a:	bf0c      	ite	eq
 8000d9c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000d9e:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000da0:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000da2:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000da4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8000da8:	bf0c      	ite	eq
 8000daa:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8000dac:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000dae:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000db0:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000db2:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8000db4:	bf54      	ite	pl
 8000db6:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8000db8:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000dba:	60d5      	str	r5, [r2, #12]
    position++;
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	e739      	b.n	8000c34 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dc0:	465d      	mov	r5, fp
 8000dc2:	e7da      	b.n	8000d7a <HAL_GPIO_Init+0x156>
 8000dc4:	2501      	movs	r5, #1
 8000dc6:	e7d8      	b.n	8000d7a <HAL_GPIO_Init+0x156>
 8000dc8:	2502      	movs	r5, #2
 8000dca:	e7d6      	b.n	8000d7a <HAL_GPIO_Init+0x156>
 8000dcc:	2503      	movs	r5, #3
 8000dce:	e7d4      	b.n	8000d7a <HAL_GPIO_Init+0x156>
 8000dd0:	2504      	movs	r5, #4
 8000dd2:	e7d2      	b.n	8000d7a <HAL_GPIO_Init+0x156>
 8000dd4:	2505      	movs	r5, #5
 8000dd6:	e7d0      	b.n	8000d7a <HAL_GPIO_Init+0x156>
 8000dd8:	2506      	movs	r5, #6
 8000dda:	e7ce      	b.n	8000d7a <HAL_GPIO_Init+0x156>
 8000ddc:	2507      	movs	r5, #7
 8000dde:	e7cc      	b.n	8000d7a <HAL_GPIO_Init+0x156>
 8000de0:	40013c00 	.word	0x40013c00
 8000de4:	40020000 	.word	0x40020000
 8000de8:	40023800 	.word	0x40023800

08000dec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000dec:	6903      	ldr	r3, [r0, #16]
 8000dee:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000df0:	bf14      	ite	ne
 8000df2:	2001      	movne	r0, #1
 8000df4:	2000      	moveq	r0, #0
 8000df6:	4770      	bx	lr

08000df8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000df8:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000dfa:	4604      	mov	r4, r0
{
 8000dfc:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8000dfe:	b360      	cbz	r0, 8000e5a <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e00:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8000e04:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000e06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e0a:	b91b      	cbnz	r3, 8000e14 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000e0c:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000e10:	f002 fbb2 	bl	8003578 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000e14:	2303      	movs	r3, #3
 8000e16:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e1a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  {
    hpcd->Init.dma_enable = 0U;
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000e1c:	4625      	mov	r5, r4

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e1e:	466e      	mov	r6, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000e20:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8000e24:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8000e28:	bf08      	it	eq
 8000e2a:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 8000e2c:	f001 f830 	bl	8001e90 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e32:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e36:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e38:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e3c:	4625      	mov	r5, r4
 8000e3e:	e886 0003 	stmia.w	r6, {r0, r1}
 8000e42:	1d27      	adds	r7, r4, #4
 8000e44:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000e48:	f855 0b10 	ldr.w	r0, [r5], #16
 8000e4c:	f000 ff6c 	bl	8001d28 <USB_CoreInit>
 8000e50:	4606      	mov	r6, r0
 8000e52:	b120      	cbz	r0, 8000e5e <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e54:	2302      	movs	r3, #2
 8000e56:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8000e5a:	2501      	movs	r5, #1
 8000e5c:	e050      	b.n	8000f00 <HAL_PCD_Init+0x108>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e5e:	4601      	mov	r1, r0
 8000e60:	6820      	ldr	r0, [r4, #0]
 8000e62:	f001 f81b 	bl	8001e9c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e66:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e68:	f04f 0e01 	mov.w	lr, #1
 8000e6c:	261c      	movs	r6, #28
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e6e:	4601      	mov	r1, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e70:	f8d4 c004 	ldr.w	ip, [r4, #4]
 8000e74:	b2c2      	uxtb	r2, r0
 8000e76:	4594      	cmp	ip, r2
 8000e78:	f100 0001 	add.w	r0, r0, #1
 8000e7c:	d81c      	bhi.n	8000eb8 <HAL_PCD_Init+0xc0>
 8000e7e:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e80:	261c      	movs	r6, #28
 8000e82:	4619      	mov	r1, r3
 8000e84:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e86:	4584      	cmp	ip, r0
 8000e88:	f103 0301 	add.w	r3, r3, #1
 8000e8c:	d822      	bhi.n	8000ed4 <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e90:	466e      	mov	r6, sp
 8000e92:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e96:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000e98:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e9c:	e886 0003 	stmia.w	r6, {r0, r1}
 8000ea0:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8000ea4:	6820      	ldr	r0, [r4, #0]
 8000ea6:	f001 f83b 	bl	8001f20 <USB_DevInit>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	4605      	mov	r5, r0
 8000eae:	b300      	cbz	r0, 8000ef2 <HAL_PCD_Init+0xfa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 8000eb6:	e7d0      	b.n	8000e5a <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8000eb8:	fb06 4302 	mla	r3, r6, r2, r4
 8000ebc:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8000ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000ec4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ec8:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000ecc:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ed0:	6519      	str	r1, [r3, #80]	; 0x50
 8000ed2:	e7cf      	b.n	8000e74 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8000ed4:	fb06 4200 	mla	r2, r6, r0, r4
 8000ed8:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8000edc:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ee0:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ee4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ee8:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000eec:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8000ef0:	e7c8      	b.n	8000e84 <HAL_PCD_Init+0x8c>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8000ef2:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000ef6:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8000efa:	6820      	ldr	r0, [r4, #0]
 8000efc:	f001 fb1c 	bl	8002538 <USB_DevDisconnect>

  return HAL_OK;
}
 8000f00:	4628      	mov	r0, r5
 8000f02:	b00b      	add	sp, #44	; 0x2c
 8000f04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000f06 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000f06:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
{
 8000f0a:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000f0c:	2b01      	cmp	r3, #1
{
 8000f0e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000f10:	d00c      	beq.n	8000f2c <HAL_PCD_Start+0x26>
 8000f12:	2301      	movs	r3, #1
 8000f14:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8000f18:	6800      	ldr	r0, [r0, #0]
 8000f1a:	f001 fb01 	bl	8002520 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000f1e:	6820      	ldr	r0, [r4, #0]
 8000f20:	f000 ffb0 	bl	8001e84 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000f24:	2000      	movs	r0, #0
 8000f26:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
}
 8000f2a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000f2c:	2002      	movs	r0, #2
 8000f2e:	e7fc      	b.n	8000f2a <HAL_PCD_Start+0x24>

08000f30 <HAL_PCD_Stop>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 8000f30:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
{
 8000f34:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8000f36:	2b01      	cmp	r3, #1
{
 8000f38:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000f3a:	d016      	beq.n	8000f6a <HAL_PCD_Stop+0x3a>
 8000f3c:	2601      	movs	r6, #1
 8000f3e:	f880 63bc 	strb.w	r6, [r0, #956]	; 0x3bc
  __HAL_PCD_DISABLE(hpcd);
 8000f42:	6800      	ldr	r0, [r0, #0]
 8000f44:	f000 ffa4 	bl	8001e90 <USB_DisableGlobalInt>

  if (USB_StopDevice(hpcd->Instance) != HAL_OK)
 8000f48:	6820      	ldr	r0, [r4, #0]
 8000f4a:	f001 fab9 	bl	80024c0 <USB_StopDevice>
 8000f4e:	4605      	mov	r5, r0
 8000f50:	b128      	cbz	r0, 8000f5e <HAL_PCD_Stop+0x2e>
  {
    __HAL_UNLOCK(hpcd);
 8000f52:	2300      	movs	r3, #0
    return HAL_ERROR;
 8000f54:	4635      	mov	r5, r6
    __HAL_UNLOCK(hpcd);
 8000f56:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc

  (void)USB_DevDisconnect(hpcd->Instance);
  __HAL_UNLOCK(hpcd);

  return HAL_OK;
}
 8000f5a:	4628      	mov	r0, r5
 8000f5c:	bd70      	pop	{r4, r5, r6, pc}
  (void)USB_DevDisconnect(hpcd->Instance);
 8000f5e:	6820      	ldr	r0, [r4, #0]
 8000f60:	f001 faea 	bl	8002538 <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8000f64:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
 8000f68:	e7f7      	b.n	8000f5a <HAL_PCD_Stop+0x2a>
  __HAL_LOCK(hpcd);
 8000f6a:	2502      	movs	r5, #2
 8000f6c:	e7f5      	b.n	8000f5a <HAL_PCD_Stop+0x2a>
	...

08000f70 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000f74:	f8d0 b000 	ldr.w	fp, [r0]
{
 8000f78:	b087      	sub	sp, #28
 8000f7a:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000f7c:	4658      	mov	r0, fp
 8000f7e:	f001 fb16 	bl	80025ae <USB_GetMode>
 8000f82:	9002      	str	r0, [sp, #8]
 8000f84:	2800      	cmp	r0, #0
 8000f86:	f040 811a 	bne.w	80011be <HAL_PCD_IRQHandler+0x24e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000f8a:	6820      	ldr	r0, [r4, #0]
 8000f8c:	f001 fae0 	bl	8002550 <USB_ReadInterrupts>
 8000f90:	2800      	cmp	r0, #0
 8000f92:	f000 8114 	beq.w	80011be <HAL_PCD_IRQHandler+0x24e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000f96:	6820      	ldr	r0, [r4, #0]
 8000f98:	f001 fada 	bl	8002550 <USB_ReadInterrupts>
 8000f9c:	0786      	lsls	r6, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000f9e:	bf48      	it	mi
 8000fa0:	6822      	ldrmi	r2, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000fa2:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000fa4:	bf42      	ittt	mi
 8000fa6:	6953      	ldrmi	r3, [r2, #20]
 8000fa8:	f003 0302 	andmi.w	r3, r3, #2
 8000fac:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000fae:	f001 facf 	bl	8002550 <USB_ReadInterrupts>
 8000fb2:	0305      	lsls	r5, r0, #12
 8000fb4:	f100 8106 	bmi.w	80011c4 <HAL_PCD_IRQHandler+0x254>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000fb8:	6820      	ldr	r0, [r4, #0]
 8000fba:	f001 fac9 	bl	8002550 <USB_ReadInterrupts>
 8000fbe:	0340      	lsls	r0, r0, #13
 8000fc0:	d50b      	bpl.n	8000fda <HAL_PCD_IRQHandler+0x6a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000fc2:	6820      	ldr	r0, [r4, #0]
 8000fc4:	f001 fad0 	bl	8002568 <USB_ReadDevAllInEpInterrupt>
 8000fc8:	4625      	mov	r5, r4
 8000fca:	4681      	mov	r9, r0

      epnum = 0U;
 8000fcc:	2600      	movs	r6, #0
 8000fce:	f50b 6810 	add.w	r8, fp, #2304	; 0x900

      while (ep_intr != 0U)
 8000fd2:	f1b9 0f00 	cmp.w	r9, #0
 8000fd6:	f040 81be 	bne.w	8001356 <HAL_PCD_IRQHandler+0x3e6>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8000fda:	6820      	ldr	r0, [r4, #0]
 8000fdc:	f001 fab8 	bl	8002550 <USB_ReadInterrupts>
 8000fe0:	2800      	cmp	r0, #0
 8000fe2:	da0d      	bge.n	8001000 <HAL_PCD_IRQHandler+0x90>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000fe4:	f8db 3804 	ldr.w	r3, [fp, #2052]	; 0x804

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8000fe8:	4620      	mov	r0, r4
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8000fea:	f023 0301 	bic.w	r3, r3, #1
 8000fee:	f8cb 3804 	str.w	r3, [fp, #2052]	; 0x804
      HAL_PCD_ResumeCallback(hpcd);
 8000ff2:	f002 fb49 	bl	8003688 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8000ff6:	6822      	ldr	r2, [r4, #0]
 8000ff8:	6953      	ldr	r3, [r2, #20]
 8000ffa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000ffe:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001000:	6820      	ldr	r0, [r4, #0]
 8001002:	f001 faa5 	bl	8002550 <USB_ReadInterrupts>
 8001006:	0500      	lsls	r0, r0, #20
 8001008:	d50b      	bpl.n	8001022 <HAL_PCD_IRQHandler+0xb2>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800100a:	f8db 3808 	ldr.w	r3, [fp, #2056]	; 0x808
 800100e:	07d9      	lsls	r1, r3, #31
 8001010:	d502      	bpl.n	8001018 <HAL_PCD_IRQHandler+0xa8>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001012:	4620      	mov	r0, r4
 8001014:	f002 fb20 	bl	8003658 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001018:	6822      	ldr	r2, [r4, #0]
 800101a:	6953      	ldr	r3, [r2, #20]
 800101c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001020:	6153      	str	r3, [r2, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001022:	6820      	ldr	r0, [r4, #0]
 8001024:	f001 fa94 	bl	8002550 <USB_ReadInterrupts>
 8001028:	04c2      	lsls	r2, r0, #19
 800102a:	d535      	bpl.n	8001098 <HAL_PCD_IRQHandler+0x128>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800102c:	f50b 6500 	add.w	r5, fp, #2048	; 0x800
 8001030:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001032:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001034:	f023 0301 	bic.w	r3, r3, #1
 8001038:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800103a:	6820      	ldr	r0, [r4, #0]
 800103c:	f000 ff46 	bl	8001ecc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001040:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001044:	6860      	ldr	r0, [r4, #4]
 8001046:	f50b 6310 	add.w	r3, fp, #2304	; 0x900
 800104a:	9a02      	ldr	r2, [sp, #8]
 800104c:	4290      	cmp	r0, r2
 800104e:	f040 8218 	bne.w	8001482 <HAL_PCD_IRQHandler+0x512>
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001052:	69eb      	ldr	r3, [r5, #28]
 8001054:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001058:	61eb      	str	r3, [r5, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800105a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800105c:	2b00      	cmp	r3, #0
 800105e:	f000 8223 	beq.w	80014a8 <HAL_PCD_IRQHandler+0x538>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001062:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 8001066:	f043 030b 	orr.w	r3, r3, #11
 800106a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800106e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001070:	f043 030b 	orr.w	r3, r3, #11
 8001074:	646b      	str	r3, [r5, #68]	; 0x44
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001076:	f8db 3800 	ldr.w	r3, [fp, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800107a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800107e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001082:	f8cb 3800 	str.w	r3, [fp, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001086:	7c21      	ldrb	r1, [r4, #16]
 8001088:	6820      	ldr	r0, [r4, #0]
 800108a:	f001 faaf 	bl	80025ec <USB_EP0_OutStart>
                             (uint8_t *)hpcd->Setup);

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800108e:	6822      	ldr	r2, [r4, #0]
 8001090:	6953      	ldr	r3, [r2, #20]
 8001092:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001096:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001098:	6820      	ldr	r0, [r4, #0]
 800109a:	f001 fa59 	bl	8002550 <USB_ReadInterrupts>
 800109e:	0483      	lsls	r3, r0, #18
 80010a0:	d516      	bpl.n	80010d0 <HAL_PCD_IRQHandler+0x160>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80010a2:	6820      	ldr	r0, [r4, #0]
 80010a4:	f001 fa87 	bl	80025b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80010a8:	6820      	ldr	r0, [r4, #0]
 80010aa:	f000 fffd 	bl	80020a8 <USB_GetDevSpeed>
 80010ae:	60e0      	str	r0, [r4, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80010b0:	6825      	ldr	r5, [r4, #0]
 80010b2:	f000 fe1b 	bl	8001cec <HAL_RCC_GetHCLKFreq>
 80010b6:	7b22      	ldrb	r2, [r4, #12]
 80010b8:	4601      	mov	r1, r0
 80010ba:	4628      	mov	r0, r5
 80010bc:	f000 fe6e 	bl	8001d9c <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80010c0:	4620      	mov	r0, r4
 80010c2:	f002 fab6 	bl	8003632 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80010c6:	6822      	ldr	r2, [r4, #0]
 80010c8:	6953      	ldr	r3, [r2, #20]
 80010ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010ce:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80010d0:	6820      	ldr	r0, [r4, #0]
 80010d2:	f001 fa3d 	bl	8002550 <USB_ReadInterrupts>
 80010d6:	06c7      	lsls	r7, r0, #27
 80010d8:	d52b      	bpl.n	8001132 <HAL_PCD_IRQHandler+0x1c2>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010da:	6822      	ldr	r2, [r4, #0]
 80010dc:	6993      	ldr	r3, [r2, #24]
 80010de:	f023 0310 	bic.w	r3, r3, #16
 80010e2:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 80010e4:	f8db 5020 	ldr.w	r5, [fp, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80010e8:	f3c5 4343 	ubfx	r3, r5, #17, #4
 80010ec:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80010ee:	f005 060f 	and.w	r6, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80010f2:	f040 81e4 	bne.w	80014be <HAL_PCD_IRQHandler+0x54e>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80010f6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80010fa:	421d      	tst	r5, r3
 80010fc:	d014      	beq.n	8001128 <HAL_PCD_IRQHandler+0x1b8>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80010fe:	231c      	movs	r3, #28
 8001100:	fb03 4606 	mla	r6, r3, r6, r4
 8001104:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8001108:	462a      	mov	r2, r5
 800110a:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 800110e:	4658      	mov	r0, fp
 8001110:	f001 f974 	bl	80023fc <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001114:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
 8001118:	442b      	add	r3, r5
 800111a:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800111e:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 8001122:	441d      	add	r5, r3
 8001124:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001128:	6822      	ldr	r2, [r4, #0]
 800112a:	6993      	ldr	r3, [r2, #24]
 800112c:	f043 0310 	orr.w	r3, r3, #16
 8001130:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001132:	6820      	ldr	r0, [r4, #0]
 8001134:	f001 fa0c 	bl	8002550 <USB_ReadInterrupts>
 8001138:	0706      	lsls	r6, r0, #28
 800113a:	d507      	bpl.n	800114c <HAL_PCD_IRQHandler+0x1dc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800113c:	4620      	mov	r0, r4
 800113e:	f002 fa74 	bl	800362a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001142:	6822      	ldr	r2, [r4, #0]
 8001144:	6953      	ldr	r3, [r2, #20]
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800114c:	6820      	ldr	r0, [r4, #0]
 800114e:	f001 f9ff 	bl	8002550 <USB_ReadInterrupts>
 8001152:	02c5      	lsls	r5, r0, #11
 8001154:	d508      	bpl.n	8001168 <HAL_PCD_IRQHandler+0x1f8>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001156:	2100      	movs	r1, #0
 8001158:	4620      	mov	r0, r4
 800115a:	f002 fa9d 	bl	8003698 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800115e:	6822      	ldr	r2, [r4, #0]
 8001160:	6953      	ldr	r3, [r2, #20]
 8001162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001166:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001168:	6820      	ldr	r0, [r4, #0]
 800116a:	f001 f9f1 	bl	8002550 <USB_ReadInterrupts>
 800116e:	0280      	lsls	r0, r0, #10
 8001170:	d508      	bpl.n	8001184 <HAL_PCD_IRQHandler+0x214>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001172:	2100      	movs	r1, #0
 8001174:	4620      	mov	r0, r4
 8001176:	f002 fa8b 	bl	8003690 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800117a:	6822      	ldr	r2, [r4, #0]
 800117c:	6953      	ldr	r3, [r2, #20]
 800117e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001182:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001184:	6820      	ldr	r0, [r4, #0]
 8001186:	f001 f9e3 	bl	8002550 <USB_ReadInterrupts>
 800118a:	0041      	lsls	r1, r0, #1
 800118c:	d507      	bpl.n	800119e <HAL_PCD_IRQHandler+0x22e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800118e:	4620      	mov	r0, r4
 8001190:	f002 fa86 	bl	80036a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001194:	6822      	ldr	r2, [r4, #0]
 8001196:	6953      	ldr	r3, [r2, #20]
 8001198:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800119c:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800119e:	6820      	ldr	r0, [r4, #0]
 80011a0:	f001 f9d6 	bl	8002550 <USB_ReadInterrupts>
 80011a4:	0742      	lsls	r2, r0, #29
 80011a6:	d50a      	bpl.n	80011be <HAL_PCD_IRQHandler+0x24e>
    {
      temp = hpcd->Instance->GOTGINT;
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80011ac:	076b      	lsls	r3, r5, #29
 80011ae:	d502      	bpl.n	80011b6 <HAL_PCD_IRQHandler+0x246>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80011b0:	4620      	mov	r0, r4
 80011b2:	f002 fa79 	bl	80036a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80011b6:	6822      	ldr	r2, [r4, #0]
 80011b8:	6853      	ldr	r3, [r2, #4]
 80011ba:	432b      	orrs	r3, r5
 80011bc:	6053      	str	r3, [r2, #4]
    }
  }
}
 80011be:	b007      	add	sp, #28
 80011c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80011c4:	6820      	ldr	r0, [r4, #0]
 80011c6:	f001 f9c7 	bl	8002558 <USB_ReadDevAllOutEpInterrupt>
      epnum = 0U;
 80011ca:	2500      	movs	r5, #0
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80011cc:	4680      	mov	r8, r0
 80011ce:	f8df 9310 	ldr.w	r9, [pc, #784]	; 80014e0 <HAL_PCD_IRQHandler+0x570>
 80011d2:	f50b 6630 	add.w	r6, fp, #2816	; 0xb00
      while (ep_intr != 0U)
 80011d6:	f1b8 0f00 	cmp.w	r8, #0
 80011da:	f43f aeed 	beq.w	8000fb8 <HAL_PCD_IRQHandler+0x48>
        if ((ep_intr & 0x1U) != 0U)
 80011de:	f018 0f01 	tst.w	r8, #1
 80011e2:	f000 80b4 	beq.w	800134e <HAL_PCD_IRQHandler+0x3de>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011e6:	b2eb      	uxtb	r3, r5
 80011e8:	4619      	mov	r1, r3
 80011ea:	6820      	ldr	r0, [r4, #0]
 80011ec:	9303      	str	r3, [sp, #12]
 80011ee:	f001 f9c3 	bl	8002578 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80011f2:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011f6:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80011f8:	9b03      	ldr	r3, [sp, #12]
 80011fa:	d053      	beq.n	80012a4 <HAL_PCD_IRQHandler+0x334>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80011fc:	2101      	movs	r1, #1
 80011fe:	ea4f 1a45 	mov.w	sl, r5, lsl #5
 8001202:	eb06 020a 	add.w	r2, r6, sl
 8001206:	6091      	str	r1, [r2, #8]
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001208:	6822      	ldr	r2, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 800120a:	6921      	ldr	r1, [r4, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800120c:	6c10      	ldr	r0, [r2, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800120e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001212:	4492      	add	sl, r2
  if (hpcd->Init.dma_enable == 1U)
 8001214:	2901      	cmp	r1, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001216:	f8da 2008 	ldr.w	r2, [sl, #8]
  if (hpcd->Init.dma_enable == 1U)
 800121a:	d158      	bne.n	80012ce <HAL_PCD_IRQHandler+0x35e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800121c:	0711      	lsls	r1, r2, #28
 800121e:	d514      	bpl.n	800124a <HAL_PCD_IRQHandler+0x2da>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001220:	4548      	cmp	r0, r9
 8001222:	d905      	bls.n	8001230 <HAL_PCD_IRQHandler+0x2c0>
 8001224:	0410      	lsls	r0, r2, #16
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001226:	bf44      	itt	mi
 8001228:	f44f 4300 	movmi.w	r3, #32768	; 0x8000
 800122c:	f8ca 3008 	strmi.w	r3, [sl, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8001230:	4620      	mov	r0, r4
 8001232:	f002 f9e3 	bl	80035fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001236:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800123a:	2101      	movs	r1, #1
 800123c:	6820      	ldr	r0, [r4, #0]
 800123e:	f001 f9d5 	bl	80025ec <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001242:	2308      	movs	r3, #8
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001244:	f8ca 3008 	str.w	r3, [sl, #8]
 8001248:	e02c      	b.n	80012a4 <HAL_PCD_IRQHandler+0x334>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800124a:	0691      	lsls	r1, r2, #26
 800124c:	d501      	bpl.n	8001252 <HAL_PCD_IRQHandler+0x2e2>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800124e:	2320      	movs	r3, #32
 8001250:	e7f8      	b.n	8001244 <HAL_PCD_IRQHandler+0x2d4>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001252:	f012 0f28 	tst.w	r2, #40	; 0x28
 8001256:	d125      	bne.n	80012a4 <HAL_PCD_IRQHandler+0x334>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001258:	4548      	cmp	r0, r9
 800125a:	d904      	bls.n	8001266 <HAL_PCD_IRQHandler+0x2f6>
 800125c:	0410      	lsls	r0, r2, #16
 800125e:	d502      	bpl.n	8001266 <HAL_PCD_IRQHandler+0x2f6>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001260:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001264:	e7ee      	b.n	8001244 <HAL_PCD_IRQHandler+0x2d4>
 8001266:	221c      	movs	r2, #28
 8001268:	fb02 4205 	mla	r2, r2, r5, r4
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800126c:	f8da 1010 	ldr.w	r1, [sl, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 8001270:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001274:	f3c1 0112 	ubfx	r1, r1, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001278:	1a41      	subs	r1, r0, r1
        hpcd->OUT_ep[epnum].xfer_count =
 800127a:	f8c2 1214 	str.w	r1, [r2, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800127e:	f8d2 1208 	ldr.w	r1, [r2, #520]	; 0x208
 8001282:	4408      	add	r0, r1
 8001284:	f8c2 0208 	str.w	r0, [r2, #520]	; 0x208
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001288:	4619      	mov	r1, r3
 800128a:	4620      	mov	r0, r4
 800128c:	f002 f9bc 	bl	8003608 <HAL_PCD_DataOutStageCallback>
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001290:	b945      	cbnz	r5, 80012a4 <HAL_PCD_IRQHandler+0x334>
 8001292:	f8d4 3210 	ldr.w	r3, [r4, #528]	; 0x210
 8001296:	b92b      	cbnz	r3, 80012a4 <HAL_PCD_IRQHandler+0x334>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001298:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800129c:	2101      	movs	r1, #1
 800129e:	6820      	ldr	r0, [r4, #0]
 80012a0:	f001 f9a4 	bl	80025ec <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012a4:	0738      	lsls	r0, r7, #28
 80012a6:	d537      	bpl.n	8001318 <HAL_PCD_IRQHandler+0x3a8>
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012a8:	6823      	ldr	r3, [r4, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if (hpcd->Init.dma_enable == 1U)
 80012aa:	6920      	ldr	r0, [r4, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80012ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ae:	ea4f 1a45 	mov.w	sl, r5, lsl #5
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80012b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012b6:	4453      	add	r3, sl
  if (hpcd->Init.dma_enable == 1U)
 80012b8:	2801      	cmp	r0, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80012ba:	6899      	ldr	r1, [r3, #8]
  if (hpcd->Init.dma_enable == 1U)
 80012bc:	d116      	bne.n	80012ec <HAL_PCD_IRQHandler+0x37c>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80012be:	454a      	cmp	r2, r9
 80012c0:	d917      	bls.n	80012f2 <HAL_PCD_IRQHandler+0x382>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80012c2:	0409      	lsls	r1, r1, #16
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80012c4:	bf44      	itt	mi
 80012c6:	f44f 4100 	movmi.w	r1, #32768	; 0x8000
 80012ca:	6099      	strmi	r1, [r3, #8]
 80012cc:	e011      	b.n	80012f2 <HAL_PCD_IRQHandler+0x382>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80012ce:	4983      	ldr	r1, [pc, #524]	; (80014dc <HAL_PCD_IRQHandler+0x56c>)
 80012d0:	4288      	cmp	r0, r1
 80012d2:	d106      	bne.n	80012e2 <HAL_PCD_IRQHandler+0x372>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80012d4:	0411      	lsls	r1, r2, #16
 80012d6:	d4c3      	bmi.n	8001260 <HAL_PCD_IRQHandler+0x2f0>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012d8:	0692      	lsls	r2, r2, #26
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80012da:	bf44      	itt	mi
 80012dc:	2220      	movmi	r2, #32
 80012de:	f8ca 2008 	strmi.w	r2, [sl, #8]
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80012e2:	4619      	mov	r1, r3
 80012e4:	4620      	mov	r0, r4
 80012e6:	f002 f98f 	bl	8003608 <HAL_PCD_DataOutStageCallback>
 80012ea:	e7db      	b.n	80012a4 <HAL_PCD_IRQHandler+0x334>
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80012ec:	487b      	ldr	r0, [pc, #492]	; (80014dc <HAL_PCD_IRQHandler+0x56c>)
 80012ee:	4282      	cmp	r2, r0
 80012f0:	d0e7      	beq.n	80012c2 <HAL_PCD_IRQHandler+0x352>

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80012f2:	4620      	mov	r0, r4
 80012f4:	9203      	str	r2, [sp, #12]
 80012f6:	f002 f981 	bl	80035fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80012fa:	9a03      	ldr	r2, [sp, #12]
 80012fc:	454a      	cmp	r2, r9
 80012fe:	d907      	bls.n	8001310 <HAL_PCD_IRQHandler+0x3a0>
 8001300:	6921      	ldr	r1, [r4, #16]
 8001302:	2901      	cmp	r1, #1
 8001304:	d104      	bne.n	8001310 <HAL_PCD_IRQHandler+0x3a0>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001306:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800130a:	6820      	ldr	r0, [r4, #0]
 800130c:	f001 f96e 	bl	80025ec <USB_EP0_OutStart>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001310:	2308      	movs	r3, #8
 8001312:	44b2      	add	sl, r6
 8001314:	f8ca 3008 	str.w	r3, [sl, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001318:	06f8      	lsls	r0, r7, #27
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800131a:	bf42      	ittt	mi
 800131c:	2210      	movmi	r2, #16
 800131e:	eb06 1345 	addmi.w	r3, r6, r5, lsl #5
 8001322:	609a      	strmi	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001324:	06b9      	lsls	r1, r7, #26
 8001326:	d50b      	bpl.n	8001340 <HAL_PCD_IRQHandler+0x3d0>
            if (hpcd->Init.dma_enable == 1U)
 8001328:	6921      	ldr	r1, [r4, #16]
 800132a:	2901      	cmp	r1, #1
 800132c:	d104      	bne.n	8001338 <HAL_PCD_IRQHandler+0x3c8>
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800132e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8001332:	6820      	ldr	r0, [r4, #0]
 8001334:	f001 f95a 	bl	80025ec <USB_EP0_OutStart>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001338:	2220      	movs	r2, #32
 800133a:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 800133e:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001340:	04ba      	lsls	r2, r7, #18
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001342:	bf42      	ittt	mi
 8001344:	f44f 5200 	movmi.w	r2, #8192	; 0x2000
 8001348:	eb06 1345 	addmi.w	r3, r6, r5, lsl #5
 800134c:	609a      	strmi	r2, [r3, #8]
        epnum++;
 800134e:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8001350:	ea4f 0858 	mov.w	r8, r8, lsr #1
 8001354:	e73f      	b.n	80011d6 <HAL_PCD_IRQHandler+0x266>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001356:	f019 0f01 	tst.w	r9, #1
 800135a:	d072      	beq.n	8001442 <HAL_PCD_IRQHandler+0x4d2>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800135c:	fa5f fa86 	uxtb.w	sl, r6
 8001360:	4651      	mov	r1, sl
 8001362:	6820      	ldr	r0, [r4, #0]
 8001364:	f001 f911 	bl	800258a <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001368:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800136a:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800136c:	d524      	bpl.n	80013b8 <HAL_PCD_IRQHandler+0x448>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800136e:	2001      	movs	r0, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001370:	f8db 3834 	ldr.w	r3, [fp, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001374:	f006 020f 	and.w	r2, r6, #15
 8001378:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800137c:	ea23 0302 	bic.w	r3, r3, r2
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001380:	4602      	mov	r2, r0
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001382:	f8cb 3834 	str.w	r3, [fp, #2100]	; 0x834
 8001386:	eb08 1346 	add.w	r3, r8, r6, lsl #5
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800138a:	6098      	str	r0, [r3, #8]
            if (hpcd->Init.dma_enable == 1U)
 800138c:	6923      	ldr	r3, [r4, #16]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800138e:	4651      	mov	r1, sl
            if (hpcd->Init.dma_enable == 1U)
 8001390:	4283      	cmp	r3, r0
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001392:	bf02      	ittt	eq
 8001394:	e9d5 2311 	ldrdeq	r2, r3, [r5, #68]	; 0x44
 8001398:	189b      	addeq	r3, r3, r2
 800139a:	64ab      	streq	r3, [r5, #72]	; 0x48
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800139c:	4620      	mov	r0, r4
 800139e:	f002 f93c 	bl	800361a <HAL_PCD_DataInStageCallback>
            if (hpcd->Init.dma_enable == 1U)
 80013a2:	6921      	ldr	r1, [r4, #16]
 80013a4:	2901      	cmp	r1, #1
 80013a6:	d107      	bne.n	80013b8 <HAL_PCD_IRQHandler+0x448>
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80013a8:	b936      	cbnz	r6, 80013b8 <HAL_PCD_IRQHandler+0x448>
 80013aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80013ac:	b923      	cbnz	r3, 80013b8 <HAL_PCD_IRQHandler+0x448>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80013ae:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80013b2:	6820      	ldr	r0, [r4, #0]
 80013b4:	f001 f91a 	bl	80025ec <USB_EP0_OutStart>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80013b8:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80013ba:	bf42      	ittt	mi
 80013bc:	2208      	movmi	r2, #8
 80013be:	eb08 1346 	addmi.w	r3, r8, r6, lsl #5
 80013c2:	609a      	strmi	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80013c4:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80013c6:	bf42      	ittt	mi
 80013c8:	2210      	movmi	r2, #16
 80013ca:	eb08 1346 	addmi.w	r3, r8, r6, lsl #5
 80013ce:	609a      	strmi	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80013d0:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80013d2:	bf42      	ittt	mi
 80013d4:	2240      	movmi	r2, #64	; 0x40
 80013d6:	eb08 1346 	addmi.w	r3, r8, r6, lsl #5
 80013da:	609a      	strmi	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80013dc:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80013de:	bf42      	ittt	mi
 80013e0:	2202      	movmi	r2, #2
 80013e2:	eb08 1346 	addmi.w	r3, r8, r6, lsl #5
 80013e6:	609a      	strmi	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80013e8:	063f      	lsls	r7, r7, #24
 80013ea:	d52a      	bpl.n	8001442 <HAL_PCD_IRQHandler+0x4d2>
  if (ep->xfer_count > ep->xfer_len)
 80013ec:	e9d5 3214 	ldrd	r3, r2, [r5, #80]	; 0x50
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d826      	bhi.n	8001442 <HAL_PCD_IRQHandler+0x4d2>
  len = ep->xfer_len - ep->xfer_count;
 80013f4:	1a9b      	subs	r3, r3, r2
  len32b = (len + 3U) / 4U;
 80013f6:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80013f8:	6821      	ldr	r1, [r4, #0]
 80013fa:	4293      	cmp	r3, r2
 80013fc:	bf28      	it	cs
 80013fe:	4613      	movcs	r3, r2
 8001400:	3303      	adds	r3, #3
 8001402:	089b      	lsrs	r3, r3, #2
 8001404:	9304      	str	r3, [sp, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001406:	f501 6310 	add.w	r3, r1, #2304	; 0x900
 800140a:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 800140e:	9103      	str	r1, [sp, #12]
 8001410:	9305      	str	r3, [sp, #20]
 8001412:	9b05      	ldr	r3, [sp, #20]
 8001414:	9904      	ldr	r1, [sp, #16]
 8001416:	699a      	ldr	r2, [r3, #24]
 8001418:	e9d5 7314 	ldrd	r7, r3, [r5, #80]	; 0x50
 800141c:	b292      	uxth	r2, r2
 800141e:	428a      	cmp	r2, r1
 8001420:	d214      	bcs.n	800144c <HAL_PCD_IRQHandler+0x4dc>
  if (ep->xfer_len <= ep->xfer_count)
 8001422:	429f      	cmp	r7, r3
 8001424:	d80d      	bhi.n	8001442 <HAL_PCD_IRQHandler+0x4d2>
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001426:	2101      	movs	r1, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001428:	9b03      	ldr	r3, [sp, #12]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800142a:	f006 020f 	and.w	r2, r6, #15
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800142e:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 8001432:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001436:	fa01 f202 	lsl.w	r2, r1, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800143a:	ea23 0302 	bic.w	r3, r3, r2
 800143e:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
        epnum++;
 8001442:	3601      	adds	r6, #1
        ep_intr >>= 1U;
 8001444:	ea4f 0959 	mov.w	r9, r9, lsr #1
 8001448:	351c      	adds	r5, #28
 800144a:	e5c2      	b.n	8000fd2 <HAL_PCD_IRQHandler+0x62>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800144c:	429f      	cmp	r7, r3
 800144e:	d9ea      	bls.n	8001426 <HAL_PCD_IRQHandler+0x4b6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001450:	2f00      	cmp	r7, #0
 8001452:	d0e8      	beq.n	8001426 <HAL_PCD_IRQHandler+0x4b6>
    len = ep->xfer_len - ep->xfer_count;
 8001454:	1aff      	subs	r7, r7, r3
 8001456:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001458:	4652      	mov	r2, sl
 800145a:	429f      	cmp	r7, r3
 800145c:	bf28      	it	cs
 800145e:	461f      	movcs	r7, r3
    len32b = (len + 3U) / 4U;
 8001460:	1cfb      	adds	r3, r7, #3
 8001462:	089b      	lsrs	r3, r3, #2
 8001464:	9304      	str	r3, [sp, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001466:	7c23      	ldrb	r3, [r4, #16]
 8001468:	9803      	ldr	r0, [sp, #12]
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800146e:	b2bb      	uxth	r3, r7
 8001470:	f000 fed8 	bl	8002224 <USB_WritePacket>
    ep->xfer_buff  += len;
 8001474:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001476:	443b      	add	r3, r7
 8001478:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 800147a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800147c:	441f      	add	r7, r3
 800147e:	656f      	str	r7, [r5, #84]	; 0x54
 8001480:	e7c7      	b.n	8001412 <HAL_PCD_IRQHandler+0x4a2>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001482:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	3320      	adds	r3, #32
 8001488:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800148c:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001490:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001494:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 8001498:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800149c:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a0:	9a02      	ldr	r2, [sp, #8]
 80014a2:	3201      	adds	r2, #1
 80014a4:	9202      	str	r2, [sp, #8]
 80014a6:	e5d0      	b.n	800104a <HAL_PCD_IRQHandler+0xda>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80014a8:	696b      	ldr	r3, [r5, #20]
 80014aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014ae:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80014b2:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80014b4:	692b      	ldr	r3, [r5, #16]
 80014b6:	f043 030b 	orr.w	r3, r3, #11
 80014ba:	612b      	str	r3, [r5, #16]
 80014bc:	e5db      	b.n	8001076 <HAL_PCD_IRQHandler+0x106>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80014be:	2b06      	cmp	r3, #6
 80014c0:	f47f ae32 	bne.w	8001128 <HAL_PCD_IRQHandler+0x1b8>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80014c4:	2208      	movs	r2, #8
 80014c6:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80014ca:	4658      	mov	r0, fp
 80014cc:	f000 ff96 	bl	80023fc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014d0:	231c      	movs	r3, #28
 80014d2:	f3c5 150a 	ubfx	r5, r5, #4, #11
 80014d6:	fb03 4606 	mla	r6, r3, r6, r4
 80014da:	e620      	b.n	800111e <HAL_PCD_IRQHandler+0x1ae>
 80014dc:	4f54310a 	.word	0x4f54310a
 80014e0:	4f54300a 	.word	0x4f54300a

080014e4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80014e4:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
{
 80014e8:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80014ea:	2a01      	cmp	r2, #1
{
 80014ec:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80014ee:	d00b      	beq.n	8001508 <HAL_PCD_SetAddress+0x24>
 80014f0:	2201      	movs	r2, #1
 80014f2:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80014f6:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80014fa:	6800      	ldr	r0, [r0, #0]
 80014fc:	f001 f800 	bl	8002500 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001500:	2000      	movs	r0, #0
 8001502:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8001506:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001508:	2002      	movs	r0, #2
 800150a:	e7fc      	b.n	8001506 <HAL_PCD_SetAddress+0x22>

0800150c <HAL_PCD_EP_Open>:
{
 800150c:	b570      	push	{r4, r5, r6, lr}
 800150e:	4604      	mov	r4, r0
 8001510:	201c      	movs	r0, #28
 8001512:	f001 050f 	and.w	r5, r1, #15
 8001516:	4368      	muls	r0, r5
  if ((ep_addr & 0x80U) == 0x80U)
 8001518:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800151c:	bf14      	ite	ne
 800151e:	f100 013c 	addne.w	r1, r0, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001522:	f500 71fe 	addeq.w	r1, r0, #508	; 0x1fc
 8001526:	eb04 0600 	add.w	r6, r4, r0
    ep->is_in = 1U;
 800152a:	bf17      	itett	ne
 800152c:	2001      	movne	r0, #1
    ep->is_in = 0U;
 800152e:	2000      	moveq	r0, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001530:	1909      	addne	r1, r1, r4
    ep->is_in = 1U;
 8001532:	f886 003d 	strbne.w	r0, [r6, #61]	; 0x3d
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001536:	bf04      	itt	eq
 8001538:	1909      	addeq	r1, r1, r4
    ep->is_in = 0U;
 800153a:	f886 01fd 	strbeq.w	r0, [r6, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 800153e:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8001540:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001542:	700d      	strb	r5, [r1, #0]
  ep->type = ep_type;
 8001544:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001546:	b102      	cbz	r2, 800154a <HAL_PCD_EP_Open+0x3e>
    ep->tx_fifo_num = ep->num;
 8001548:	80cd      	strh	r5, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800154a:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 800154c:	bf04      	itt	eq
 800154e:	2300      	moveq	r3, #0
 8001550:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8001552:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8001556:	2b01      	cmp	r3, #1
 8001558:	d009      	beq.n	800156e <HAL_PCD_EP_Open+0x62>
 800155a:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800155c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800155e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001562:	f000 fdac 	bl	80020be <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001566:	2000      	movs	r0, #0
 8001568:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800156c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 800156e:	2002      	movs	r0, #2
 8001570:	e7fc      	b.n	800156c <HAL_PCD_EP_Open+0x60>

08001572 <HAL_PCD_EP_Receive>:
{
 8001572:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001574:	241c      	movs	r4, #28
 8001576:	f001 050f 	and.w	r5, r1, #15
 800157a:	436c      	muls	r4, r5
 800157c:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
  ep->xfer_buff = pBuf;
 8001580:	4404      	add	r4, r0
  ep->xfer_len = len;
 8001582:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8001586:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8001588:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 800158c:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8001590:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8001594:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8001598:	6903      	ldr	r3, [r0, #16]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800159a:	4401      	add	r1, r0
  if (hpcd->Init.dma_enable == 1U)
 800159c:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800159e:	bf08      	it	eq
 80015a0:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
 80015a4:	6800      	ldr	r0, [r0, #0]
 80015a6:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015a8:	b91d      	cbnz	r5, 80015b2 <HAL_PCD_EP_Receive+0x40>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80015aa:	f000 fdc7 	bl	800213c <USB_EP0StartXfer>
}
 80015ae:	2000      	movs	r0, #0
 80015b0:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80015b2:	f000 fe4b 	bl	800224c <USB_EPStartXfer>
 80015b6:	e7fa      	b.n	80015ae <HAL_PCD_EP_Receive+0x3c>

080015b8 <HAL_PCD_EP_Transmit>:
{
 80015b8:	b538      	push	{r3, r4, r5, lr}
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015ba:	241c      	movs	r4, #28
 80015bc:	f001 050f 	and.w	r5, r1, #15
 80015c0:	436c      	muls	r4, r5
 80015c2:	f104 013c 	add.w	r1, r4, #60	; 0x3c
  ep->xfer_buff = pBuf;
 80015c6:	4404      	add	r4, r0
  ep->xfer_len = len;
 80015c8:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 80015ce:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 80015d0:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 80015d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 80015d6:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 80015da:	6903      	ldr	r3, [r0, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015dc:	4401      	add	r1, r0
  if (hpcd->Init.dma_enable == 1U)
 80015de:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 80015e0:	bf08      	it	eq
 80015e2:	64e2      	streq	r2, [r4, #76]	; 0x4c
 80015e4:	6800      	ldr	r0, [r0, #0]
 80015e6:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015e8:	b91d      	cbnz	r5, 80015f2 <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80015ea:	f000 fda7 	bl	800213c <USB_EP0StartXfer>
}
 80015ee:	2000      	movs	r0, #0
 80015f0:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80015f2:	f000 fe2b 	bl	800224c <USB_EPStartXfer>
 80015f6:	e7fa      	b.n	80015ee <HAL_PCD_EP_Transmit+0x36>

080015f8 <HAL_PCD_EP_SetStall>:
{
 80015f8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80015fa:	6843      	ldr	r3, [r0, #4]
 80015fc:	f001 050f 	and.w	r5, r1, #15
 8001600:	429d      	cmp	r5, r3
{
 8001602:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001604:	d82c      	bhi.n	8001660 <HAL_PCD_EP_SetStall+0x68>
  if ((0x80U & ep_addr) == 0x80U)
 8001606:	f011 0f80 	tst.w	r1, #128	; 0x80
 800160a:	f04f 031c 	mov.w	r3, #28
 800160e:	d01e      	beq.n	800164e <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 8001610:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001612:	436b      	muls	r3, r5
 8001614:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 8001618:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800161a:	4401      	add	r1, r0
    ep->is_in = 1U;
 800161c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 8001620:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8001622:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8001624:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 8001626:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800162a:	429a      	cmp	r2, r3
 800162c:	d01a      	beq.n	8001664 <HAL_PCD_EP_SetStall+0x6c>
 800162e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001632:	6820      	ldr	r0, [r4, #0]
 8001634:	f000 fef0 	bl	8002418 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001638:	b92d      	cbnz	r5, 8001646 <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800163a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800163e:	7c21      	ldrb	r1, [r4, #16]
 8001640:	6820      	ldr	r0, [r4, #0]
 8001642:	f000 ffd3 	bl	80025ec <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8001646:	2000      	movs	r0, #0
 8001648:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800164c:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 800164e:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8001650:	434b      	muls	r3, r1
 8001652:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8001656:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 8001658:	4401      	add	r1, r0
    ep->is_in = 0U;
 800165a:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
 800165e:	e7df      	b.n	8001620 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8001660:	2001      	movs	r0, #1
 8001662:	e7f3      	b.n	800164c <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8001664:	2002      	movs	r0, #2
 8001666:	e7f1      	b.n	800164c <HAL_PCD_EP_SetStall+0x54>

08001668 <HAL_PCD_EP_ClrStall>:
{
 8001668:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800166a:	6843      	ldr	r3, [r0, #4]
 800166c:	f001 020f 	and.w	r2, r1, #15
 8001670:	429a      	cmp	r2, r3
{
 8001672:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001674:	d825      	bhi.n	80016c2 <HAL_PCD_EP_ClrStall+0x5a>
 8001676:	231c      	movs	r3, #28
 8001678:	4353      	muls	r3, r2
  if ((0x80U & ep_addr) == 0x80U)
 800167a:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800167e:	bf14      	ite	ne
 8001680:	f103 013c 	addne.w	r1, r3, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001684:	f503 71fe 	addeq.w	r1, r3, #508	; 0x1fc
 8001688:	4418      	add	r0, r3
  ep->is_stall = 0U;
 800168a:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 800168e:	bf15      	itete	ne
 8001690:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8001692:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001694:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001696:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8001698:	bf14      	ite	ne
 800169a:	f880 303d 	strbne.w	r3, [r0, #61]	; 0x3d
    ep->is_in = 0U;
 800169e:	f880 31fd 	strbeq.w	r3, [r0, #509]	; 0x1fd
  ep->is_stall = 0U;
 80016a2:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016a4:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80016a6:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d00b      	beq.n	80016c6 <HAL_PCD_EP_ClrStall+0x5e>
 80016ae:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80016b0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80016b2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80016b6:	f000 feda 	bl	800246e <USB_EPClearStall>
  return HAL_OK;
 80016ba:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 80016bc:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 80016c0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80016c2:	2001      	movs	r0, #1
 80016c4:	e7fc      	b.n	80016c0 <HAL_PCD_EP_ClrStall+0x58>
  __HAL_LOCK(hpcd);
 80016c6:	2002      	movs	r0, #2
 80016c8:	e7fa      	b.n	80016c0 <HAL_PCD_EP_ClrStall+0x58>

080016ca <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80016ca:	6800      	ldr	r0, [r0, #0]
{
 80016cc:	b570      	push	{r4, r5, r6, lr}
 80016ce:	0412      	lsls	r2, r2, #16
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80016d0:	6a44      	ldr	r4, [r0, #36]	; 0x24

  if (fifo == 0U)
 80016d2:	b919      	cbnz	r1, 80016dc <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80016d4:	4322      	orrs	r2, r4
 80016d6:	6282      	str	r2, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 80016d8:	2000      	movs	r0, #0
 80016da:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80016dc:	6a83      	ldr	r3, [r0, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 80016de:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80016e0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	1c5e      	adds	r6, r3, #1
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	429d      	cmp	r5, r3
 80016ec:	d805      	bhi.n	80016fa <HAL_PCDEx_SetTxFiFo+0x30>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80016ee:	313f      	adds	r1, #63	; 0x3f
 80016f0:	4322      	orrs	r2, r4
 80016f2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80016f6:	6042      	str	r2, [r0, #4]
 80016f8:	e7ee      	b.n	80016d8 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80016fa:	3340      	adds	r3, #64	; 0x40
 80016fc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8001706:	4633      	mov	r3, r6
 8001708:	e7ed      	b.n	80016e6 <HAL_PCDEx_SetTxFiFo+0x1c>

0800170a <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 800170a:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 800170c:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800170e:	6259      	str	r1, [r3, #36]	; 0x24
}
 8001710:	4770      	bx	lr
	...

08001714 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001714:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001716:	f7ff f84b 	bl	80007b0 <HAL_GetTick>
 800171a:	4605      	mov	r5, r0

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800171c:	4c36      	ldr	r4, [pc, #216]	; (80017f8 <HAL_RCC_DeInit+0xe4>)
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6023      	str	r3, [r4, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001726:	6823      	ldr	r3, [r4, #0]
 8001728:	0799      	lsls	r1, r3, #30
 800172a:	d545      	bpl.n	80017b8 <HAL_RCC_DeInit+0xa4>
      return HAL_TIMEOUT;
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 800172c:	6823      	ldr	r3, [r4, #0]
  RCC->CFGR = 0x00000000u;

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172e:	f241 3688 	movw	r6, #5000	; 0x1388
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8001732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001736:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001738:	f7ff f83a 	bl	80007b0 <HAL_GetTick>
  RCC->CFGR = 0x00000000u;
 800173c:	2300      	movs	r3, #0
  tickstart = HAL_GetTick();
 800173e:	4605      	mov	r5, r0
  RCC->CFGR = 0x00000000u;
 8001740:	60a3      	str	r3, [r4, #8]
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8001742:	4c2d      	ldr	r4, [pc, #180]	; (80017f8 <HAL_RCC_DeInit+0xe4>)
 8001744:	68a3      	ldr	r3, [r4, #8]
 8001746:	f013 0f0c 	tst.w	r3, #12
 800174a:	d13c      	bne.n	80017c6 <HAL_RCC_DeInit+0xb2>
      return HAL_TIMEOUT;
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800174c:	f7ff f830 	bl	80007b0 <HAL_GetTick>
 8001750:	4605      	mov	r5, r0

  /* Clear CR register in 3 steps: first to clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8001752:	6823      	ldr	r3, [r4, #0]
 8001754:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8001758:	6023      	str	r3, [r4, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800175a:	4c27      	ldr	r4, [pc, #156]	; (80017f8 <HAL_RCC_DeInit+0xe4>)
 800175c:	6823      	ldr	r3, [r4, #0]
 800175e:	039a      	lsls	r2, r3, #14
 8001760:	d437      	bmi.n	80017d2 <HAL_RCC_DeInit+0xbe>
      return HAL_TIMEOUT;
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001762:	f7ff f825 	bl	80007b0 <HAL_GetTick>
 8001766:	4605      	mov	r5, r0

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001768:	6823      	ldr	r3, [r4, #0]
 800176a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800176e:	6023      	str	r3, [r4, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001770:	4c21      	ldr	r4, [pc, #132]	; (80017f8 <HAL_RCC_DeInit+0xe4>)
 8001772:	6823      	ldr	r3, [r4, #0]
 8001774:	019b      	lsls	r3, r3, #6
 8001776:	d432      	bmi.n	80017de <HAL_RCC_DeInit+0xca>
      return HAL_TIMEOUT;
    }
  }

  /* Once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8001778:	4b20      	ldr	r3, [pc, #128]	; (80017fc <HAL_RCC_DeInit+0xe8>)
 800177a:	6063      	str	r3, [r4, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800177c:	f7ff f818 	bl	80007b0 <HAL_GetTick>
 8001780:	4605      	mov	r5, r0

  /* Third step is to clear PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8001782:	6823      	ldr	r3, [r4, #0]
 8001784:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001788:	6023      	str	r3, [r4, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 800178a:	4c1b      	ldr	r4, [pc, #108]	; (80017f8 <HAL_RCC_DeInit+0xe4>)
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	f013 6300 	ands.w	r3, r3, #134217728	; 0x8000000
 8001792:	d12a      	bne.n	80017ea <HAL_RCC_DeInit+0xd6>
      return HAL_TIMEOUT;
    }
  }

  /* Once PLLI2S is OFF, reset PLLI2SCFGR register to default value */
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8001794:	4a1a      	ldr	r2, [pc, #104]	; (8001800 <HAL_RCC_DeInit+0xec>)
 8001796:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84

  /* Disable all interrupts */
  RCC->CIR = 0x00000000u;
 800179a:	60e3      	str	r3, [r4, #12]

  /* Clear all flags */
  RCC->CSR = 0xFFFFFFFFu;
 800179c:	f04f 33ff 	mov.w	r3, #4294967295

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 80017a0:	4a18      	ldr	r2, [pc, #96]	; (8001804 <HAL_RCC_DeInit+0xf0>)
  RCC->CSR = 0xFFFFFFFFu;
 80017a2:	6763      	str	r3, [r4, #116]	; 0x74
  SystemCoreClock = HSI_VALUE;
 80017a4:	4b18      	ldr	r3, [pc, #96]	; (8001808 <HAL_RCC_DeInit+0xf4>)
 80017a6:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <HAL_RCC_DeInit+0xf8>)
 80017aa:	6818      	ldr	r0, [r3, #0]
 80017ac:	f7fe ffb6 	bl	800071c <HAL_InitTick>
      return HAL_TIMEOUT;
 80017b0:	3000      	adds	r0, #0
 80017b2:	bf18      	it	ne
 80017b4:	2001      	movne	r0, #1
 80017b6:	e005      	b.n	80017c4 <HAL_RCC_DeInit+0xb0>
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b8:	f7fe fffa 	bl	80007b0 <HAL_GetTick>
 80017bc:	1b40      	subs	r0, r0, r5
 80017be:	2802      	cmp	r0, #2
 80017c0:	d9b1      	bls.n	8001726 <HAL_RCC_DeInit+0x12>
      return HAL_TIMEOUT;
 80017c2:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_OK;
  }
}
 80017c4:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c6:	f7fe fff3 	bl	80007b0 <HAL_GetTick>
 80017ca:	1b40      	subs	r0, r0, r5
 80017cc:	42b0      	cmp	r0, r6
 80017ce:	d9b9      	bls.n	8001744 <HAL_RCC_DeInit+0x30>
 80017d0:	e7f7      	b.n	80017c2 <HAL_RCC_DeInit+0xae>
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d2:	f7fe ffed 	bl	80007b0 <HAL_GetTick>
 80017d6:	1b40      	subs	r0, r0, r5
 80017d8:	2864      	cmp	r0, #100	; 0x64
 80017da:	d9bf      	bls.n	800175c <HAL_RCC_DeInit+0x48>
 80017dc:	e7f1      	b.n	80017c2 <HAL_RCC_DeInit+0xae>
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017de:	f7fe ffe7 	bl	80007b0 <HAL_GetTick>
 80017e2:	1b40      	subs	r0, r0, r5
 80017e4:	2864      	cmp	r0, #100	; 0x64
 80017e6:	d9c4      	bls.n	8001772 <HAL_RCC_DeInit+0x5e>
 80017e8:	e7eb      	b.n	80017c2 <HAL_RCC_DeInit+0xae>
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80017ea:	f7fe ffe1 	bl	80007b0 <HAL_GetTick>
 80017ee:	1b40      	subs	r0, r0, r5
 80017f0:	2802      	cmp	r0, #2
 80017f2:	d9cb      	bls.n	800178c <HAL_RCC_DeInit+0x78>
 80017f4:	e7e5      	b.n	80017c2 <HAL_RCC_DeInit+0xae>
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	04003010 	.word	0x04003010
 8001800:	20003000 	.word	0x20003000
 8001804:	00f42400 	.word	0x00f42400
 8001808:	20000000 	.word	0x20000000
 800180c:	20000008 	.word	0x20000008

08001810 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001810:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001814:	4604      	mov	r4, r0
 8001816:	b908      	cbnz	r0, 800181c <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8001818:	2001      	movs	r0, #1
 800181a:	e03b      	b.n	8001894 <HAL_RCC_OscConfig+0x84>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181c:	6803      	ldr	r3, [r0, #0]
 800181e:	07dd      	lsls	r5, r3, #31
 8001820:	d410      	bmi.n	8001844 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001822:	6823      	ldr	r3, [r4, #0]
 8001824:	0798      	lsls	r0, r3, #30
 8001826:	d445      	bmi.n	80018b4 <HAL_RCC_OscConfig+0xa4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001828:	6823      	ldr	r3, [r4, #0]
 800182a:	071a      	lsls	r2, r3, #28
 800182c:	f100 8091 	bmi.w	8001952 <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001830:	6823      	ldr	r3, [r4, #0]
 8001832:	075b      	lsls	r3, r3, #29
 8001834:	f100 80af 	bmi.w	8001996 <HAL_RCC_OscConfig+0x186>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001838:	69a0      	ldr	r0, [r4, #24]
 800183a:	2800      	cmp	r0, #0
 800183c:	f040 8101 	bne.w	8001a42 <HAL_RCC_OscConfig+0x232>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001840:	2000      	movs	r0, #0
 8001842:	e027      	b.n	8001894 <HAL_RCC_OscConfig+0x84>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001844:	4baa      	ldr	r3, [pc, #680]	; (8001af0 <HAL_RCC_OscConfig+0x2e0>)
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	f002 020c 	and.w	r2, r2, #12
 800184c:	2a04      	cmp	r2, #4
 800184e:	d007      	beq.n	8001860 <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001856:	2a08      	cmp	r2, #8
 8001858:	d10a      	bne.n	8001870 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	0259      	lsls	r1, r3, #9
 800185e:	d507      	bpl.n	8001870 <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	4ba3      	ldr	r3, [pc, #652]	; (8001af0 <HAL_RCC_OscConfig+0x2e0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	039a      	lsls	r2, r3, #14
 8001866:	d5dc      	bpl.n	8001822 <HAL_RCC_OscConfig+0x12>
 8001868:	6863      	ldr	r3, [r4, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1d9      	bne.n	8001822 <HAL_RCC_OscConfig+0x12>
 800186e:	e7d3      	b.n	8001818 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001870:	4ba0      	ldr	r3, [pc, #640]	; (8001af4 <HAL_RCC_OscConfig+0x2e4>)
 8001872:	7922      	ldrb	r2, [r4, #4]
 8001874:	701a      	strb	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001876:	6863      	ldr	r3, [r4, #4]
 8001878:	b17b      	cbz	r3, 800189a <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 800187a:	f7fe ff99 	bl	80007b0 <HAL_GetTick>
 800187e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001880:	4d9b      	ldr	r5, [pc, #620]	; (8001af0 <HAL_RCC_OscConfig+0x2e0>)
 8001882:	682b      	ldr	r3, [r5, #0]
 8001884:	039b      	lsls	r3, r3, #14
 8001886:	d4cc      	bmi.n	8001822 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001888:	f7fe ff92 	bl	80007b0 <HAL_GetTick>
 800188c:	1b80      	subs	r0, r0, r6
 800188e:	2864      	cmp	r0, #100	; 0x64
 8001890:	d9f7      	bls.n	8001882 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001892:	2003      	movs	r0, #3
}
 8001894:	b002      	add	sp, #8
 8001896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 800189a:	f7fe ff89 	bl	80007b0 <HAL_GetTick>
 800189e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a0:	4d93      	ldr	r5, [pc, #588]	; (8001af0 <HAL_RCC_OscConfig+0x2e0>)
 80018a2:	682b      	ldr	r3, [r5, #0]
 80018a4:	039f      	lsls	r7, r3, #14
 80018a6:	d5bc      	bpl.n	8001822 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a8:	f7fe ff82 	bl	80007b0 <HAL_GetTick>
 80018ac:	1b80      	subs	r0, r0, r6
 80018ae:	2864      	cmp	r0, #100	; 0x64
 80018b0:	d9f7      	bls.n	80018a2 <HAL_RCC_OscConfig+0x92>
 80018b2:	e7ee      	b.n	8001892 <HAL_RCC_OscConfig+0x82>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018b4:	4b8e      	ldr	r3, [pc, #568]	; (8001af0 <HAL_RCC_OscConfig+0x2e0>)
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	f012 0f0c 	tst.w	r2, #12
 80018bc:	d007      	beq.n	80018ce <HAL_RCC_OscConfig+0xbe>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018c4:	2a08      	cmp	r2, #8
 80018c6:	d116      	bne.n	80018f6 <HAL_RCC_OscConfig+0xe6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	025e      	lsls	r6, r3, #9
 80018cc:	d413      	bmi.n	80018f6 <HAL_RCC_OscConfig+0xe6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ce:	4b88      	ldr	r3, [pc, #544]	; (8001af0 <HAL_RCC_OscConfig+0x2e0>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	0795      	lsls	r5, r2, #30
 80018d4:	d502      	bpl.n	80018dc <HAL_RCC_OscConfig+0xcc>
 80018d6:	68e2      	ldr	r2, [r4, #12]
 80018d8:	2a01      	cmp	r2, #1
 80018da:	d19d      	bne.n	8001818 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	22f8      	movs	r2, #248	; 0xf8
 80018e0:	fa92 f2a2 	rbit	r2, r2
 80018e4:	fab2 f182 	clz	r1, r2
 80018e8:	6922      	ldr	r2, [r4, #16]
 80018ea:	408a      	lsls	r2, r1
 80018ec:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 80018f0:	430a      	orrs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018f4:	e798      	b.n	8001828 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018f6:	68e2      	ldr	r2, [r4, #12]
 80018f8:	4b7f      	ldr	r3, [pc, #508]	; (8001af8 <HAL_RCC_OscConfig+0x2e8>)
 80018fa:	b1da      	cbz	r2, 8001934 <HAL_RCC_OscConfig+0x124>
        __HAL_RCC_HSI_ENABLE();
 80018fc:	2201      	movs	r2, #1
 80018fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001900:	f7fe ff56 	bl	80007b0 <HAL_GetTick>
 8001904:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001906:	4d7a      	ldr	r5, [pc, #488]	; (8001af0 <HAL_RCC_OscConfig+0x2e0>)
 8001908:	682b      	ldr	r3, [r5, #0]
 800190a:	0798      	lsls	r0, r3, #30
 800190c:	d50c      	bpl.n	8001928 <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190e:	6829      	ldr	r1, [r5, #0]
 8001910:	23f8      	movs	r3, #248	; 0xf8
 8001912:	fa93 f3a3 	rbit	r3, r3
 8001916:	fab3 f283 	clz	r2, r3
 800191a:	6923      	ldr	r3, [r4, #16]
 800191c:	4093      	lsls	r3, r2
 800191e:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001922:	4313      	orrs	r3, r2
 8001924:	602b      	str	r3, [r5, #0]
 8001926:	e77f      	b.n	8001828 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001928:	f7fe ff42 	bl	80007b0 <HAL_GetTick>
 800192c:	1b80      	subs	r0, r0, r6
 800192e:	2802      	cmp	r0, #2
 8001930:	d9ea      	bls.n	8001908 <HAL_RCC_OscConfig+0xf8>
 8001932:	e7ae      	b.n	8001892 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8001934:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001936:	f7fe ff3b 	bl	80007b0 <HAL_GetTick>
 800193a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193c:	4d6c      	ldr	r5, [pc, #432]	; (8001af0 <HAL_RCC_OscConfig+0x2e0>)
 800193e:	682b      	ldr	r3, [r5, #0]
 8001940:	0799      	lsls	r1, r3, #30
 8001942:	f57f af71 	bpl.w	8001828 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001946:	f7fe ff33 	bl	80007b0 <HAL_GetTick>
 800194a:	1b80      	subs	r0, r0, r6
 800194c:	2802      	cmp	r0, #2
 800194e:	d9f6      	bls.n	800193e <HAL_RCC_OscConfig+0x12e>
 8001950:	e79f      	b.n	8001892 <HAL_RCC_OscConfig+0x82>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001952:	6962      	ldr	r2, [r4, #20]
 8001954:	4b69      	ldr	r3, [pc, #420]	; (8001afc <HAL_RCC_OscConfig+0x2ec>)
 8001956:	b17a      	cbz	r2, 8001978 <HAL_RCC_OscConfig+0x168>
      __HAL_RCC_LSI_ENABLE();
 8001958:	2201      	movs	r2, #1
 800195a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800195c:	f7fe ff28 	bl	80007b0 <HAL_GetTick>
 8001960:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001962:	4d63      	ldr	r5, [pc, #396]	; (8001af0 <HAL_RCC_OscConfig+0x2e0>)
 8001964:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001966:	079f      	lsls	r7, r3, #30
 8001968:	f53f af62 	bmi.w	8001830 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800196c:	f7fe ff20 	bl	80007b0 <HAL_GetTick>
 8001970:	1b80      	subs	r0, r0, r6
 8001972:	2802      	cmp	r0, #2
 8001974:	d9f6      	bls.n	8001964 <HAL_RCC_OscConfig+0x154>
 8001976:	e78c      	b.n	8001892 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8001978:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800197a:	f7fe ff19 	bl	80007b0 <HAL_GetTick>
 800197e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001980:	4d5b      	ldr	r5, [pc, #364]	; (8001af0 <HAL_RCC_OscConfig+0x2e0>)
 8001982:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001984:	0798      	lsls	r0, r3, #30
 8001986:	f57f af53 	bpl.w	8001830 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800198a:	f7fe ff11 	bl	80007b0 <HAL_GetTick>
 800198e:	1b80      	subs	r0, r0, r6
 8001990:	2802      	cmp	r0, #2
 8001992:	d9f6      	bls.n	8001982 <HAL_RCC_OscConfig+0x172>
 8001994:	e77d      	b.n	8001892 <HAL_RCC_OscConfig+0x82>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001996:	4b56      	ldr	r3, [pc, #344]	; (8001af0 <HAL_RCC_OscConfig+0x2e0>)
 8001998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800199a:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800199e:	d126      	bne.n	80019ee <HAL_RCC_OscConfig+0x1de>
      pwrclkchanged = SET;
 80019a0:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	9201      	str	r2, [sp, #4]
 80019a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019a6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019aa:	641a      	str	r2, [r3, #64]	; 0x40
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80019b6:	4d52      	ldr	r5, [pc, #328]	; (8001b00 <HAL_RCC_OscConfig+0x2f0>)
 80019b8:	682b      	ldr	r3, [r5, #0]
 80019ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019be:	602b      	str	r3, [r5, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c0:	682b      	ldr	r3, [r5, #0]
 80019c2:	05d9      	lsls	r1, r3, #23
 80019c4:	d515      	bpl.n	80019f2 <HAL_RCC_OscConfig+0x1e2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c6:	4b4f      	ldr	r3, [pc, #316]	; (8001b04 <HAL_RCC_OscConfig+0x2f4>)
 80019c8:	7a22      	ldrb	r2, [r4, #8]
 80019ca:	701a      	strb	r2, [r3, #0]
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019cc:	68a3      	ldr	r3, [r4, #8]
 80019ce:	bb03      	cbnz	r3, 8001a12 <HAL_RCC_OscConfig+0x202>
      tickstart = HAL_GetTick();
 80019d0:	f7fe feee 	bl	80007b0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80019d8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019da:	4d45      	ldr	r5, [pc, #276]	; (8001af0 <HAL_RCC_OscConfig+0x2e0>)
 80019dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019de:	0798      	lsls	r0, r3, #30
 80019e0:	d520      	bpl.n	8001a24 <HAL_RCC_OscConfig+0x214>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e2:	f7fe fee5 	bl	80007b0 <HAL_GetTick>
 80019e6:	1bc0      	subs	r0, r0, r7
 80019e8:	4540      	cmp	r0, r8
 80019ea:	d9f7      	bls.n	80019dc <HAL_RCC_OscConfig+0x1cc>
 80019ec:	e751      	b.n	8001892 <HAL_RCC_OscConfig+0x82>
    FlagStatus       pwrclkchanged = RESET;
 80019ee:	2600      	movs	r6, #0
 80019f0:	e7e1      	b.n	80019b6 <HAL_RCC_OscConfig+0x1a6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019f2:	682b      	ldr	r3, [r5, #0]
 80019f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80019fa:	f7fe fed9 	bl	80007b0 <HAL_GetTick>
 80019fe:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	682b      	ldr	r3, [r5, #0]
 8001a02:	05da      	lsls	r2, r3, #23
 8001a04:	d4df      	bmi.n	80019c6 <HAL_RCC_OscConfig+0x1b6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a06:	f7fe fed3 	bl	80007b0 <HAL_GetTick>
 8001a0a:	1bc0      	subs	r0, r0, r7
 8001a0c:	2802      	cmp	r0, #2
 8001a0e:	d9f7      	bls.n	8001a00 <HAL_RCC_OscConfig+0x1f0>
 8001a10:	e73f      	b.n	8001892 <HAL_RCC_OscConfig+0x82>
      tickstart = HAL_GetTick();
 8001a12:	f7fe fecd 	bl	80007b0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a16:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a1a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a1c:	4d34      	ldr	r5, [pc, #208]	; (8001af0 <HAL_RCC_OscConfig+0x2e0>)
 8001a1e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a20:	079b      	lsls	r3, r3, #30
 8001a22:	d508      	bpl.n	8001a36 <HAL_RCC_OscConfig+0x226>
    if(pwrclkchanged == SET)
 8001a24:	2e00      	cmp	r6, #0
 8001a26:	f43f af07 	beq.w	8001838 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a2a:	4a31      	ldr	r2, [pc, #196]	; (8001af0 <HAL_RCC_OscConfig+0x2e0>)
 8001a2c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a32:	6413      	str	r3, [r2, #64]	; 0x40
 8001a34:	e700      	b.n	8001838 <HAL_RCC_OscConfig+0x28>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a36:	f7fe febb 	bl	80007b0 <HAL_GetTick>
 8001a3a:	1bc0      	subs	r0, r0, r7
 8001a3c:	4540      	cmp	r0, r8
 8001a3e:	d9ee      	bls.n	8001a1e <HAL_RCC_OscConfig+0x20e>
 8001a40:	e727      	b.n	8001892 <HAL_RCC_OscConfig+0x82>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a42:	4d2b      	ldr	r5, [pc, #172]	; (8001af0 <HAL_RCC_OscConfig+0x2e0>)
 8001a44:	68ab      	ldr	r3, [r5, #8]
 8001a46:	f003 030c 	and.w	r3, r3, #12
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	d05e      	beq.n	8001b0c <HAL_RCC_OscConfig+0x2fc>
 8001a4e:	2300      	movs	r3, #0
 8001a50:	4e2d      	ldr	r6, [pc, #180]	; (8001b08 <HAL_RCC_OscConfig+0x2f8>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a52:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001a54:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a56:	d13e      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x2c6>
        tickstart = HAL_GetTick();
 8001a58:	f7fe feaa 	bl	80007b0 <HAL_GetTick>
 8001a5c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5e:	682b      	ldr	r3, [r5, #0]
 8001a60:	0199      	lsls	r1, r3, #6
 8001a62:	d432      	bmi.n	8001aca <HAL_RCC_OscConfig+0x2ba>
 8001a64:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8001a68:	fa97 f7a7 	rbit	r7, r7
 8001a6c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                              | \
 8001a70:	fab7 f787 	clz	r7, r7
 8001a74:	fa92 f2a2 	rbit	r2, r2
 8001a78:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001a7c:	fab2 f082 	clz	r0, r2
 8001a80:	fa91 f1a1 	rbit	r1, r1
 8001a84:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001a88:	fab1 f181 	clz	r1, r1
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a90:	fa02 f707 	lsl.w	r7, r2, r7
 8001a94:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a96:	433b      	orrs	r3, r7
 8001a98:	0852      	lsrs	r2, r2, #1
 8001a9a:	3a01      	subs	r2, #1
 8001a9c:	4082      	lsls	r2, r0
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa2:	4c13      	ldr	r4, [pc, #76]	; (8001af0 <HAL_RCC_OscConfig+0x2e0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                              | \
 8001aa4:	fa02 f101 	lsl.w	r1, r2, r1
 8001aa8:	430b      	orrs	r3, r1
 8001aaa:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001aac:	2301      	movs	r3, #1
 8001aae:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001ab0:	f7fe fe7e 	bl	80007b0 <HAL_GetTick>
 8001ab4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab6:	6823      	ldr	r3, [r4, #0]
 8001ab8:	019a      	lsls	r2, r3, #6
 8001aba:	f53f aec1 	bmi.w	8001840 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001abe:	f7fe fe77 	bl	80007b0 <HAL_GetTick>
 8001ac2:	1b40      	subs	r0, r0, r5
 8001ac4:	2864      	cmp	r0, #100	; 0x64
 8001ac6:	d9f6      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x2a6>
 8001ac8:	e6e3      	b.n	8001892 <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aca:	f7fe fe71 	bl	80007b0 <HAL_GetTick>
 8001ace:	1bc0      	subs	r0, r0, r7
 8001ad0:	2864      	cmp	r0, #100	; 0x64
 8001ad2:	d9c4      	bls.n	8001a5e <HAL_RCC_OscConfig+0x24e>
 8001ad4:	e6dd      	b.n	8001892 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001ad6:	f7fe fe6b 	bl	80007b0 <HAL_GetTick>
 8001ada:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001adc:	682b      	ldr	r3, [r5, #0]
 8001ade:	019b      	lsls	r3, r3, #6
 8001ae0:	f57f aeae 	bpl.w	8001840 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7fe fe64 	bl	80007b0 <HAL_GetTick>
 8001ae8:	1b00      	subs	r0, r0, r4
 8001aea:	2864      	cmp	r0, #100	; 0x64
 8001aec:	d9f6      	bls.n	8001adc <HAL_RCC_OscConfig+0x2cc>
 8001aee:	e6d0      	b.n	8001892 <HAL_RCC_OscConfig+0x82>
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40023802 	.word	0x40023802
 8001af8:	42470000 	.word	0x42470000
 8001afc:	42470e80 	.word	0x42470e80
 8001b00:	40007000 	.word	0x40007000
 8001b04:	40023870 	.word	0x40023870
 8001b08:	42470060 	.word	0x42470060
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b0c:	2801      	cmp	r0, #1
 8001b0e:	f43f aec1 	beq.w	8001894 <HAL_RCC_OscConfig+0x84>
        uint32_t pllcfgr = RCC->PLLCFGR;
 8001b12:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b14:	69e3      	ldr	r3, [r4, #28]
 8001b16:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	f47f ae7c 	bne.w	8001818 <HAL_RCC_OscConfig+0x8>
 8001b20:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b22:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b26:	4293      	cmp	r3, r2
 8001b28:	f47f ae76 	bne.w	8001818 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b2e:	f3c0 1388 	ubfx	r3, r0, #6, #9
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b32:	4293      	cmp	r3, r2
 8001b34:	f47f ae70 	bne.w	8001818 <HAL_RCC_OscConfig+0x8>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b3a:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	f47f ae6a 	bne.w	8001818 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001b44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001b46:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8001b4a:	1ac0      	subs	r0, r0, r3
 8001b4c:	bf18      	it	ne
 8001b4e:	2001      	movne	r0, #1
 8001b50:	e6a0      	b.n	8001894 <HAL_RCC_OscConfig+0x84>
 8001b52:	bf00      	nop

08001b54 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b54:	4913      	ldr	r1, [pc, #76]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001b56:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b58:	688b      	ldr	r3, [r1, #8]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d003      	beq.n	8001b6a <HAL_RCC_GetSysClockFreq+0x16>
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d003      	beq.n	8001b6e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b66:	4810      	ldr	r0, [pc, #64]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x54>)
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8001b68:	e000      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0x18>
      sysclockfreq = HSE_VALUE;
 8001b6a:	4810      	ldr	r0, [pc, #64]	; (8001bac <HAL_RCC_GetSysClockFreq+0x58>)
}
 8001b6c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b6e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b70:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b72:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b74:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b78:	bf14      	ite	ne
 8001b7a:	480c      	ldrne	r0, [pc, #48]	; (8001bac <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b7c:	480a      	ldreq	r0, [pc, #40]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b7e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001b82:	bf18      	it	ne
 8001b84:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b86:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8a:	fba1 0100 	umull	r0, r1, r1, r0
 8001b8e:	f7fe fb19 	bl	80001c4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b92:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x50>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001b9e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ba2:	e7e3      	b.n	8001b6c <HAL_RCC_GetSysClockFreq+0x18>
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	00f42400 	.word	0x00f42400
 8001bac:	017d7840 	.word	0x017d7840

08001bb0 <HAL_RCC_ClockConfig>:
{
 8001bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bb4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001bb6:	4604      	mov	r4, r0
 8001bb8:	b910      	cbnz	r0, 8001bc0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001bba:	2001      	movs	r0, #1
}
 8001bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b45      	ldr	r3, [pc, #276]	; (8001cd8 <HAL_RCC_ClockConfig+0x128>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	f002 020f 	and.w	r2, r2, #15
 8001bc8:	428a      	cmp	r2, r1
 8001bca:	d32e      	bcc.n	8001c2a <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bcc:	6821      	ldr	r1, [r4, #0]
 8001bce:	078f      	lsls	r7, r1, #30
 8001bd0:	d433      	bmi.n	8001c3a <HAL_RCC_ClockConfig+0x8a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bd2:	07c8      	lsls	r0, r1, #31
 8001bd4:	d446      	bmi.n	8001c64 <HAL_RCC_ClockConfig+0xb4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd6:	4b40      	ldr	r3, [pc, #256]	; (8001cd8 <HAL_RCC_ClockConfig+0x128>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	f002 020f 	and.w	r2, r2, #15
 8001bde:	42aa      	cmp	r2, r5
 8001be0:	d869      	bhi.n	8001cb6 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be2:	6822      	ldr	r2, [r4, #0]
 8001be4:	0751      	lsls	r1, r2, #29
 8001be6:	d46f      	bmi.n	8001cc8 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be8:	0713      	lsls	r3, r2, #28
 8001bea:	d507      	bpl.n	8001bfc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bec:	4a3b      	ldr	r2, [pc, #236]	; (8001cdc <HAL_RCC_ClockConfig+0x12c>)
 8001bee:	6921      	ldr	r1, [r4, #16]
 8001bf0:	6893      	ldr	r3, [r2, #8]
 8001bf2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001bf6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001bfa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001bfc:	f7ff ffaa 	bl	8001b54 <HAL_RCC_GetSysClockFreq>
 8001c00:	4b36      	ldr	r3, [pc, #216]	; (8001cdc <HAL_RCC_ClockConfig+0x12c>)
 8001c02:	22f0      	movs	r2, #240	; 0xf0
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	fa92 f2a2 	rbit	r2, r2
 8001c0a:	fab2 f282 	clz	r2, r2
 8001c0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c12:	40d3      	lsrs	r3, r2
 8001c14:	4a32      	ldr	r2, [pc, #200]	; (8001ce0 <HAL_RCC_ClockConfig+0x130>)
 8001c16:	5cd3      	ldrb	r3, [r2, r3]
 8001c18:	40d8      	lsrs	r0, r3
 8001c1a:	4b32      	ldr	r3, [pc, #200]	; (8001ce4 <HAL_RCC_ClockConfig+0x134>)
 8001c1c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001c1e:	4b32      	ldr	r3, [pc, #200]	; (8001ce8 <HAL_RCC_ClockConfig+0x138>)
 8001c20:	6818      	ldr	r0, [r3, #0]
 8001c22:	f7fe fd7b 	bl	800071c <HAL_InitTick>
  return HAL_OK;
 8001c26:	2000      	movs	r0, #0
 8001c28:	e7c8      	b.n	8001bbc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2a:	b2ca      	uxtb	r2, r1
 8001c2c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 030f 	and.w	r3, r3, #15
 8001c34:	428b      	cmp	r3, r1
 8001c36:	d1c0      	bne.n	8001bba <HAL_RCC_ClockConfig+0xa>
 8001c38:	e7c8      	b.n	8001bcc <HAL_RCC_ClockConfig+0x1c>
 8001c3a:	4b28      	ldr	r3, [pc, #160]	; (8001cdc <HAL_RCC_ClockConfig+0x12c>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c40:	bf1e      	ittt	ne
 8001c42:	689a      	ldrne	r2, [r3, #8]
 8001c44:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001c48:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8001c4c:	bf42      	ittt	mi
 8001c4e:	689a      	ldrmi	r2, [r3, #8]
 8001c50:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001c54:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	68a0      	ldr	r0, [r4, #8]
 8001c5a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001c5e:	4302      	orrs	r2, r0
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	e7b6      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c64:	6861      	ldr	r1, [r4, #4]
 8001c66:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <HAL_RCC_ClockConfig+0x12c>)
 8001c68:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6a:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c6c:	d11b      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xf6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c72:	d0a2      	beq.n	8001bba <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c74:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c76:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c7a:	f022 0203 	bic.w	r2, r2, #3
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001c82:	f7fe fd95 	bl	80007b0 <HAL_GetTick>
 8001c86:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c88:	4e14      	ldr	r6, [pc, #80]	; (8001cdc <HAL_RCC_ClockConfig+0x12c>)
 8001c8a:	68b3      	ldr	r3, [r6, #8]
 8001c8c:	6862      	ldr	r2, [r4, #4]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c96:	d09e      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c98:	f7fe fd8a 	bl	80007b0 <HAL_GetTick>
 8001c9c:	1bc0      	subs	r0, r0, r7
 8001c9e:	4540      	cmp	r0, r8
 8001ca0:	d9f3      	bls.n	8001c8a <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8001ca2:	2003      	movs	r0, #3
 8001ca4:	e78a      	b.n	8001bbc <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca6:	2902      	cmp	r1, #2
 8001ca8:	d102      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0x100>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001caa:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001cae:	e7e0      	b.n	8001c72 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb0:	f012 0f02 	tst.w	r2, #2
 8001cb4:	e7dd      	b.n	8001c72 <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	b2ea      	uxtb	r2, r5
 8001cb8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 030f 	and.w	r3, r3, #15
 8001cc0:	42ab      	cmp	r3, r5
 8001cc2:	f47f af7a 	bne.w	8001bba <HAL_RCC_ClockConfig+0xa>
 8001cc6:	e78c      	b.n	8001be2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc8:	4904      	ldr	r1, [pc, #16]	; (8001cdc <HAL_RCC_ClockConfig+0x12c>)
 8001cca:	68e0      	ldr	r0, [r4, #12]
 8001ccc:	688b      	ldr	r3, [r1, #8]
 8001cce:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001cd2:	4303      	orrs	r3, r0
 8001cd4:	608b      	str	r3, [r1, #8]
 8001cd6:	e787      	b.n	8001be8 <HAL_RCC_ClockConfig+0x38>
 8001cd8:	40023c00 	.word	0x40023c00
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	08003a20 	.word	0x08003a20
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	20000008 	.word	0x20000008

08001cec <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001cec:	4b01      	ldr	r3, [pc, #4]	; (8001cf4 <HAL_RCC_GetHCLKFreq+0x8>)
 8001cee:	6818      	ldr	r0, [r3, #0]
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000000 	.word	0x20000000

08001cf8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	d00f      	beq.n	8001d1e <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8001cfe:	6902      	ldr	r2, [r0, #16]
 8001d00:	2a00      	cmp	r2, #0
 8001d02:	dafa      	bge.n	8001cfa <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001d04:	6903      	ldr	r3, [r0, #16]
 8001d06:	4a07      	ldr	r2, [pc, #28]	; (8001d24 <USB_CoreReset+0x2c>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8001d0e:	3a01      	subs	r2, #1
 8001d10:	d005      	beq.n	8001d1e <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001d12:	6903      	ldr	r3, [r0, #16]
 8001d14:	f013 0301 	ands.w	r3, r3, #1
 8001d18:	d1f9      	bne.n	8001d0e <USB_CoreReset+0x16>

  return HAL_OK;
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001d1e:	2003      	movs	r0, #3
}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	00030d41 	.word	0x00030d41

08001d28 <USB_CoreInit>:
{
 8001d28:	b084      	sub	sp, #16
 8001d2a:	b538      	push	{r3, r4, r5, lr}
 8001d2c:	ad05      	add	r5, sp, #20
 8001d2e:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
 8001d34:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d125      	bne.n	8001d86 <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001d3a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d40:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8001d42:	68c3      	ldr	r3, [r0, #12]
 8001d44:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d4c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8001d4e:	68c3      	ldr	r3, [r0, #12]
 8001d50:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001d54:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8001d56:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001d58:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001d5a:	bf02      	ittt	eq
 8001d5c:	68c3      	ldreq	r3, [r0, #12]
 8001d5e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8001d62:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8001d64:	f7ff ffc8 	bl	8001cf8 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8001d68:	9b08      	ldr	r3, [sp, #32]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d107      	bne.n	8001d7e <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8001d6e:	68a3      	ldr	r3, [r4, #8]
 8001d70:	f043 0306 	orr.w	r3, r3, #6
 8001d74:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001d76:	68a3      	ldr	r3, [r4, #8]
 8001d78:	f043 0320 	orr.w	r3, r3, #32
 8001d7c:	60a3      	str	r3, [r4, #8]
}
 8001d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d82:	b004      	add	sp, #16
 8001d84:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8001d86:	68c3      	ldr	r3, [r0, #12]
 8001d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d8c:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8001d8e:	f7ff ffb3 	bl	8001cf8 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d98:	63a3      	str	r3, [r4, #56]	; 0x38
 8001d9a:	e7e5      	b.n	8001d68 <USB_CoreInit+0x40>

08001d9c <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8001d9c:	2a02      	cmp	r2, #2
 8001d9e:	d158      	bne.n	8001e52 <USB_SetTurnaroundTime+0xb6>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8001da0:	4b2e      	ldr	r3, [pc, #184]	; (8001e5c <USB_SetTurnaroundTime+0xc0>)
 8001da2:	4a2f      	ldr	r2, [pc, #188]	; (8001e60 <USB_SetTurnaroundTime+0xc4>)
 8001da4:	440b      	add	r3, r1
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d947      	bls.n	8001e3a <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8001daa:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <USB_SetTurnaroundTime+0xc8>)
 8001dac:	4a2e      	ldr	r2, [pc, #184]	; (8001e68 <USB_SetTurnaroundTime+0xcc>)
 8001dae:	440b      	add	r3, r1
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d944      	bls.n	8001e3e <USB_SetTurnaroundTime+0xa2>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8001db4:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 8001db8:	4a2c      	ldr	r2, [pc, #176]	; (8001e6c <USB_SetTurnaroundTime+0xd0>)
 8001dba:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d93f      	bls.n	8001e42 <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8001dc2:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 8001dc6:	f502 32c3 	add.w	r2, r2, #99840	; 0x18600
 8001dca:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8001dce:	32a0      	adds	r2, #160	; 0xa0
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d938      	bls.n	8001e46 <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8001dd4:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <USB_SetTurnaroundTime+0xd4>)
 8001dd6:	4a27      	ldr	r2, [pc, #156]	; (8001e74 <USB_SetTurnaroundTime+0xd8>)
 8001dd8:	440b      	add	r3, r1
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d935      	bls.n	8001e4a <USB_SetTurnaroundTime+0xae>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8001dde:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <USB_SetTurnaroundTime+0xdc>)
 8001de0:	f502 2292 	add.w	r2, r2, #299008	; 0x49000
 8001de4:	440b      	add	r3, r1
 8001de6:	f502 7278 	add.w	r2, r2, #992	; 0x3e0
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d92f      	bls.n	8001e4e <USB_SetTurnaroundTime+0xb2>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8001dee:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <USB_SetTurnaroundTime+0xe0>)
 8001df0:	f502 22c3 	add.w	r2, r2, #399360	; 0x61800
 8001df4:	440b      	add	r3, r1
 8001df6:	f502 7220 	add.w	r2, r2, #640	; 0x280
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d929      	bls.n	8001e52 <USB_SetTurnaroundTime+0xb6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8001dfe:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 8001e02:	f502 12b7 	add.w	r2, r2, #1499136	; 0x16e000
 8001e06:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 8001e0a:	f502 7258 	add.w	r2, r2, #864	; 0x360
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d921      	bls.n	8001e56 <USB_SetTurnaroundTime+0xba>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8001e12:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <USB_SetTurnaroundTime+0xe4>)
      UsbTrd = 0x6U;
 8001e14:	f502 2212 	add.w	r2, r2, #598016	; 0x92000
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8001e18:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 8001e1a:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	bf94      	ite	ls
 8001e22:	2307      	movls	r3, #7
 8001e24:	2306      	movhi	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8001e26:	68c2      	ldr	r2, [r0, #12]
 8001e28:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 8001e2c:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8001e2e:	68c2      	ldr	r2, [r0, #12]
 8001e30:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 8001e34:	60c3      	str	r3, [r0, #12]
}
 8001e36:	2000      	movs	r0, #0
 8001e38:	4770      	bx	lr
      UsbTrd = 0xFU;
 8001e3a:	230f      	movs	r3, #15
 8001e3c:	e7f3      	b.n	8001e26 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xEU;
 8001e3e:	230e      	movs	r3, #14
 8001e40:	e7f1      	b.n	8001e26 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xDU;
 8001e42:	230d      	movs	r3, #13
 8001e44:	e7ef      	b.n	8001e26 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xCU;
 8001e46:	230c      	movs	r3, #12
 8001e48:	e7ed      	b.n	8001e26 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xBU;
 8001e4a:	230b      	movs	r3, #11
 8001e4c:	e7eb      	b.n	8001e26 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0xAU;
 8001e4e:	230a      	movs	r3, #10
 8001e50:	e7e9      	b.n	8001e26 <USB_SetTurnaroundTime+0x8a>
    UsbTrd = USBD_HS_TRDT_VALUE;
 8001e52:	2309      	movs	r3, #9
 8001e54:	e7e7      	b.n	8001e26 <USB_SetTurnaroundTime+0x8a>
      UsbTrd = 0x8U;
 8001e56:	2308      	movs	r3, #8
 8001e58:	e7e5      	b.n	8001e26 <USB_SetTurnaroundTime+0x8a>
 8001e5a:	bf00      	nop
 8001e5c:	ff275340 	.word	0xff275340
 8001e60:	000c34ff 	.word	0x000c34ff
 8001e64:	ff1b1e40 	.word	0xff1b1e40
 8001e68:	000f423f 	.word	0x000f423f
 8001e6c:	00124f7f 	.word	0x00124f7f
 8001e70:	fee5b660 	.word	0xfee5b660
 8001e74:	0016e35f 	.word	0x0016e35f
 8001e78:	feced300 	.word	0xfeced300
 8001e7c:	feb35bc0 	.word	0xfeb35bc0
 8001e80:	fe5954e0 	.word	0xfe5954e0

08001e84 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8001e84:	6883      	ldr	r3, [r0, #8]
 8001e86:	f043 0301 	orr.w	r3, r3, #1
 8001e8a:	6083      	str	r3, [r0, #8]
}
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	4770      	bx	lr

08001e90 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8001e90:	6883      	ldr	r3, [r0, #8]
 8001e92:	f023 0301 	bic.w	r3, r3, #1
 8001e96:	6083      	str	r3, [r0, #8]
}
 8001e98:	2000      	movs	r0, #0
 8001e9a:	4770      	bx	lr

08001e9c <USB_SetCurrentMode>:
{
 8001e9c:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001e9e:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001ea0:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8001ea2:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8001ea6:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8001ea8:	d108      	bne.n	8001ebc <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8001eaa:	68c3      	ldr	r3, [r0, #12]
 8001eac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001eb0:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8001eb2:	2032      	movs	r0, #50	; 0x32
 8001eb4:	f7fe fc82 	bl	80007bc <HAL_Delay>
  return HAL_OK;
 8001eb8:	2000      	movs	r0, #0
}
 8001eba:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8001ebc:	b919      	cbnz	r1, 8001ec6 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8001ebe:	68c3      	ldr	r3, [r0, #12]
 8001ec0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ec4:	e7f4      	b.n	8001eb0 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	e7f7      	b.n	8001eba <USB_SetCurrentMode+0x1e>
	...

08001ecc <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8001ecc:	0189      	lsls	r1, r1, #6
 8001ece:	f041 0120 	orr.w	r1, r1, #32
 8001ed2:	4a06      	ldr	r2, [pc, #24]	; (8001eec <USB_FlushTxFifo+0x20>)
 8001ed4:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8001ed6:	3a01      	subs	r2, #1
 8001ed8:	d005      	beq.n	8001ee6 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001eda:	6903      	ldr	r3, [r0, #16]
 8001edc:	f013 0320 	ands.w	r3, r3, #32
 8001ee0:	d1f9      	bne.n	8001ed6 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001ee6:	2003      	movs	r0, #3
}
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	00030d41 	.word	0x00030d41

08001ef0 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001ef0:	2310      	movs	r3, #16
 8001ef2:	4a06      	ldr	r2, [pc, #24]	; (8001f0c <USB_FlushRxFifo+0x1c>)
 8001ef4:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8001ef6:	3a01      	subs	r2, #1
 8001ef8:	d005      	beq.n	8001f06 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001efa:	6903      	ldr	r3, [r0, #16]
 8001efc:	f013 0310 	ands.w	r3, r3, #16
 8001f00:	d1f9      	bne.n	8001ef6 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8001f02:	4618      	mov	r0, r3
 8001f04:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001f06:	2003      	movs	r0, #3
}
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	00030d41 	.word	0x00030d41

08001f10 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8001f10:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8001f14:	4319      	orrs	r1, r3
 8001f16:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	4770      	bx	lr
	...

08001f20 <USB_DevInit>:
{
 8001f20:	b084      	sub	sp, #16
 8001f22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f26:	4604      	mov	r4, r0
 8001f28:	a809      	add	r0, sp, #36	; 0x24
 8001f2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8001f2e:	2300      	movs	r3, #0
 8001f30:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 8001f32:	4619      	mov	r1, r3
 8001f34:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8001f36:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8001f38:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 8001f3c:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 8001f3e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8001f42:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8001f44:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8001f46:	d1f7      	bne.n	8001f38 <USB_DevInit+0x18>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001f48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8001f4a:	2e00      	cmp	r6, #0
 8001f4c:	d172      	bne.n	8002034 <USB_DevInit+0x114>
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8001f4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f52:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8001f54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f56:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001f5a:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8001f5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8001f62:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8001f6a:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8001f6e:	f504 6500 	add.w	r5, r4, #2048	; 0x800
 8001f72:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001f76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d164      	bne.n	8002046 <USB_DevInit+0x126>
    if (cfg.speed == USBD_HS_SPEED)
 8001f7c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001f7e:	2900      	cmp	r1, #0
 8001f80:	d15f      	bne.n	8002042 <USB_DevInit+0x122>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8001f82:	4620      	mov	r0, r4
 8001f84:	f7ff ffc4 	bl	8001f10 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8001f88:	2110      	movs	r1, #16
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	f7ff ff9e 	bl	8001ecc <USB_FlushTxFifo>
 8001f90:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8001f92:	4620      	mov	r0, r4
 8001f94:	f7ff ffac 	bl	8001ef0 <USB_FlushRxFifo>
 8001f98:	2800      	cmp	r0, #0
 8001f9a:	d156      	bne.n	800204a <USB_DevInit+0x12a>
  HAL_StatusTypeDef ret = HAL_OK;
 8001f9c:	1c08      	adds	r0, r1, #0
 8001f9e:	bf18      	it	ne
 8001fa0:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8001fa2:	2300      	movs	r3, #0
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8001fa4:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8001fa8:	4619      	mov	r1, r3
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8001faa:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8001fae:	f64f 397f 	movw	r9, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 8001fb2:	612b      	str	r3, [r5, #16]
 8001fb4:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DOEPMSK = 0U;
 8001fb8:	616b      	str	r3, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8001fba:	61eb      	str	r3, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001fbc:	4543      	cmp	r3, r8
 8001fbe:	d146      	bne.n	800204e <USB_DevInit+0x12e>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001fc0:	2100      	movs	r1, #0
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8001fc2:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8001fc6:	468c      	mov	ip, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8001fc8:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8001fcc:	f64f 397f 	movw	r9, #64383	; 0xfb7f
 8001fd0:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8001fd4:	428b      	cmp	r3, r1
 8001fd6:	d14d      	bne.n	8002074 <USB_DevInit+0x154>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001fd8:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8001fda:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8001fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fe0:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8001fe2:	d107      	bne.n	8001ff4 <USB_DevInit+0xd4>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8001fe4:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <USB_DevInit+0x180>)
 8001fe6:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8001fe8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fee:	f043 0303 	orr.w	r3, r3, #3
 8001ff2:	632b      	str	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8001ff8:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8001ffc:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8001ffe:	b91f      	cbnz	r7, 8002008 <USB_DevInit+0xe8>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002000:	69a3      	ldr	r3, [r4, #24]
 8002002:	f043 0310 	orr.w	r3, r3, #16
 8002006:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002008:	69a2      	ldr	r2, [r4, #24]
 800200a:	4b26      	ldr	r3, [pc, #152]	; (80020a4 <USB_DevInit+0x184>)
 800200c:	4313      	orrs	r3, r2
 800200e:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002010:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002012:	b11b      	cbz	r3, 800201c <USB_DevInit+0xfc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002014:	69a3      	ldr	r3, [r4, #24]
 8002016:	f043 0308 	orr.w	r3, r3, #8
 800201a:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800201c:	2e01      	cmp	r6, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800201e:	bf01      	itttt	eq
 8002020:	69a3      	ldreq	r3, [r4, #24]
 8002022:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8002026:	f043 0304 	orreq.w	r3, r3, #4
 800202a:	61a3      	streq	r3, [r4, #24]
}
 800202c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002030:	b004      	add	sp, #16
 8002032:	4770      	bx	lr
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002034:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002038:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800203a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800203c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002040:	e78f      	b.n	8001f62 <USB_DevInit+0x42>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002042:	4619      	mov	r1, r3
 8002044:	e79d      	b.n	8001f82 <USB_DevInit+0x62>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002046:	2103      	movs	r1, #3
 8002048:	e79b      	b.n	8001f82 <USB_DevInit+0x62>
    ret = HAL_ERROR;
 800204a:	2001      	movs	r0, #1
 800204c:	e7a9      	b.n	8001fa2 <USB_DevInit+0x82>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800204e:	f8d2 a000 	ldr.w	sl, [r2]
 8002052:	f1ba 0f00 	cmp.w	sl, #0
 8002056:	da0b      	bge.n	8002070 <USB_DevInit+0x150>
      if (i == 0U)
 8002058:	b93b      	cbnz	r3, 800206a <USB_DevInit+0x14a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800205a:	f8c2 e000 	str.w	lr, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800205e:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002060:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002062:	f8c2 9008 	str.w	r9, [r2, #8]
 8002066:	3220      	adds	r2, #32
 8002068:	e7a8      	b.n	8001fbc <USB_DevInit+0x9c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800206a:	f8c2 c000 	str.w	ip, [r2]
 800206e:	e7f6      	b.n	800205e <USB_DevInit+0x13e>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002070:	6011      	str	r1, [r2, #0]
 8002072:	e7f4      	b.n	800205e <USB_DevInit+0x13e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002074:	f8d2 a000 	ldr.w	sl, [r2]
 8002078:	f1ba 0f00 	cmp.w	sl, #0
 800207c:	da0c      	bge.n	8002098 <USB_DevInit+0x178>
      if (i == 0U)
 800207e:	b941      	cbnz	r1, 8002092 <USB_DevInit+0x172>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002080:	f8c2 8000 	str.w	r8, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002084:	f8c2 c010 	str.w	ip, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002088:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800208a:	f8c2 9008 	str.w	r9, [r2, #8]
 800208e:	3220      	adds	r2, #32
 8002090:	e7a0      	b.n	8001fd4 <USB_DevInit+0xb4>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002092:	f8c2 e000 	str.w	lr, [r2]
 8002096:	e7f5      	b.n	8002084 <USB_DevInit+0x164>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002098:	f8c2 c000 	str.w	ip, [r2]
 800209c:	e7f2      	b.n	8002084 <USB_DevInit+0x164>
 800209e:	bf00      	nop
 80020a0:	00800100 	.word	0x00800100
 80020a4:	803c3800 	.word	0x803c3800

080020a8 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80020a8:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80020ac:	f013 0006 	ands.w	r0, r3, #6
 80020b0:	d004      	beq.n	80020bc <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80020b2:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 80020b6:	bf14      	ite	ne
 80020b8:	2002      	movne	r0, #2
 80020ba:	200f      	moveq	r0, #15
}
 80020bc:	4770      	bx	lr

080020be <USB_ActivateEndpoint>:
{
 80020be:	b530      	push	{r4, r5, lr}
 80020c0:	2401      	movs	r4, #1
  uint32_t epnum = (uint32_t)ep->num;
 80020c2:	780d      	ldrb	r5, [r1, #0]
 80020c4:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 80020c8:	f005 030f 	and.w	r3, r5, #15
 80020cc:	409c      	lsls	r4, r3
  if (ep->is_in == 1U)
 80020ce:	784b      	ldrb	r3, [r1, #1]
 80020d0:	eb00 1045 	add.w	r0, r0, r5, lsl #5
 80020d4:	2b01      	cmp	r3, #1
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80020d6:	69d3      	ldr	r3, [r2, #28]
  if (ep->is_in == 1U)
 80020d8:	d118      	bne.n	800210c <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80020da:	431c      	orrs	r4, r3
 80020dc:	61d4      	str	r4, [r2, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80020de:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80020e2:	041a      	lsls	r2, r3, #16
 80020e4:	d410      	bmi.n	8002108 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80020e6:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80020e8:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80020ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f6:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80020fa:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80020fe:	ea43 5385 	orr.w	r3, r3, r5, lsl #22
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8002108:	2000      	movs	r0, #0
 800210a:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800210c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8002110:	61d4      	str	r4, [r2, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002112:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002116:	041b      	lsls	r3, r3, #16
 8002118:	d4f6      	bmi.n	8002108 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800211a:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 800211c:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800211e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002126:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800212a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800212e:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8002138:	e7e6      	b.n	8002108 <USB_ActivateEndpoint+0x4a>
	...

0800213c <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 800213c:	784b      	ldrb	r3, [r1, #1]
{
 800213e:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8002140:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8002142:	2b01      	cmp	r3, #1
 8002144:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8002148:	694d      	ldr	r5, [r1, #20]
 800214a:	4e34      	ldr	r6, [pc, #208]	; (800221c <USB_EP0StartXfer+0xe0>)
 800214c:	4f34      	ldr	r7, [pc, #208]	; (8002220 <USB_EP0StartXfer+0xe4>)
 800214e:	d144      	bne.n	80021da <USB_EP0StartXfer+0x9e>
 8002150:	f504 6310 	add.w	r3, r4, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8002154:	b9b5      	cbnz	r5, 8002184 <USB_EP0StartXfer+0x48>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8002156:	691d      	ldr	r5, [r3, #16]
 8002158:	402e      	ands	r6, r5
 800215a:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800215c:	691d      	ldr	r5, [r3, #16]
 800215e:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8002162:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002164:	691d      	ldr	r5, [r3, #16]
 8002166:	402f      	ands	r7, r5
 8002168:	611f      	str	r7, [r3, #16]
    if (dma == 1U)
 800216a:	2a01      	cmp	r2, #1
 800216c:	d121      	bne.n	80021b2 <USB_EP0StartXfer+0x76>
      if ((uint32_t)ep->dma_addr != 0U)
 800216e:	690a      	ldr	r2, [r1, #16]
 8002170:	b102      	cbz	r2, 8002174 <USB_EP0StartXfer+0x38>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8002172:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002174:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8002178:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800217c:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 8002180:	2000      	movs	r0, #0
 8002182:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8002184:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8002188:	ea0c 0707 	and.w	r7, ip, r7
 800218c:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800218e:	691f      	ldr	r7, [r3, #16]
 8002190:	403e      	ands	r6, r7
 8002192:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8002194:	688e      	ldr	r6, [r1, #8]
 8002196:	42ae      	cmp	r6, r5
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002198:	691d      	ldr	r5, [r3, #16]
        ep->xfer_len = ep->maxpacket;
 800219a:	bf38      	it	cc
 800219c:	614e      	strcc	r6, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800219e:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80021a2:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80021a4:	694d      	ldr	r5, [r1, #20]
 80021a6:	691e      	ldr	r6, [r3, #16]
 80021a8:	f3c5 0512 	ubfx	r5, r5, #0, #19
 80021ac:	4335      	orrs	r5, r6
 80021ae:	611d      	str	r5, [r3, #16]
 80021b0:	e7db      	b.n	800216a <USB_EP0StartXfer+0x2e>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80021b2:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 80021b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80021ba:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 80021be:	694b      	ldr	r3, [r1, #20]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0dd      	beq.n	8002180 <USB_EP0StartXfer+0x44>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80021c4:	780b      	ldrb	r3, [r1, #0]
 80021c6:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 80021ca:	f003 020f 	and.w	r2, r3, #15
 80021ce:	2301      	movs	r3, #1
 80021d0:	4093      	lsls	r3, r2
 80021d2:	4323      	orrs	r3, r4
 80021d4:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 80021d8:	e7d2      	b.n	8002180 <USB_EP0StartXfer+0x44>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80021da:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 80021de:	6918      	ldr	r0, [r3, #16]
 80021e0:	4038      	ands	r0, r7
 80021e2:	6118      	str	r0, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80021e4:	6918      	ldr	r0, [r3, #16]
 80021e6:	4030      	ands	r0, r6
 80021e8:	6118      	str	r0, [r3, #16]
 80021ea:	6888      	ldr	r0, [r1, #8]
    if (ep->xfer_len > 0U)
 80021ec:	b105      	cbz	r5, 80021f0 <USB_EP0StartXfer+0xb4>
      ep->xfer_len = ep->maxpacket;
 80021ee:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80021f0:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80021f2:	f3c0 0012 	ubfx	r0, r0, #0, #19
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80021f6:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80021fa:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80021fc:	691d      	ldr	r5, [r3, #16]
    if (dma == 1U)
 80021fe:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8002200:	ea40 0005 	orr.w	r0, r0, r5
 8002204:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 8002206:	d102      	bne.n	800220e <USB_EP0StartXfer+0xd2>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002208:	68ca      	ldr	r2, [r1, #12]
 800220a:	b102      	cbz	r2, 800220e <USB_EP0StartXfer+0xd2>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800220c:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800220e:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8002212:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8002216:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 800221a:	e7b1      	b.n	8002180 <USB_EP0StartXfer+0x44>
 800221c:	e007ffff 	.word	0xe007ffff
 8002220:	fff80000 	.word	0xfff80000

08002224 <USB_WritePacket>:
{
 8002224:	b510      	push	{r4, lr}
 8002226:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800222a:	b94c      	cbnz	r4, 8002240 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 800222c:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800222e:	eb00 3002 	add.w	r0, r0, r2, lsl #12
    count32b = ((uint32_t)len + 3U) / 4U;
 8002232:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002234:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8002238:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 800223c:	4299      	cmp	r1, r3
 800223e:	d101      	bne.n	8002244 <USB_WritePacket+0x20>
}
 8002240:	2000      	movs	r0, #0
 8002242:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002244:	f851 2b04 	ldr.w	r2, [r1], #4
 8002248:	6002      	str	r2, [r0, #0]
 800224a:	e7f7      	b.n	800223c <USB_WritePacket+0x18>

0800224c <USB_EPStartXfer>:
{
 800224c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800224e:	784d      	ldrb	r5, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8002250:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8002252:	2d01      	cmp	r5, #1
 8002254:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8002258:	694b      	ldr	r3, [r1, #20]
 800225a:	78ce      	ldrb	r6, [r1, #3]
 800225c:	f8df c194 	ldr.w	ip, [pc, #404]	; 80023f4 <USB_EPStartXfer+0x1a8>
 8002260:	f8df e194 	ldr.w	lr, [pc, #404]	; 80023f8 <USB_EPStartXfer+0x1ac>
 8002264:	d17d      	bne.n	8002362 <USB_EPStartXfer+0x116>
 8002266:	f504 6510 	add.w	r5, r4, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800226a:	692f      	ldr	r7, [r5, #16]
    if (ep->xfer_len == 0U)
 800226c:	bb3b      	cbnz	r3, 80022be <USB_EPStartXfer+0x72>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800226e:	ea07 070c 	and.w	r7, r7, ip
 8002272:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8002274:	692f      	ldr	r7, [r5, #16]
 8002276:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 800227a:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800227c:	692f      	ldr	r7, [r5, #16]
 800227e:	ea07 070e 	and.w	r7, r7, lr
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8002282:	612f      	str	r7, [r5, #16]
    if (dma == 1U)
 8002284:	2a01      	cmp	r2, #1
 8002286:	d142      	bne.n	800230e <USB_EPStartXfer+0xc2>
      if ((uint32_t)ep->dma_addr != 0U)
 8002288:	690b      	ldr	r3, [r1, #16]
 800228a:	b103      	cbz	r3, 800228e <USB_EPStartXfer+0x42>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800228c:	616b      	str	r3, [r5, #20]
      if (ep->type == EP_TYPE_ISOC)
 800228e:	2e01      	cmp	r6, #1
 8002290:	d10c      	bne.n	80022ac <USB_EPStartXfer+0x60>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002292:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8002296:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800229a:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 800229e:	bf0c      	ite	eq
 80022a0:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80022a4:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80022a8:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80022ac:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 80022b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80022b4:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 80022b8:	2000      	movs	r0, #0
 80022ba:	b003      	add	sp, #12
 80022bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80022be:	ea07 070e 	and.w	r7, r7, lr
 80022c2:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80022c4:	692f      	ldr	r7, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 80022c6:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80022c8:	ea07 070c 	and.w	r7, r7, ip
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80022cc:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80022d0:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80022d2:	eb0c 0703 	add.w	r7, ip, r3
 80022d6:	f107 37ff 	add.w	r7, r7, #4294967295
 80022da:	fbb7 fcfc 	udiv	ip, r7, ip
 80022de:	4f44      	ldr	r7, [pc, #272]	; (80023f0 <USB_EPStartXfer+0x1a4>)
 80022e0:	f8d5 e010 	ldr.w	lr, [r5, #16]
 80022e4:	ea07 47cc 	and.w	r7, r7, ip, lsl #19
 80022e8:	ea47 070e 	orr.w	r7, r7, lr
 80022ec:	612f      	str	r7, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80022ee:	f8d5 c010 	ldr.w	ip, [r5, #16]
 80022f2:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80022f6:	ea47 070c 	orr.w	r7, r7, ip
 80022fa:	612f      	str	r7, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 80022fc:	d1c2      	bne.n	8002284 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80022fe:	692f      	ldr	r7, [r5, #16]
 8002300:	f027 47c0 	bic.w	r7, r7, #1610612736	; 0x60000000
 8002304:	612f      	str	r7, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8002306:	692f      	ldr	r7, [r5, #16]
 8002308:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 800230c:	e7b9      	b.n	8002282 <USB_EPStartXfer+0x36>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800230e:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8002312:	2e01      	cmp	r6, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8002314:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 8002318:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 800231c:	d00c      	beq.n	8002338 <USB_EPStartXfer+0xec>
        if (ep->xfer_len > 0U)
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0ca      	beq.n	80022b8 <USB_EPStartXfer+0x6c>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8002322:	780b      	ldrb	r3, [r1, #0]
 8002324:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 8002328:	f003 020f 	and.w	r2, r3, #15
 800232c:	2301      	movs	r3, #1
 800232e:	4093      	lsls	r3, r2
 8002330:	4323      	orrs	r3, r4
 8002332:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8002336:	e7bf      	b.n	80022b8 <USB_EPStartXfer+0x6c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8002338:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800233c:	b29b      	uxth	r3, r3
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800233e:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8002342:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 8002346:	bf0c      	ite	eq
 8002348:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800234c:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 8002350:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8002354:	780c      	ldrb	r4, [r1, #0]
 8002356:	9200      	str	r2, [sp, #0]
 8002358:	68c9      	ldr	r1, [r1, #12]
 800235a:	4622      	mov	r2, r4
 800235c:	f7ff ff62 	bl	8002224 <USB_WritePacket>
 8002360:	e7aa      	b.n	80022b8 <USB_EPStartXfer+0x6c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8002362:	f504 6730 	add.w	r7, r4, #2816	; 0xb00
 8002366:	693d      	ldr	r5, [r7, #16]
 8002368:	ea05 050e 	and.w	r5, r5, lr
 800236c:	613d      	str	r5, [r7, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800236e:	693d      	ldr	r5, [r7, #16]
 8002370:	ea05 050c 	and.w	r5, r5, ip
 8002374:	613d      	str	r5, [r7, #16]
 8002376:	688d      	ldr	r5, [r1, #8]
    if (ep->xfer_len == 0U)
 8002378:	bb1b      	cbnz	r3, 80023c2 <USB_EPStartXfer+0x176>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8002380:	431d      	orrs	r5, r3
 8002382:	613d      	str	r5, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    if (dma == 1U)
 800238a:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800238c:	613b      	str	r3, [r7, #16]
    if (dma == 1U)
 800238e:	d102      	bne.n	8002396 <USB_EPStartXfer+0x14a>
      if ((uint32_t)ep->xfer_buff != 0U)
 8002390:	68cb      	ldr	r3, [r1, #12]
 8002392:	b103      	cbz	r3, 8002396 <USB_EPStartXfer+0x14a>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8002394:	617b      	str	r3, [r7, #20]
    if (ep->type == EP_TYPE_ISOC)
 8002396:	2e01      	cmp	r6, #1
 8002398:	d10c      	bne.n	80023b4 <USB_EPStartXfer+0x168>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800239a:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 800239e:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80023a2:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 80023a6:	bf0c      	ite	eq
 80023a8:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80023ac:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80023b0:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80023b4:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 80023b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80023bc:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 80023c0:	e77a      	b.n	80022b8 <USB_EPStartXfer+0x6c>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80023c2:	442b      	add	r3, r5
 80023c4:	3b01      	subs	r3, #1
 80023c6:	fbb3 f3f5 	udiv	r3, r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80023ca:	f8df c024 	ldr.w	ip, [pc, #36]	; 80023f0 <USB_EPStartXfer+0x1a4>
 80023ce:	f8d7 e010 	ldr.w	lr, [r7, #16]
 80023d2:	ea0c 4cc3 	and.w	ip, ip, r3, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	436b      	muls	r3, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80023da:	ea4c 0c0e 	orr.w	ip, ip, lr
 80023de:	f8c7 c010 	str.w	ip, [r7, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80023e2:	f8d7 c010 	ldr.w	ip, [r7, #16]
 80023e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ea:	ea43 030c 	orr.w	r3, r3, ip
 80023ee:	e7cc      	b.n	800238a <USB_EPStartXfer+0x13e>
 80023f0:	1ff80000 	.word	0x1ff80000
 80023f4:	e007ffff 	.word	0xe007ffff
 80023f8:	fff80000 	.word	0xfff80000

080023fc <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80023fc:	3203      	adds	r2, #3
 80023fe:	0892      	lsrs	r2, r2, #2
 8002400:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002404:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8002408:	4291      	cmp	r1, r2
 800240a:	d101      	bne.n	8002410 <USB_ReadPacket+0x14>
}
 800240c:	4608      	mov	r0, r1
 800240e:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8002410:	6803      	ldr	r3, [r0, #0]
 8002412:	f841 3b04 	str.w	r3, [r1], #4
 8002416:	e7f7      	b.n	8002408 <USB_ReadPacket+0xc>

08002418 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8002418:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 800241a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 800241c:	2a01      	cmp	r2, #1
 800241e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002422:	d112      	bne.n	800244a <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8002424:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8002428:	2a00      	cmp	r2, #0
 800242a:	db06      	blt.n	800243a <USB_EPSetStall+0x22>
 800242c:	b12b      	cbz	r3, 800243a <USB_EPSetStall+0x22>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800242e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002432:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002436:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800243a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 800243e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002442:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8002446:	2000      	movs	r0, #0
 8002448:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800244a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800244e:	2a00      	cmp	r2, #0
 8002450:	db06      	blt.n	8002460 <USB_EPSetStall+0x48>
 8002452:	b12b      	cbz	r3, 8002460 <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8002454:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002458:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800245c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8002460:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8002464:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002468:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800246c:	e7eb      	b.n	8002446 <USB_EPSetStall+0x2e>

0800246e <USB_EPClearStall>:
  uint32_t epnum = (uint32_t)ep->num;
 800246e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8002470:	784a      	ldrb	r2, [r1, #1]
 8002472:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 8002476:	78cb      	ldrb	r3, [r1, #3]
 8002478:	2a01      	cmp	r2, #1
 800247a:	f1a3 0302 	sub.w	r3, r3, #2
 800247e:	b2db      	uxtb	r3, r3
 8002480:	d10f      	bne.n	80024a2 <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002482:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002486:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002488:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800248c:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8002490:	d805      	bhi.n	800249e <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8002492:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8002496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800249e:	2000      	movs	r0, #0
 80024a0:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024a2:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80024a6:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024a8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80024ac:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80024b0:	bf9e      	ittt	ls
 80024b2:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 80024b6:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 80024ba:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 80024be:	e7ee      	b.n	800249e <USB_EPClearStall+0x30>

080024c0 <USB_StopDevice>:
{
 80024c0:	b510      	push	{r4, lr}
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024c2:	f64f 327f 	movw	r2, #64383	; 0xfb7f
{
 80024c6:	4604      	mov	r4, r0
 80024c8:	f500 6310 	add.w	r3, r0, #2304	; 0x900
 80024cc:	f500 612e 	add.w	r1, r0, #2784	; 0xae0
    USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024d0:	609a      	str	r2, [r3, #8]
    USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024d2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 80024d6:	3320      	adds	r3, #32
  for (i = 0U; i < 15U; i++)
 80024d8:	428b      	cmp	r3, r1
 80024da:	d1f9      	bne.n	80024d0 <USB_StopDevice+0x10>
  USBx_DEVICE->DIEPMSK  = 0U;
 80024dc:	2200      	movs	r2, #0
  ret = USB_FlushRxFifo(USBx);
 80024de:	4620      	mov	r0, r4
  USBx_DEVICE->DIEPMSK  = 0U;
 80024e0:	f8c4 2810 	str.w	r2, [r4, #2064]	; 0x810
  USBx_DEVICE->DOEPMSK  = 0U;
 80024e4:	f8c4 2814 	str.w	r2, [r4, #2068]	; 0x814
  USBx_DEVICE->DAINTMSK = 0U;
 80024e8:	f8c4 281c 	str.w	r2, [r4, #2076]	; 0x81c
  ret = USB_FlushRxFifo(USBx);
 80024ec:	f7ff fd00 	bl	8001ef0 <USB_FlushRxFifo>
  if (ret != HAL_OK)
 80024f0:	b928      	cbnz	r0, 80024fe <USB_StopDevice+0x3e>
  ret = USB_FlushTxFifo(USBx,  0x10U);
 80024f2:	4620      	mov	r0, r4
}
 80024f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ret = USB_FlushTxFifo(USBx,  0x10U);
 80024f8:	2110      	movs	r1, #16
 80024fa:	f7ff bce7 	b.w	8001ecc <USB_FlushTxFifo>
}
 80024fe:	bd10      	pop	{r4, pc}

08002500 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8002500:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8002504:	0109      	lsls	r1, r1, #4
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8002506:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800250a:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800250e:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002512:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8002516:	4319      	orrs	r1, r3
 8002518:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 800251c:	2000      	movs	r0, #0
 800251e:	4770      	bx	lr

08002520 <USB_DevConnect>:
{
 8002520:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8002522:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002526:	f023 0302 	bic.w	r3, r3, #2
 800252a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 800252e:	2003      	movs	r0, #3
 8002530:	f7fe f944 	bl	80007bc <HAL_Delay>
}
 8002534:	2000      	movs	r0, #0
 8002536:	bd08      	pop	{r3, pc}

08002538 <USB_DevDisconnect>:
{
 8002538:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800253a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800253e:	f043 0302 	orr.w	r3, r3, #2
 8002542:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002546:	2003      	movs	r0, #3
 8002548:	f7fe f938 	bl	80007bc <HAL_Delay>
}
 800254c:	2000      	movs	r0, #0
 800254e:	bd08      	pop	{r3, pc}

08002550 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8002550:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8002552:	6980      	ldr	r0, [r0, #24]
}
 8002554:	4010      	ands	r0, r2
 8002556:	4770      	bx	lr

08002558 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8002558:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800255c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002560:	69c0      	ldr	r0, [r0, #28]
 8002562:	4018      	ands	r0, r3
}
 8002564:	0c00      	lsrs	r0, r0, #16
 8002566:	4770      	bx	lr

08002568 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8002568:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 800256c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8002570:	69c0      	ldr	r0, [r0, #28]
 8002572:	4018      	ands	r0, r3
}
 8002574:	b280      	uxth	r0, r0
 8002576:	4770      	bx	lr

08002578 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8002578:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800257c:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8002580:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8002584:	6940      	ldr	r0, [r0, #20]
}
 8002586:	4010      	ands	r0, r2
 8002588:	4770      	bx	lr

0800258a <USB_ReadDevInEPInterrupt>:
{
 800258a:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 800258c:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8002590:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8002594:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8002598:	f001 010f 	and.w	r1, r1, #15
 800259c:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800259e:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80025a2:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80025a4:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	4323      	orrs	r3, r4
}
 80025aa:	4018      	ands	r0, r3
 80025ac:	bd10      	pop	{r4, pc}

080025ae <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80025ae:	6940      	ldr	r0, [r0, #20]
}
 80025b0:	f000 0001 	and.w	r0, r0, #1
 80025b4:	4770      	bx	lr

080025b6 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80025b6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80025ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025be:	f023 0307 	bic.w	r3, r3, #7
 80025c2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80025c6:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	f002 0206 	and.w	r2, r2, #6
 80025d0:	2a04      	cmp	r2, #4
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80025d2:	bf02      	ittt	eq
 80025d4:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 80025d8:	f042 0203 	orreq.w	r2, r2, #3
 80025dc:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80025e0:	685a      	ldr	r2, [r3, #4]
}
 80025e2:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80025e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e8:	605a      	str	r2, [r3, #4]
}
 80025ea:	4770      	bx	lr

080025ec <USB_EP0_OutStart>:
{
 80025ec:	b530      	push	{r4, r5, lr}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80025ee:	6c05      	ldr	r5, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80025f0:	4c10      	ldr	r4, [pc, #64]	; (8002634 <USB_EP0_OutStart+0x48>)
 80025f2:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 80025f6:	42a5      	cmp	r5, r4
 80025f8:	d903      	bls.n	8002602 <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80025fa:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 80025fe:	2c00      	cmp	r4, #0
 8002600:	db16      	blt.n	8002630 <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8002602:	2400      	movs	r4, #0
 8002604:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8002606:	691c      	ldr	r4, [r3, #16]
  if (dma == 1U)
 8002608:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800260a:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 800260e:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8002610:	691c      	ldr	r4, [r3, #16]
 8002612:	f044 0418 	orr.w	r4, r4, #24
 8002616:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8002618:	691c      	ldr	r4, [r3, #16]
 800261a:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 800261e:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8002620:	bf01      	itttt	eq
 8002622:	615a      	streq	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8002624:	f8d0 3b00 	ldreq.w	r3, [r0, #2816]	; 0xb00
 8002628:	f043 2380 	orreq.w	r3, r3, #2147516416	; 0x80008000
 800262c:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
}
 8002630:	2000      	movs	r0, #0
 8002632:	bd30      	pop	{r4, r5, pc}
 8002634:	4f54300a 	.word	0x4f54300a

08002638 <USBD_DFU_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_DFU_GetCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_DFU_CfgDesc);
 8002638:	231b      	movs	r3, #27
 800263a:	8003      	strh	r3, [r0, #0]
  return USBD_DFU_CfgDesc;
}
 800263c:	4800      	ldr	r0, [pc, #0]	; (8002640 <USBD_DFU_GetCfgDesc+0x8>)
 800263e:	4770      	bx	lr
 8002640:	20000048 	.word	0x20000048

08002644 <USBD_DFU_DataIn>:
static uint8_t  USBD_DFU_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{

  return USBD_OK;
}
 8002644:	2000      	movs	r0, #0
 8002646:	4770      	bx	lr

08002648 <USBD_DFU_EP0_RxReady>:
  */
static uint8_t  USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{

  return USBD_OK;
}
 8002648:	2000      	movs	r0, #0
 800264a:	4770      	bx	lr

0800264c <USBD_DFU_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = sizeof(USBD_DFU_DeviceQualifierDesc);
 800264c:	230a      	movs	r3, #10
 800264e:	8003      	strh	r3, [r0, #0]
  return USBD_DFU_DeviceQualifierDesc;
}
 8002650:	4800      	ldr	r0, [pc, #0]	; (8002654 <USBD_DFU_GetDeviceQualifierDesc+0x8>)
 8002652:	4770      	bx	lr
 8002654:	20000064 	.word	0x20000064

08002658 <USBD_DFU_GetUsrStringDesc>:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
  static uint8_t USBD_StrDesc[255];
  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8002658:	2906      	cmp	r1, #6
{
 800265a:	b508      	push	{r3, lr}
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 800265c:	d807      	bhi.n	800266e <USBD_DFU_GetUsrStringDesc+0x16>
  {
    USBD_GetString((uint8_t *)((USBD_DFU_MediaTypeDef *)pdev->pUserData)->pStrDesc, USBD_StrDesc, length);
 800265e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 8002662:	4904      	ldr	r1, [pc, #16]	; (8002674 <USBD_DFU_GetUsrStringDesc+0x1c>)
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	f000 fdf6 	bl	8003256 <USBD_GetString>
    return USBD_StrDesc;
 800266a:	4802      	ldr	r0, [pc, #8]	; (8002674 <USBD_DFU_GetUsrStringDesc+0x1c>)
  /* Not supported Interface Descriptor index */
  else
  {
    return NULL;
  }
}
 800266c:	bd08      	pop	{r3, pc}
    return NULL;
 800266e:	2000      	movs	r0, #0
 8002670:	e7fc      	b.n	800266c <USBD_DFU_GetUsrStringDesc+0x14>
 8002672:	bf00      	nop
 8002674:	20000160 	.word	0x20000160

08002678 <USBD_DFU_EP0_TxReady>:
{
 8002678:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 800267a:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
{
 800267e:	4605      	mov	r5, r0
  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8002680:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8002684:	2b04      	cmp	r3, #4
 8002686:	d167      	bne.n	8002758 <USBD_DFU_EP0_TxReady+0xe0>
    if (hdfu->wblock_num == 0U)
 8002688:	f8d4 2400 	ldr.w	r2, [r4, #1024]	; 0x400
 800268c:	2a00      	cmp	r2, #0
 800268e:	d153      	bne.n	8002738 <USBD_DFU_EP0_TxReady+0xc0>
      if ((hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS) && (hdfu->wlength == 1U))
 8002690:	7823      	ldrb	r3, [r4, #0]
 8002692:	b9ab      	cbnz	r3, 80026c0 <USBD_DFU_EP0_TxReady+0x48>
 8002694:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 8002698:	2b01      	cmp	r3, #1
 800269a:	d13e      	bne.n	800271a <USBD_DFU_EP0_TxReady+0xa2>
    hdfu->wlength = 0U;
 800269c:	2000      	movs	r0, #0
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 800269e:	2303      	movs	r3, #3
    hdfu->wlength = 0U;
 80026a0:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 80026a4:	f8c4 0400 	str.w	r0, [r4, #1024]	; 0x400
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 80026a8:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[1] = 0U;
 80026ac:	f884 0411 	strb.w	r0, [r4, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80026b0:	f884 0412 	strb.w	r0, [r4, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80026b4:	f884 0413 	strb.w	r0, [r4, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80026b8:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
}
 80026bc:	b003      	add	sp, #12
 80026be:	bd30      	pop	{r4, r5, pc}
      else if ((hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER) && (hdfu->wlength == 5U))
 80026c0:	2b21      	cmp	r3, #33	; 0x21
 80026c2:	d110      	bne.n	80026e6 <USBD_DFU_EP0_TxReady+0x6e>
 80026c4:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 80026c8:	2b05      	cmp	r3, #5
 80026ca:	d126      	bne.n	800271a <USBD_DFU_EP0_TxReady+0xa2>
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80026cc:	78e3      	ldrb	r3, [r4, #3]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80026ce:	78a2      	ldrb	r2, [r4, #2]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80026d0:	041b      	lsls	r3, r3, #16
 80026d2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
        hdfu->data_ptr = hdfu->buffer.d8[1];
 80026d6:	7862      	ldrb	r2, [r4, #1]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80026d8:	4413      	add	r3, r2
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80026da:	7922      	ldrb	r2, [r4, #4]
 80026dc:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 80026e0:	f8c4 3408 	str.w	r3, [r4, #1032]	; 0x408
 80026e4:	e7da      	b.n	800269c <USBD_DFU_EP0_TxReady+0x24>
      else if ((hdfu->buffer.d8[0] == DFU_CMD_ERASE) && (hdfu->wlength == 5U))
 80026e6:	2b41      	cmp	r3, #65	; 0x41
 80026e8:	d117      	bne.n	800271a <USBD_DFU_EP0_TxReady+0xa2>
 80026ea:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 80026ee:	2b05      	cmp	r3, #5
 80026f0:	d113      	bne.n	800271a <USBD_DFU_EP0_TxReady+0xa2>
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80026f2:	78e0      	ldrb	r0, [r4, #3]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80026f4:	78a3      	ldrb	r3, [r4, #2]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80026f6:	0400      	lsls	r0, r0, #16
 80026f8:	eb00 2003 	add.w	r0, r0, r3, lsl #8
        hdfu->data_ptr = hdfu->buffer.d8[1];
 80026fc:	7863      	ldrb	r3, [r4, #1]
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80026fe:	4418      	add	r0, r3
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8002700:	7923      	ldrb	r3, [r4, #4]
 8002702:	eb00 6003 	add.w	r0, r0, r3, lsl #24
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 8002706:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
        hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 800270a:	f8c4 0408 	str.w	r0, [r4, #1032]	; 0x408
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Erase(hdfu->data_ptr) != USBD_OK)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4798      	blx	r3
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 8002712:	2800      	cmp	r0, #0
 8002714:	d0c2      	beq.n	800269c <USBD_DFU_EP0_TxReady+0x24>
          return USBD_FAIL;
 8002716:	2002      	movs	r0, #2
 8002718:	e7d0      	b.n	80026bc <USBD_DFU_EP0_TxReady+0x44>
        hdfu->wlength = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 8002720:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
        req.bmRequest = 0U;
 8002724:	f88d 3000 	strb.w	r3, [sp]
        req.wLength = 1U;
 8002728:	2301      	movs	r3, #1
        USBD_CtlError(pdev, &req);
 800272a:	4669      	mov	r1, sp
 800272c:	4628      	mov	r0, r5
        req.wLength = 1U;
 800272e:	f8ad 3006 	strh.w	r3, [sp, #6]
        USBD_CtlError(pdev, &req);
 8002732:	f000 fd85 	bl	8003240 <USBD_CtlError>
 8002736:	e7b1      	b.n	800269c <USBD_DFU_EP0_TxReady+0x24>
      if (hdfu->wblock_num > 1U)
 8002738:	2a01      	cmp	r2, #1
 800273a:	d9af      	bls.n	800269c <USBD_DFU_EP0_TxReady+0x24>
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800273c:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <USBD_DFU_EP0_TxReady+0x14c>)
 800273e:	f8d4 1408 	ldr.w	r1, [r4, #1032]	; 0x408
 8002742:	4413      	add	r3, r2
        if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Write(hdfu->buffer.d8,
 8002744:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8002748:	eb01 2183 	add.w	r1, r1, r3, lsl #10
 800274c:	6915      	ldr	r5, [r2, #16]
 800274e:	4620      	mov	r0, r4
 8002750:	f8d4 2404 	ldr.w	r2, [r4, #1028]	; 0x404
 8002754:	47a8      	blx	r5
 8002756:	e7dc      	b.n	8002712 <USBD_DFU_EP0_TxReady+0x9a>
    if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8002758:	2b07      	cmp	r3, #7
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	d111      	bne.n	8002784 <USBD_DFU_EP0_TxReady+0x10c>

  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;

  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 8002760:	4a19      	ldr	r2, [pc, #100]	; (80027c8 <USBD_DFU_EP0_TxReady+0x150>)
  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8002762:	f884 3419 	strb.w	r3, [r4, #1049]	; 0x419
  if ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U)
 8002766:	7d12      	ldrb	r2, [r2, #20]
 8002768:	f012 0204 	ands.w	r2, r2, #4
 800276c:	d00c      	beq.n	8002788 <USBD_DFU_EP0_TxReady+0x110>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800276e:	2206      	movs	r2, #6

    hdfu->dev_status[1] = 0U;
 8002770:	f884 3411 	strb.w	r3, [r4, #1041]	; 0x411
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8002774:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
    hdfu->dev_status[2] = 0U;
 8002778:	f884 3412 	strb.w	r3, [r4, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800277c:	f884 3413 	strb.w	r3, [r4, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8002780:	f884 2414 	strb.w	r2, [r4, #1044]	; 0x414
  return USBD_OK;
 8002784:	4618      	mov	r0, r3
 8002786:	e799      	b.n	80026bc <USBD_DFU_EP0_TxReady+0x44>
    return;
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8002788:	2308      	movs	r3, #8

    hdfu->dev_status[1] = 0U;
 800278a:	f884 2411 	strb.w	r2, [r4, #1041]	; 0x411
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 800278e:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[2] = 0U;
 8002792:	f884 2412 	strb.w	r2, [r4, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8002796:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800279a:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414

    /* Disconnect the USB device */
    USBD_Stop(pdev);
 800279e:	f000 fa17 	bl	8002bd0 <USBD_Stop>

    /* DeInitilialize the MAL(Media Access Layer) */
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 80027a2:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	4798      	blx	r3
  __ASM volatile ("dsb 0xF":::"memory");
 80027aa:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80027ae:	4907      	ldr	r1, [pc, #28]	; (80027cc <USBD_DFU_EP0_TxReady+0x154>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80027b0:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <USBD_DFU_EP0_TxReady+0x158>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80027b2:	68ca      	ldr	r2, [r1, #12]
 80027b4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60cb      	str	r3, [r1, #12]
 80027bc:	f3bf 8f4f 	dsb	sy
    __NOP();
 80027c0:	bf00      	nop
 80027c2:	e7fd      	b.n	80027c0 <USBD_DFU_EP0_TxReady+0x148>
 80027c4:	003ffffe 	.word	0x003ffffe
 80027c8:	20000048 	.word	0x20000048
 80027cc:	e000ed00 	.word	0xe000ed00
 80027d0:	05fa0004 	.word	0x05fa0004

080027d4 <USBD_DFU_DeInit>:
{
 80027d4:	b538      	push	{r3, r4, r5, lr}
  hdfu->dev_state = DFU_STATE_IDLE;
 80027d6:	2202      	movs	r2, #2
  hdfu->wblock_num = 0U;
 80027d8:	2400      	movs	r4, #0
{
 80027da:	4605      	mov	r5, r0
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 80027dc:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  hdfu->dev_state = DFU_STATE_IDLE;
 80027e0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80027e4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80027e8:	f883 4410 	strb.w	r4, [r3, #1040]	; 0x410
  hdfu->wblock_num = 0U;
 80027ec:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 80027f0:	f8c3 4404 	str.w	r4, [r3, #1028]	; 0x404
    ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 80027f4:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80027fc:	f8d5 02b8 	ldr.w	r0, [r5, #696]	; 0x2b8
 8002800:	f001 f83a 	bl	8003878 <free>
    pdev->pClassData = NULL;
 8002804:	f8c5 42b8 	str.w	r4, [r5, #696]	; 0x2b8
}
 8002808:	4620      	mov	r0, r4
 800280a:	bd38      	pop	{r3, r4, r5, pc}

0800280c <USBD_DFU_Init>:
{
 800280c:	b510      	push	{r4, lr}
 800280e:	4604      	mov	r4, r0
  pdev->pClassData = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8002810:	f240 401c 	movw	r0, #1052	; 0x41c
 8002814:	f001 f828 	bl	8003868 <malloc>
 8002818:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 800281c:	b908      	cbnz	r0, 8002822 <USBD_DFU_Init+0x16>
    return USBD_FAIL;
 800281e:	2002      	movs	r0, #2
}
 8002820:	bd10      	pop	{r4, pc}
    hdfu->wblock_num = 0U;
 8002822:	2300      	movs	r3, #0
    hdfu->dev_state = DFU_STATE_IDLE;
 8002824:	2202      	movs	r2, #2
    hdfu->wlength = 0U;
 8002826:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 800282a:	f8c0 340c 	str.w	r3, [r0, #1036]	; 0x40c
    hdfu->alt_setting = 0U;
 800282e:	f8c0 3410 	str.w	r3, [r0, #1040]	; 0x410
    hdfu->wblock_num = 0U;
 8002832:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
 8002836:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 800283a:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
    hdfu->dev_state = DFU_STATE_IDLE;
 800283e:	f8a0 2418 	strh.w	r2, [r0, #1048]	; 0x418
    hdfu->dev_status[3] = 0U;
 8002842:	f8a0 2414 	strh.w	r2, [r0, #1044]	; 0x414
    hdfu->wlength = 0U;
 8002846:	f8c0 1408 	str.w	r1, [r0, #1032]	; 0x408
    if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4798      	blx	r3
 800284e:	2800      	cmp	r0, #0
 8002850:	d0e6      	beq.n	8002820 <USBD_DFU_Init+0x14>
 8002852:	e7e4      	b.n	800281e <USBD_DFU_Init+0x12>

08002854 <USBD_DFU_Setup>:
  uint16_t status_info = 0U;
 8002854:	2300      	movs	r3, #0
{
 8002856:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint16_t status_info = 0U;
 8002858:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800285c:	780b      	ldrb	r3, [r1, #0]
{
 800285e:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002860:	f013 0360 	ands.w	r3, r3, #96	; 0x60
  hdfu = (USBD_DFU_HandleTypeDef *) pdev->pClassData;
 8002864:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002868:	f000 8146 	beq.w	8002af8 <USBD_DFU_Setup+0x2a4>
 800286c:	2b20      	cmp	r3, #32
 800286e:	f040 8156 	bne.w	8002b1e <USBD_DFU_Setup+0x2ca>
      switch (req->bRequest)
 8002872:	784b      	ldrb	r3, [r1, #1]
 8002874:	2b06      	cmp	r3, #6
 8002876:	f200 8152 	bhi.w	8002b1e <USBD_DFU_Setup+0x2ca>
 800287a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800287e:	0117      	.short	0x0117
 8002880:	00330007 	.word	0x00330007
 8002884:	00e4009a 	.word	0x00e4009a
 8002888:	00fe00fa 	.word	0x00fe00fa
  if (req->wLength > 0U)
 800288c:	88ca      	ldrh	r2, [r1, #6]
 800288e:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8002892:	b19a      	cbz	r2, 80028bc <USBD_DFU_Setup+0x68>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8002894:	2b02      	cmp	r3, #2
 8002896:	d001      	beq.n	800289c <USBD_DFU_Setup+0x48>
 8002898:	2b05      	cmp	r3, #5
 800289a:	d174      	bne.n	8002986 <USBD_DFU_Setup+0x132>
      hdfu->wblock_num = req->wValue;
 800289c:	884b      	ldrh	r3, [r1, #2]
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 800289e:	4630      	mov	r0, r6
      hdfu->wblock_num = req->wValue;
 80028a0:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 80028a4:	2303      	movs	r3, #3
      hdfu->wlength = req->wLength;
 80028a6:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 80028aa:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 80028ae:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
      USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8,
 80028b2:	4621      	mov	r1, r4
 80028b4:	f000 fd00 	bl	80032b8 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 80028b8:	2000      	movs	r0, #0
 80028ba:	e011      	b.n	80028e0 <USBD_DFU_Setup+0x8c>
    if (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE || hdfu->dev_state == DFU_STATE_IDLE)
 80028bc:	2b05      	cmp	r3, #5
 80028be:	d001      	beq.n	80028c4 <USBD_DFU_Setup+0x70>
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d160      	bne.n	8002986 <USBD_DFU_Setup+0x132>
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80028c4:	f44f 7383 	mov.w	r3, #262	; 0x106
      hdfu->dev_status[1] = 0U;
 80028c8:	2000      	movs	r0, #0
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 80028ca:	f8a4 3418 	strh.w	r3, [r4, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 80028ce:	2306      	movs	r3, #6
      hdfu->dev_status[1] = 0U;
 80028d0:	f884 0411 	strb.w	r0, [r4, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 80028d4:	f884 0412 	strb.w	r0, [r4, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 80028d8:	f884 0413 	strb.w	r0, [r4, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 80028dc:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
}
 80028e0:	b003      	add	sp, #12
 80028e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (req->wLength > 0U)
 80028e4:	88ca      	ldrh	r2, [r1, #6]
 80028e6:	2a00      	cmp	r2, #0
 80028e8:	d057      	beq.n	800299a <USBD_DFU_Setup+0x146>
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80028ea:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d001      	beq.n	80028f6 <USBD_DFU_Setup+0xa2>
 80028f2:	2b09      	cmp	r3, #9
 80028f4:	d14b      	bne.n	800298e <USBD_DFU_Setup+0x13a>
      hdfu->wblock_num = req->wValue;
 80028f6:	884f      	ldrh	r7, [r1, #2]
      hdfu->wlength = req->wLength;
 80028f8:	f8c4 2404 	str.w	r2, [r4, #1028]	; 0x404
      hdfu->wblock_num = req->wValue;
 80028fc:	f8c4 7400 	str.w	r7, [r4, #1024]	; 0x400
      if (hdfu->wblock_num == 0U)
 8002900:	b9c7      	cbnz	r7, 8002934 <USBD_DFU_Setup+0xe0>
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8002902:	2a04      	cmp	r2, #4
 8002904:	bf34      	ite	cc
 8002906:	2309      	movcc	r3, #9
 8002908:	2302      	movcs	r3, #2
 800290a:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
        hdfu->dev_status[4] = hdfu->dev_state;
 800290e:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8002912:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 8002916:	8023      	strh	r3, [r4, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8002918:	2341      	movs	r3, #65	; 0x41
        USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 800291a:	2203      	movs	r2, #3
 800291c:	4621      	mov	r1, r4
        hdfu->dev_status[1] = 0U;
 800291e:	f884 7411 	strb.w	r7, [r4, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8002922:	f884 7412 	strb.w	r7, [r4, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8002926:	f884 7413 	strb.w	r7, [r4, #1043]	; 0x413
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 800292a:	70a3      	strb	r3, [r4, #2]
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800292c:	4630      	mov	r0, r6
 800292e:	f000 fcae 	bl	800328e <USBD_CtlSendData>
 8002932:	e7c1      	b.n	80028b8 <USBD_DFU_Setup+0x64>
      else if (hdfu->wblock_num > 1U)
 8002934:	2f01      	cmp	r7, #1
 8002936:	f04f 0500 	mov.w	r5, #0
 800293a:	d019      	beq.n	8002970 <USBD_DFU_Setup+0x11c>
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800293c:	2309      	movs	r3, #9
        hdfu->dev_status[1] = 0U;
 800293e:	f884 5411 	strb.w	r5, [r4, #1041]	; 0x411
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8002942:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
        hdfu->dev_status[4] = hdfu->dev_state;
 8002946:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
        hdfu->dev_status[2] = 0U;
 800294a:	f884 5412 	strb.w	r5, [r4, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800294e:	f884 5413 	strb.w	r5, [r4, #1043]	; 0x413
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8002952:	4b85      	ldr	r3, [pc, #532]	; (8002b68 <USBD_DFU_Setup+0x314>)
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8002954:	f8d6 12bc 	ldr.w	r1, [r6, #700]	; 0x2bc
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;  /* Change is Accelerated*/
 8002958:	f8d4 0408 	ldr.w	r0, [r4, #1032]	; 0x408
 800295c:	443b      	add	r3, r7
        phaddr = ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800295e:	eb00 2083 	add.w	r0, r0, r3, lsl #10
 8002962:	694f      	ldr	r7, [r1, #20]
 8002964:	4621      	mov	r1, r4
 8002966:	47b8      	blx	r7
        USBD_CtlSendData(pdev, phaddr, (uint16_t)hdfu->wlength);
 8002968:	f8b4 2404 	ldrh.w	r2, [r4, #1028]	; 0x404
 800296c:	4601      	mov	r1, r0
 800296e:	e7dd      	b.n	800292c <USBD_DFU_Setup+0xd8>
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8002970:	230f      	movs	r3, #15
        hdfu->dev_status[1] = 0U;
 8002972:	f884 5411 	strb.w	r5, [r4, #1041]	; 0x411
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8002976:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
        hdfu->dev_status[2] = 0U;
 800297a:	f884 5412 	strb.w	r5, [r4, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800297e:	f884 5413 	strb.w	r5, [r4, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8002982:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
      USBD_CtlError(pdev, req);
 8002986:	4630      	mov	r0, r6
 8002988:	f000 fc5a 	bl	8003240 <USBD_CtlError>
 800298c:	e794      	b.n	80028b8 <USBD_DFU_Setup+0x64>
      hdfu->wlength = 0U;
 800298e:	2500      	movs	r5, #0
 8002990:	f8c4 5404 	str.w	r5, [r4, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 8002994:	f8c4 5400 	str.w	r5, [r4, #1024]	; 0x400
 8002998:	e7f5      	b.n	8002986 <USBD_DFU_Setup+0x132>
    hdfu->dev_state = DFU_STATE_IDLE;
 800299a:	2302      	movs	r3, #2
    hdfu->dev_status[1] = 0U;
 800299c:	f884 2411 	strb.w	r2, [r4, #1041]	; 0x411
    hdfu->dev_state = DFU_STATE_IDLE;
 80029a0:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[2] = 0U;
 80029a4:	f884 2412 	strb.w	r2, [r4, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80029a8:	f884 2413 	strb.w	r2, [r4, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80029ac:	f884 3414 	strb.w	r3, [r4, #1044]	; 0x414
 80029b0:	e782      	b.n	80028b8 <USBD_DFU_Setup+0x64>
  switch (hdfu->dev_state)
 80029b2:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 80029b6:	f504 6582 	add.w	r5, r4, #1040	; 0x410
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d004      	beq.n	80029c8 <USBD_DFU_Setup+0x174>
 80029be:	2b06      	cmp	r3, #6
 80029c0:	d028      	beq.n	8002a14 <USBD_DFU_Setup+0x1c0>
  USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 80029c2:	2206      	movs	r2, #6
 80029c4:	4629      	mov	r1, r5
 80029c6:	e7b1      	b.n	800292c <USBD_DFU_Setup+0xd8>
      if (hdfu->wlength != 0U)
 80029c8:	f8d4 3404 	ldr.w	r3, [r4, #1028]	; 0x404
 80029cc:	b1e3      	cbz	r3, 8002a08 <USBD_DFU_Setup+0x1b4>
        hdfu->dev_status[1] = 0U;
 80029ce:	2300      	movs	r3, #0
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 80029d0:	2204      	movs	r2, #4
        hdfu->dev_status[1] = 0U;
 80029d2:	f884 3411 	strb.w	r3, [r4, #1041]	; 0x411
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 80029d6:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
        hdfu->dev_status[2] = 0U;
 80029da:	f884 3412 	strb.w	r3, [r4, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80029de:	f884 3413 	strb.w	r3, [r4, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80029e2:	f884 2414 	strb.w	r2, [r4, #1044]	; 0x414
 80029e6:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 80029ea:	f8d4 1400 	ldr.w	r1, [r4, #1024]	; 0x400
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	f8d4 0408 	ldr.w	r0, [r4, #1032]	; 0x408
 80029f4:	b929      	cbnz	r1, 8002a02 <USBD_DFU_Setup+0x1ae>
 80029f6:	7822      	ldrb	r2, [r4, #0]
 80029f8:	2a41      	cmp	r2, #65	; 0x41
 80029fa:	d102      	bne.n	8002a02 <USBD_DFU_Setup+0x1ae>
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 80029fc:	462a      	mov	r2, r5
          ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 80029fe:	4798      	blx	r3
 8002a00:	e7df      	b.n	80029c2 <USBD_DFU_Setup+0x16e>
 8002a02:	462a      	mov	r2, r5
 8002a04:	2101      	movs	r1, #1
 8002a06:	e7fa      	b.n	80029fe <USBD_DFU_Setup+0x1aa>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8002a08:	2205      	movs	r2, #5
          hdfu->dev_state = DFU_STATE_IDLE;
 8002a0a:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 8002a0e:	f884 3411 	strb.w	r3, [r4, #1041]	; 0x411
 8002a12:	e009      	b.n	8002a28 <USBD_DFU_Setup+0x1d4>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8002a14:	f894 3419 	ldrb.w	r3, [r4, #1049]	; 0x419
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d10c      	bne.n	8002a36 <USBD_DFU_Setup+0x1e2>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8002a1c:	2207      	movs	r2, #7
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8002a1e:	f884 3411 	strb.w	r3, [r4, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8002a22:	2300      	movs	r3, #0
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8002a24:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
          hdfu->dev_status[2] = 0U;
 8002a28:	f884 3412 	strb.w	r3, [r4, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 8002a2c:	f884 3413 	strb.w	r3, [r4, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 8002a30:	f884 2414 	strb.w	r2, [r4, #1044]	; 0x414
 8002a34:	e7c5      	b.n	80029c2 <USBD_DFU_Setup+0x16e>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1c3      	bne.n	80029c2 <USBD_DFU_Setup+0x16e>
            ((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U))
 8002a3a:	4a4c      	ldr	r2, [pc, #304]	; (8002b6c <USBD_DFU_Setup+0x318>)
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8002a3c:	7d12      	ldrb	r2, [r2, #20]
 8002a3e:	0752      	lsls	r2, r2, #29
 8002a40:	d5bf      	bpl.n	80029c2 <USBD_DFU_Setup+0x16e>
          hdfu->dev_state = DFU_STATE_IDLE;
 8002a42:	2202      	movs	r2, #2
 8002a44:	e7e1      	b.n	8002a0a <USBD_DFU_Setup+0x1b6>
  if (hdfu->dev_state == DFU_STATE_ERROR)
 8002a46:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8002a4a:	2b0a      	cmp	r3, #10
 8002a4c:	d108      	bne.n	8002a60 <USBD_DFU_Setup+0x20c>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002a4e:	2302      	movs	r3, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 8002a50:	2000      	movs	r0, #0
    hdfu->dev_state = DFU_STATE_IDLE;
 8002a52:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;/*bStatus*/
 8002a56:	f8c4 0410 	str.w	r0, [r4, #1040]	; 0x410
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8002a5a:	f8a4 3414 	strh.w	r3, [r4, #1044]	; 0x414
 8002a5e:	e73f      	b.n	80028e0 <USBD_DFU_Setup+0x8c>
    hdfu->dev_state = DFU_STATE_ERROR;
 8002a60:	230a      	movs	r3, #10
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 8002a62:	220e      	movs	r2, #14
    hdfu->dev_state = DFU_STATE_ERROR;
 8002a64:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN;/*bStatus*/
 8002a68:	f8c4 2410 	str.w	r2, [r4, #1040]	; 0x410
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8002a6c:	f8a4 3414 	strh.w	r3, [r4, #1044]	; 0x414
 8002a70:	e722      	b.n	80028b8 <USBD_DFU_Setup+0x64>
  USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8002a72:	2201      	movs	r2, #1
 8002a74:	f504 6183 	add.w	r1, r4, #1048	; 0x418
 8002a78:	e758      	b.n	800292c <USBD_DFU_Setup+0xd8>
  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8002a7a:	f894 3418 	ldrb.w	r3, [r4, #1048]	; 0x418
 8002a7e:	2b09      	cmp	r3, #9
 8002a80:	f63f af1a 	bhi.w	80028b8 <USBD_DFU_Setup+0x64>
 8002a84:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8002a88:	40d8      	lsrs	r0, r3
 8002a8a:	43c0      	mvns	r0, r0
 8002a8c:	f010 0001 	ands.w	r0, r0, #1
 8002a90:	f47f af12 	bne.w	80028b8 <USBD_DFU_Setup+0x64>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002a94:	2302      	movs	r3, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002a96:	f8c4 0410 	str.w	r0, [r4, #1040]	; 0x410
    hdfu->dev_state = DFU_STATE_IDLE;
 8002a9a:	f884 3418 	strb.w	r3, [r4, #1048]	; 0x418
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8002a9e:	f8a4 3414 	strh.w	r3, [r4, #1044]	; 0x414
    hdfu->wblock_num = 0U;
 8002aa2:	f8c4 0400 	str.w	r0, [r4, #1024]	; 0x400
    hdfu->wlength = 0U;
 8002aa6:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
 8002aaa:	e719      	b.n	80028e0 <USBD_DFU_Setup+0x8c>
  if (hdfu->dev_state == DFU_STATE_IDLE || hdfu->dev_state == DFU_STATE_DNLOAD_SYNC
 8002aac:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 8002ab0:	2a09      	cmp	r2, #9
 8002ab2:	d811      	bhi.n	8002ad8 <USBD_DFU_Setup+0x284>
 8002ab4:	f44f 731b 	mov.w	r3, #620	; 0x26c
 8002ab8:	40d3      	lsrs	r3, r2
 8002aba:	43db      	mvns	r3, r3
 8002abc:	f013 0301 	ands.w	r3, r3, #1
 8002ac0:	d10a      	bne.n	8002ad8 <USBD_DFU_Setup+0x284>
    hdfu->dev_state = DFU_STATE_IDLE;
 8002ac2:	2202      	movs	r2, #2
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8002ac4:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
    hdfu->dev_state = DFU_STATE_IDLE;
 8002ac8:	f884 2418 	strb.w	r2, [r4, #1048]	; 0x418
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8002acc:	f8a4 2414 	strh.w	r2, [r4, #1044]	; 0x414
    hdfu->wblock_num = 0U;
 8002ad0:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
    hdfu->wlength = 0U;
 8002ad4:	f8c4 3404 	str.w	r3, [r4, #1028]	; 0x404
  if ((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK)
 8002ad8:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <USBD_DFU_Setup+0x318>)
 8002ada:	7d58      	ldrb	r0, [r3, #21]
 8002adc:	f010 0410 	ands.w	r4, r0, #16
 8002ae0:	d006      	beq.n	8002af0 <USBD_DFU_Setup+0x29c>
    USBD_Stop(pdev);
 8002ae2:	4630      	mov	r0, r6
 8002ae4:	f000 f874 	bl	8002bd0 <USBD_Stop>
    USBD_Start(pdev);
 8002ae8:	4630      	mov	r0, r6
 8002aea:	f000 f86c 	bl	8002bc6 <USBD_Start>
 8002aee:	e6e3      	b.n	80028b8 <USBD_DFU_Setup+0x64>
    USBD_Delay((uint32_t)req->wValue);
 8002af0:	8848      	ldrh	r0, [r1, #2]
 8002af2:	f7fd fe63 	bl	80007bc <HAL_Delay>
 8002af6:	e6df      	b.n	80028b8 <USBD_DFU_Setup+0x64>
      switch (req->bRequest)
 8002af8:	784b      	ldrb	r3, [r1, #1]
 8002afa:	2b0b      	cmp	r3, #11
 8002afc:	d80f      	bhi.n	8002b1e <USBD_DFU_Setup+0x2ca>
 8002afe:	e8df f003 	tbb	[pc, r3]
 8002b02:	0e06      	.short	0x0e06
 8002b04:	0e0e0e0e 	.word	0x0e0e0e0e
 8002b08:	0e0e0e13 	.word	0x0e0e0e13
 8002b0c:	2820      	.short	0x2820
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002b0e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d103      	bne.n	8002b1e <USBD_DFU_Setup+0x2ca>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8002b16:	2202      	movs	r2, #2
 8002b18:	f10d 0106 	add.w	r1, sp, #6
 8002b1c:	e706      	b.n	800292c <USBD_DFU_Setup+0xd8>
            USBD_CtlError(pdev, req);
 8002b1e:	4630      	mov	r0, r6
 8002b20:	f000 fb8e 	bl	8003240 <USBD_CtlError>
            ret = USBD_FAIL;
 8002b24:	2002      	movs	r0, #2
 8002b26:	e6db      	b.n	80028e0 <USBD_DFU_Setup+0x8c>
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8002b28:	884b      	ldrh	r3, [r1, #2]
 8002b2a:	0a1b      	lsrs	r3, r3, #8
 8002b2c:	2b21      	cmp	r3, #33	; 0x21
 8002b2e:	d105      	bne.n	8002b3c <USBD_DFU_Setup+0x2e8>
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8002b30:	88ca      	ldrh	r2, [r1, #6]
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8002b32:	490f      	ldr	r1, [pc, #60]	; (8002b70 <USBD_DFU_Setup+0x31c>)
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8002b34:	2a09      	cmp	r2, #9
 8002b36:	bf28      	it	cs
 8002b38:	2209      	movcs	r2, #9
 8002b3a:	e6f7      	b.n	800292c <USBD_DFU_Setup+0xd8>
  uint16_t len = 0U;
 8002b3c:	2200      	movs	r2, #0
  uint8_t *pbuf = 0U;
 8002b3e:	4611      	mov	r1, r2
 8002b40:	e6f4      	b.n	800292c <USBD_DFU_Setup+0xd8>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002b42:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002b46:	2b03      	cmp	r3, #3
 8002b48:	d1e9      	bne.n	8002b1e <USBD_DFU_Setup+0x2ca>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hdfu->alt_setting, 1U);
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8002b50:	e6ec      	b.n	800292c <USBD_DFU_Setup+0xd8>
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8002b52:	7888      	ldrb	r0, [r1, #2]
 8002b54:	2800      	cmp	r0, #0
 8002b56:	d1e2      	bne.n	8002b1e <USBD_DFU_Setup+0x2ca>
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002b58:	f896 329c 	ldrb.w	r3, [r6, #668]	; 0x29c
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d1de      	bne.n	8002b1e <USBD_DFU_Setup+0x2ca>
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8002b60:	f8c4 040c 	str.w	r0, [r4, #1036]	; 0x40c
 8002b64:	e6bc      	b.n	80028e0 <USBD_DFU_Setup+0x8c>
 8002b66:	bf00      	nop
 8002b68:	003ffffe 	.word	0x003ffffe
 8002b6c:	20000048 	.word	0x20000048
 8002b70:	2000005a 	.word	0x2000005a

08002b74 <USBD_DFU_IsoOutIncomplete>:
 8002b74:	2000      	movs	r0, #0
 8002b76:	4770      	bx	lr

08002b78 <USBD_DFU_DataOut>:
 8002b78:	2000      	movs	r0, #0
 8002b7a:	4770      	bx	lr

08002b7c <USBD_DFU_IsoINIncomplete>:
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	4770      	bx	lr

08002b80 <USBD_DFU_SOF>:
 8002b80:	2000      	movs	r0, #0
 8002b82:	4770      	bx	lr

08002b84 <USBD_DFU_RegisterMedia>:
  if (fops != NULL)
 8002b84:	b109      	cbz	r1, 8002b8a <USBD_DFU_RegisterMedia+0x6>
    pdev->pUserData = fops;
 8002b86:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
}
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	4770      	bx	lr

08002b8e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002b8e:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8002b90:	b180      	cbz	r0, 8002bb4 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8002b92:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002b96:	b113      	cbz	r3, 8002b9e <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8002b9e:	b109      	cbz	r1, 8002ba4 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002ba0:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002ba4:	2301      	movs	r3, #1
  pdev->id = id;
 8002ba6:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002ba8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002bac:	f000 fd80 	bl	80036b0 <USBD_LL_Init>

  return USBD_OK;
 8002bb0:	2000      	movs	r0, #0
}
 8002bb2:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8002bb4:	2002      	movs	r0, #2
 8002bb6:	e7fc      	b.n	8002bb2 <USBD_Init+0x24>

08002bb8 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8002bb8:	b119      	cbz	r1, 8002bc2 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002bba:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8002bc2:	2002      	movs	r0, #2
  }

  return status;
}
 8002bc4:	4770      	bx	lr

08002bc6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8002bc6:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8002bc8:	f000 fda0 	bl	800370c <USBD_LL_Start>

  return USBD_OK;
}
 8002bcc:	2000      	movs	r0, #0
 8002bce:	bd08      	pop	{r3, pc}

08002bd0 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8002bd0:	b510      	push	{r4, lr}
 8002bd2:	4604      	mov	r4, r0
  /* Free Class Resources */
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002bd4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002bd8:	7901      	ldrb	r1, [r0, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	4798      	blx	r3

  /* Stop the low level driver */
  USBD_LL_Stop(pdev);
 8002bde:	4620      	mov	r0, r4
 8002be0:	f000 fda2 	bl	8003728 <USBD_LL_Stop>

  return USBD_OK;
}
 8002be4:	2000      	movs	r0, #0
 8002be6:	bd10      	pop	{r4, pc}

08002be8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002be8:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8002bea:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002bee:	b90b      	cbnz	r3, 8002bf4 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8002bf0:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 8002bf2:	bd08      	pop	{r3, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4798      	blx	r3
 8002bf8:	2800      	cmp	r0, #0
 8002bfa:	d0fa      	beq.n	8002bf2 <USBD_SetClassConfig+0xa>
 8002bfc:	e7f8      	b.n	8002bf0 <USBD_SetClassConfig+0x8>

08002bfe <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002bfe:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8002c00:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4798      	blx	r3

  return USBD_OK;
}
 8002c08:	2000      	movs	r0, #0
 8002c0a:	bd08      	pop	{r3, pc}

08002c0c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002c0c:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002c0e:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8002c12:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002c14:	4628      	mov	r0, r5
 8002c16:	f000 faff 	bl	8003218 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8002c1a:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8002c1c:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8002c20:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8002c24:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8002c28:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8002c2c:	f001 031f 	and.w	r3, r1, #31
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d00e      	beq.n	8002c52 <USBD_LL_SetupStage+0x46>
 8002c34:	d307      	bcc.n	8002c46 <USBD_LL_SetupStage+0x3a>
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d010      	beq.n	8002c5c <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8002c3a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002c3e:	4620      	mov	r0, r4
 8002c40:	f000 fd90 	bl	8003764 <USBD_LL_StallEP>
      break;
 8002c44:	e003      	b.n	8002c4e <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8002c46:	4629      	mov	r1, r5
 8002c48:	4620      	mov	r0, r4
 8002c4a:	f000 f907 	bl	8002e5c <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8002c4e:	2000      	movs	r0, #0
 8002c50:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8002c52:	4629      	mov	r1, r5
 8002c54:	4620      	mov	r0, r4
 8002c56:	f000 fa31 	bl	80030bc <USBD_StdItfReq>
      break;
 8002c5a:	e7f8      	b.n	8002c4e <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8002c5c:	4629      	mov	r1, r5
 8002c5e:	4620      	mov	r0, r4
 8002c60:	f000 fa51 	bl	8003106 <USBD_StdEPReq>
      break;
 8002c64:	e7f3      	b.n	8002c4e <USBD_LL_SetupStage+0x42>

08002c66 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8002c66:	b570      	push	{r4, r5, r6, lr}
 8002c68:	4605      	mov	r5, r0
 8002c6a:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8002c6c:	bb49      	cbnz	r1, 8002cc2 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002c6e:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d11e      	bne.n	8002cb4 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 8002c76:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8002c7a:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d90b      	bls.n	8002c9a <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 8002c82:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 8002c84:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8002c86:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8002c8a:	bf8c      	ite	hi
 8002c8c:	b29a      	uxthhi	r2, r3
 8002c8e:	b292      	uxthls	r2, r2
 8002c90:	4631      	mov	r1, r6
 8002c92:	f000 fb20 	bl	80032d6 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8002c96:	2000      	movs	r0, #0
}
 8002c98:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8002c9a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	b123      	cbz	r3, 8002cac <USBD_LL_DataOutStage+0x46>
 8002ca2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002ca6:	2a03      	cmp	r2, #3
 8002ca8:	d100      	bne.n	8002cac <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8002caa:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002cac:	4628      	mov	r0, r5
 8002cae:	f000 fb1a 	bl	80032e6 <USBD_CtlSendStatus>
 8002cb2:	e7f0      	b.n	8002c96 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8002cb4:	2b05      	cmp	r3, #5
 8002cb6:	d1ee      	bne.n	8002c96 <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8002cb8:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8002cbc:	f000 fd52 	bl	8003764 <USBD_LL_StallEP>
 8002cc0:	e7e9      	b.n	8002c96 <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8002cc2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	b12b      	cbz	r3, 8002cd6 <USBD_LL_DataOutStage+0x70>
 8002cca:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002cce:	2a03      	cmp	r2, #3
 8002cd0:	d101      	bne.n	8002cd6 <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8002cd2:	4798      	blx	r3
 8002cd4:	e7df      	b.n	8002c96 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8002cd6:	2002      	movs	r0, #2
 8002cd8:	e7de      	b.n	8002c98 <USBD_LL_DataOutStage+0x32>

08002cda <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8002cda:	b570      	push	{r4, r5, r6, lr}
 8002cdc:	4613      	mov	r3, r2
 8002cde:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8002ce0:	460e      	mov	r6, r1
 8002ce2:	2900      	cmp	r1, #0
 8002ce4:	d147      	bne.n	8002d76 <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8002ce6:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8002cea:	2a02      	cmp	r2, #2
 8002cec:	d13c      	bne.n	8002d68 <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8002cee:	e9d0 5208 	ldrd	r5, r2, [r0, #32]
 8002cf2:	4295      	cmp	r5, r2
 8002cf4:	d913      	bls.n	8002d1e <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8002cf6:	1aaa      	subs	r2, r5, r2
 8002cf8:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	b292      	uxth	r2, r2
 8002cfe:	f000 fad3 	bl	80032a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002d02:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002d04:	461a      	mov	r2, r3
 8002d06:	4619      	mov	r1, r3
 8002d08:	4620      	mov	r0, r4
 8002d0a:	f000 fd75 	bl	80037f8 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8002d0e:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8002d12:	2000      	movs	r0, #0
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8002d18:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8002d1c:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8002d1e:	69c3      	ldr	r3, [r0, #28]
 8002d20:	fbb3 f5f2 	udiv	r5, r3, r2
 8002d24:	fb02 3515 	mls	r5, r2, r5, r3
 8002d28:	b965      	cbnz	r5, 8002d44 <USBD_LL_DataInStage+0x6a>
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d80a      	bhi.n	8002d44 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8002d2e:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d206      	bcs.n	8002d44 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8002d36:	462a      	mov	r2, r5
 8002d38:	f000 fab6 	bl	80032a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8002d3c:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8002d40:	462b      	mov	r3, r5
 8002d42:	e7df      	b.n	8002d04 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8002d44:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	b12b      	cbz	r3, 8002d58 <USBD_LL_DataInStage+0x7e>
 8002d4c:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8002d50:	2a03      	cmp	r2, #3
 8002d52:	d101      	bne.n	8002d58 <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8002d54:	4620      	mov	r0, r4
 8002d56:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8002d58:	2180      	movs	r1, #128	; 0x80
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f000 fd02 	bl	8003764 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8002d60:	4620      	mov	r0, r4
 8002d62:	f000 facb 	bl	80032fc <USBD_CtlReceiveStatus>
 8002d66:	e7d2      	b.n	8002d0e <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8002d68:	f032 0304 	bics.w	r3, r2, #4
 8002d6c:	d1cf      	bne.n	8002d0e <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8002d6e:	2180      	movs	r1, #128	; 0x80
 8002d70:	f000 fcf8 	bl	8003764 <USBD_LL_StallEP>
 8002d74:	e7cb      	b.n	8002d0e <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8002d76:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	b133      	cbz	r3, 8002d8c <USBD_LL_DataInStage+0xb2>
 8002d7e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002d82:	2a03      	cmp	r2, #3
 8002d84:	d102      	bne.n	8002d8c <USBD_LL_DataInStage+0xb2>
    pdev->pClass->DataIn(pdev, epnum);
 8002d86:	4798      	blx	r3
  return USBD_OK;
 8002d88:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8002d8a:	e7c7      	b.n	8002d1c <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8002d8c:	2002      	movs	r0, #2
 8002d8e:	e7c5      	b.n	8002d1c <USBD_LL_DataInStage+0x42>

08002d90 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002d90:	2200      	movs	r2, #0
{
 8002d92:	b570      	push	{r4, r5, r6, lr}
 8002d94:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002d96:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002d98:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	2340      	movs	r3, #64	; 0x40
 8002d9e:	f000 fcd1 	bl	8003744 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002da2:	4633      	mov	r3, r6
 8002da4:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8002da6:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002daa:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8002dae:	2200      	movs	r2, #0
 8002db0:	4620      	mov	r0, r4
 8002db2:	f000 fcc7 	bl	8003744 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8002db6:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8002db8:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8002dbc:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002dbe:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002dc0:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8002dc4:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8002dc8:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8002dca:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8002dce:	b123      	cbz	r3, 8002dda <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002dd0:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	4798      	blx	r3
  }

  return USBD_OK;
}
 8002dda:	2000      	movs	r0, #0
 8002ddc:	bd70      	pop	{r4, r5, r6, pc}

08002dde <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002dde:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8002de0:	2000      	movs	r0, #0
 8002de2:	4770      	bx	lr

08002de4 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002de4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002de8:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002dec:	2304      	movs	r3, #4
 8002dee:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8002df2:	2000      	movs	r0, #0
 8002df4:	4770      	bx	lr

08002df6 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8002df6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002dfa:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8002dfc:	bf04      	itt	eq
 8002dfe:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8002e02:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8002e06:	2000      	movs	r0, #0
 8002e08:	4770      	bx	lr

08002e0a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8002e0a:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002e0c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8002e10:	2a03      	cmp	r2, #3
 8002e12:	d104      	bne.n	8002e1e <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8002e14:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	b103      	cbz	r3, 8002e1e <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8002e1c:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8002e1e:	2000      	movs	r0, #0
 8002e20:	bd08      	pop	{r3, pc}

08002e22 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8002e22:	2000      	movs	r0, #0
 8002e24:	4770      	bx	lr

08002e26 <USBD_LL_IsoOUTIncomplete>:
 8002e26:	2000      	movs	r0, #0
 8002e28:	4770      	bx	lr

08002e2a <USBD_LL_DevConnected>:
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	4770      	bx	lr

08002e2e <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002e2e:	2201      	movs	r2, #1
{
 8002e30:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002e32:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8002e36:	f8d0 22b4 	ldr.w	r2, [r0, #692]	; 0x2b4
 8002e3a:	7901      	ldrb	r1, [r0, #4]
 8002e3c:	6852      	ldr	r2, [r2, #4]
 8002e3e:	4790      	blx	r2

  return USBD_OK;
}
 8002e40:	2000      	movs	r0, #0
 8002e42:	bd08      	pop	{r3, pc}

08002e44 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8002e44:	b510      	push	{r4, lr}
 8002e46:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8002e48:	2180      	movs	r1, #128	; 0x80
 8002e4a:	f000 fc8b 	bl	8003764 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8002e4e:	4620      	mov	r0, r4
}
 8002e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8002e54:	2100      	movs	r1, #0
 8002e56:	f000 bc85 	b.w	8003764 <USBD_LL_StallEP>
	...

08002e5c <USBD_StdDevReq>:
{
 8002e5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e5e:	780b      	ldrb	r3, [r1, #0]
{
 8002e60:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e62:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002e66:	2b20      	cmp	r3, #32
{
 8002e68:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002e6a:	d012      	beq.n	8002e92 <USBD_StdDevReq+0x36>
 8002e6c:	2b40      	cmp	r3, #64	; 0x40
 8002e6e:	d010      	beq.n	8002e92 <USBD_StdDevReq+0x36>
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d15b      	bne.n	8002f2c <USBD_StdDevReq+0xd0>
      switch (req->bRequest)
 8002e74:	784b      	ldrb	r3, [r1, #1]
 8002e76:	2b09      	cmp	r3, #9
 8002e78:	d858      	bhi.n	8002f2c <USBD_StdDevReq+0xd0>
 8002e7a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002e7e:	00f4      	.short	0x00f4
 8002e80:	00570110 	.word	0x00570110
 8002e84:	00570109 	.word	0x00570109
 8002e88:	0013008d 	.word	0x0013008d
 8002e8c:	00dc0057 	.word	0x00dc0057
 8002e90:	00a9      	.short	0x00a9
      pdev->pClass->Setup(pdev, req);
 8002e92:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8002e96:	4629      	mov	r1, r5
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	4620      	mov	r0, r4
 8002e9c:	4798      	blx	r3
}
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	b003      	add	sp, #12
 8002ea2:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8002ea4:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 8002ea6:	8849      	ldrh	r1, [r1, #2]
  uint16_t len = 0U;
 8002ea8:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8002eac:	0a0b      	lsrs	r3, r1, #8
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	2b06      	cmp	r3, #6
 8002eb2:	d83b      	bhi.n	8002f2c <USBD_StdDevReq+0xd0>
 8002eb4:	e8df f003 	tbb	[pc, r3]
 8002eb8:	3a2d2004 	.word	0x3a2d2004
 8002ebc:	5b3a      	.short	0x5b3a
 8002ebe:	65          	.byte	0x65
 8002ebf:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8002ec0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002ec4:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002ec6:	f10d 0106 	add.w	r1, sp, #6
 8002eca:	7c20      	ldrb	r0, [r4, #16]
 8002ecc:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8002ece:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002ed2:	b152      	cbz	r2, 8002eea <USBD_StdDevReq+0x8e>
 8002ed4:	88eb      	ldrh	r3, [r5, #6]
 8002ed6:	b143      	cbz	r3, 8002eea <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	bf28      	it	cs
 8002edc:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8002ede:	4601      	mov	r1, r0
 8002ee0:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8002ee2:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8002ee6:	f000 f9d2 	bl	800328e <USBD_CtlSendData>
    if (req->wLength == 0U)
 8002eea:	88eb      	ldrh	r3, [r5, #6]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1d6      	bne.n	8002e9e <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f000 f9f8 	bl	80032e6 <USBD_CtlSendStatus>
 8002ef6:	e7d2      	b.n	8002e9e <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002ef8:	7c02      	ldrb	r2, [r0, #16]
 8002efa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002efe:	b932      	cbnz	r2, 8002f0e <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8002f02:	f10d 0006 	add.w	r0, sp, #6
 8002f06:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002f08:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002f0a:	7043      	strb	r3, [r0, #1]
 8002f0c:	e7df      	b.n	8002ece <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	e7f7      	b.n	8002f02 <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 8002f12:	b2c9      	uxtb	r1, r1
 8002f14:	2905      	cmp	r1, #5
 8002f16:	d821      	bhi.n	8002f5c <USBD_StdDevReq+0x100>
 8002f18:	e8df f001 	tbb	[pc, r1]
 8002f1c:	14100c03 	.word	0x14100c03
 8002f20:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8002f22:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002f26:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1cc      	bne.n	8002ec6 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	f7ff ff89 	bl	8002e44 <USBD_CtlError.constprop.1>
 8002f32:	e7b4      	b.n	8002e9e <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8002f34:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	e7f5      	b.n	8002f28 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8002f3c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	e7f1      	b.n	8002f28 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8002f44:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	e7ed      	b.n	8002f28 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8002f4c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	e7e9      	b.n	8002f28 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8002f54:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	e7e5      	b.n	8002f28 <USBD_StdDevReq+0xcc>
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8002f5c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d0e2      	beq.n	8002f2c <USBD_StdDevReq+0xd0>
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8002f66:	f10d 0206 	add.w	r2, sp, #6
 8002f6a:	4798      	blx	r3
 8002f6c:	e7af      	b.n	8002ece <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002f6e:	7c03      	ldrb	r3, [r0, #16]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1db      	bne.n	8002f2c <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002f74:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002f78:	f10d 0006 	add.w	r0, sp, #6
 8002f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7e:	4798      	blx	r3
 8002f80:	e7a5      	b.n	8002ece <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8002f82:	7c03      	ldrb	r3, [r0, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1d1      	bne.n	8002f2c <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002f88:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8002f8c:	f10d 0006 	add.w	r0, sp, #6
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002f94:	2307      	movs	r3, #7
 8002f96:	e7b8      	b.n	8002f0a <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8002f98:	888b      	ldrh	r3, [r1, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1c6      	bne.n	8002f2c <USBD_StdDevReq+0xd0>
 8002f9e:	88cb      	ldrh	r3, [r1, #6]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1c3      	bne.n	8002f2c <USBD_StdDevReq+0xd0>
 8002fa4:	884d      	ldrh	r5, [r1, #2]
 8002fa6:	2d7f      	cmp	r5, #127	; 0x7f
 8002fa8:	d8c0      	bhi.n	8002f2c <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8002faa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d0bc      	beq.n	8002f2c <USBD_StdDevReq+0xd0>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8002fb2:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8002fb4:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8002fb8:	f000 fc02 	bl	80037c0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8002fbc:	4620      	mov	r0, r4
 8002fbe:	f000 f992 	bl	80032e6 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8002fc2:	b11d      	cbz	r5, 8002fcc <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8002fc4:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8002fc6:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8002fca:	e768      	b.n	8002e9e <USBD_StdDevReq+0x42>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e7fa      	b.n	8002fc6 <USBD_StdDevReq+0x16a>
  cfgidx = (uint8_t)(req->wValue);
 8002fd0:	7889      	ldrb	r1, [r1, #2]
 8002fd2:	4d39      	ldr	r5, [pc, #228]	; (80030b8 <USBD_StdDevReq+0x25c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002fd4:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8002fd6:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8002fd8:	d8a8      	bhi.n	8002f2c <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8002fda:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d008      	beq.n	8002ff4 <USBD_StdDevReq+0x198>
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d015      	beq.n	8003012 <USBD_StdDevReq+0x1b6>
        USBD_CtlError(pdev, req);
 8002fe6:	f7ff ff2d 	bl	8002e44 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8002fea:	7829      	ldrb	r1, [r5, #0]
 8002fec:	4620      	mov	r0, r4
 8002fee:	f7ff fe06 	bl	8002bfe <USBD_ClrClassConfig>
 8002ff2:	e754      	b.n	8002e9e <USBD_StdDevReq+0x42>
        if (cfgidx)
 8002ff4:	2900      	cmp	r1, #0
 8002ff6:	f43f af7b 	beq.w	8002ef0 <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 8002ffa:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8002ffc:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8002ffe:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003000:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003004:	4620      	mov	r0, r4
 8003006:	f7ff fdef 	bl	8002be8 <USBD_SetClassConfig>
 800300a:	2802      	cmp	r0, #2
 800300c:	f47f af70 	bne.w	8002ef0 <USBD_StdDevReq+0x94>
 8003010:	e78c      	b.n	8002f2c <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 8003012:	b931      	cbnz	r1, 8003022 <USBD_StdDevReq+0x1c6>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003014:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8003016:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003018:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 800301c:	f7ff fdef 	bl	8002bfe <USBD_ClrClassConfig>
 8003020:	e766      	b.n	8002ef0 <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 8003022:	6841      	ldr	r1, [r0, #4]
 8003024:	2901      	cmp	r1, #1
 8003026:	f43f af63 	beq.w	8002ef0 <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800302a:	b2c9      	uxtb	r1, r1
 800302c:	f7ff fde7 	bl	8002bfe <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8003030:	7829      	ldrb	r1, [r5, #0]
 8003032:	6061      	str	r1, [r4, #4]
 8003034:	e7e6      	b.n	8003004 <USBD_StdDevReq+0x1a8>
  if (req->wLength != 1U)
 8003036:	88ca      	ldrh	r2, [r1, #6]
 8003038:	2a01      	cmp	r2, #1
 800303a:	f47f af77 	bne.w	8002f2c <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 800303e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003042:	2b00      	cmp	r3, #0
 8003044:	f43f af72 	beq.w	8002f2c <USBD_StdDevReq+0xd0>
 8003048:	2b02      	cmp	r3, #2
 800304a:	d904      	bls.n	8003056 <USBD_StdDevReq+0x1fa>
 800304c:	2b03      	cmp	r3, #3
 800304e:	f47f af6d 	bne.w	8002f2c <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003052:	1d01      	adds	r1, r0, #4
 8003054:	e003      	b.n	800305e <USBD_StdDevReq+0x202>
        pdev->dev_default_config = 0U;
 8003056:	4601      	mov	r1, r0
 8003058:	2300      	movs	r3, #0
 800305a:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800305e:	4620      	mov	r0, r4
 8003060:	f000 f915 	bl	800328e <USBD_CtlSendData>
 8003064:	e71b      	b.n	8002e9e <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 8003066:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800306a:	3b01      	subs	r3, #1
 800306c:	2b02      	cmp	r3, #2
 800306e:	f63f af5d 	bhi.w	8002f2c <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 8003072:	88cb      	ldrh	r3, [r1, #6]
 8003074:	2b02      	cmp	r3, #2
 8003076:	f47f af59 	bne.w	8002f2c <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800307a:	2301      	movs	r3, #1
 800307c:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 800307e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8003082:	b10b      	cbz	r3, 8003088 <USBD_StdDevReq+0x22c>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003084:	2303      	movs	r3, #3
 8003086:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003088:	2202      	movs	r2, #2
 800308a:	f104 010c 	add.w	r1, r4, #12
 800308e:	e7e6      	b.n	800305e <USBD_StdDevReq+0x202>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003090:	884b      	ldrh	r3, [r1, #2]
 8003092:	2b01      	cmp	r3, #1
 8003094:	f47f af03 	bne.w	8002e9e <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8003098:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 800309c:	e728      	b.n	8002ef0 <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 800309e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80030a2:	3b01      	subs	r3, #1
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	f63f af41 	bhi.w	8002f2c <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80030aa:	884b      	ldrh	r3, [r1, #2]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	f47f aef6 	bne.w	8002e9e <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e7f0      	b.n	8003098 <USBD_StdDevReq+0x23c>
 80030b6:	bf00      	nop
 80030b8:	2000025f 	.word	0x2000025f

080030bc <USBD_StdItfReq>:
{
 80030bc:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80030be:	780b      	ldrb	r3, [r1, #0]
{
 80030c0:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80030c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80030c6:	2b20      	cmp	r3, #32
{
 80030c8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80030ca:	d002      	beq.n	80030d2 <USBD_StdItfReq+0x16>
 80030cc:	2b40      	cmp	r3, #64	; 0x40
 80030ce:	d000      	beq.n	80030d2 <USBD_StdItfReq+0x16>
 80030d0:	b9ab      	cbnz	r3, 80030fe <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 80030d2:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80030d6:	3b01      	subs	r3, #1
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d810      	bhi.n	80030fe <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80030dc:	792b      	ldrb	r3, [r5, #4]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d80d      	bhi.n	80030fe <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80030e2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 80030e6:	4629      	mov	r1, r5
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	4620      	mov	r0, r4
 80030ec:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 80030ee:	88eb      	ldrh	r3, [r5, #6]
 80030f0:	b91b      	cbnz	r3, 80030fa <USBD_StdItfReq+0x3e>
 80030f2:	b910      	cbnz	r0, 80030fa <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 80030f4:	4620      	mov	r0, r4
 80030f6:	f000 f8f6 	bl	80032e6 <USBD_CtlSendStatus>
}
 80030fa:	2000      	movs	r0, #0
 80030fc:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 80030fe:	4620      	mov	r0, r4
 8003100:	f7ff fea0 	bl	8002e44 <USBD_CtlError.constprop.1>
          break;
 8003104:	e7f9      	b.n	80030fa <USBD_StdItfReq+0x3e>

08003106 <USBD_StdEPReq>:
{
 8003106:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003108:	780a      	ldrb	r2, [r1, #0]
{
 800310a:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800310c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003110:	2a20      	cmp	r2, #32
{
 8003112:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003114:	d014      	beq.n	8003140 <USBD_StdEPReq+0x3a>
 8003116:	2a40      	cmp	r2, #64	; 0x40
 8003118:	d012      	beq.n	8003140 <USBD_StdEPReq+0x3a>
 800311a:	b96a      	cbnz	r2, 8003138 <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 800311c:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 800311e:	888d      	ldrh	r5, [r1, #4]
      switch (req->bRequest)
 8003120:	2a01      	cmp	r2, #1
  ep_addr  = LOBYTE(req->wIndex);
 8003122:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8003124:	d020      	beq.n	8003168 <USBD_StdEPReq+0x62>
 8003126:	d336      	bcc.n	8003196 <USBD_StdEPReq+0x90>
 8003128:	2a03      	cmp	r2, #3
 800312a:	d105      	bne.n	8003138 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 800312c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003130:	2a02      	cmp	r2, #2
 8003132:	d027      	beq.n	8003184 <USBD_StdEPReq+0x7e>
 8003134:	2a03      	cmp	r2, #3
 8003136:	d00b      	beq.n	8003150 <USBD_StdEPReq+0x4a>
              USBD_CtlError(pdev, req);
 8003138:	4620      	mov	r0, r4
 800313a:	f7ff fe83 	bl	8002e44 <USBD_CtlError.constprop.1>
              break;
 800313e:	e005      	b.n	800314c <USBD_StdEPReq+0x46>
      pdev->pClass->Setup(pdev, req);
 8003140:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8003144:	4619      	mov	r1, r3
 8003146:	6892      	ldr	r2, [r2, #8]
 8003148:	4620      	mov	r0, r4
 800314a:	4790      	blx	r2
}
 800314c:	2000      	movs	r0, #0
 800314e:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003150:	885a      	ldrh	r2, [r3, #2]
 8003152:	b92a      	cbnz	r2, 8003160 <USBD_StdEPReq+0x5a>
                if ((ep_addr != 0x00U) &&
 8003154:	064a      	lsls	r2, r1, #25
 8003156:	d003      	beq.n	8003160 <USBD_StdEPReq+0x5a>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003158:	88db      	ldrh	r3, [r3, #6]
 800315a:	b90b      	cbnz	r3, 8003160 <USBD_StdEPReq+0x5a>
                  USBD_LL_StallEP(pdev, ep_addr);
 800315c:	f000 fb02 	bl	8003764 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8003160:	4620      	mov	r0, r4
 8003162:	f000 f8c0 	bl	80032e6 <USBD_CtlSendStatus>
              break;
 8003166:	e7f1      	b.n	800314c <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 8003168:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 800316c:	2a02      	cmp	r2, #2
 800316e:	d009      	beq.n	8003184 <USBD_StdEPReq+0x7e>
 8003170:	2a03      	cmp	r2, #3
 8003172:	d1e1      	bne.n	8003138 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003174:	885b      	ldrh	r3, [r3, #2]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1e8      	bne.n	800314c <USBD_StdEPReq+0x46>
                if ((ep_addr & 0x7FU) != 0x00U)
 800317a:	064d      	lsls	r5, r1, #25
 800317c:	d0f0      	beq.n	8003160 <USBD_StdEPReq+0x5a>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800317e:	f000 faff 	bl	8003780 <USBD_LL_ClearStallEP>
 8003182:	e7ed      	b.n	8003160 <USBD_StdEPReq+0x5a>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003184:	064b      	lsls	r3, r1, #25
 8003186:	d0d7      	beq.n	8003138 <USBD_StdEPReq+0x32>
                USBD_LL_StallEP(pdev, ep_addr);
 8003188:	f000 faec 	bl	8003764 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800318c:	2180      	movs	r1, #128	; 0x80
 800318e:	4620      	mov	r0, r4
 8003190:	f000 fae8 	bl	8003764 <USBD_LL_StallEP>
 8003194:	e7da      	b.n	800314c <USBD_StdEPReq+0x46>
          switch (pdev->dev_state)
 8003196:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800319a:	2b02      	cmp	r3, #2
 800319c:	d018      	beq.n	80031d0 <USBD_StdEPReq+0xca>
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d1ca      	bne.n	8003138 <USBD_StdEPReq+0x32>
 80031a2:	2314      	movs	r3, #20
 80031a4:	f001 020f 	and.w	r2, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80031a8:	f015 0f80 	tst.w	r5, #128	; 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80031ac:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80031b0:	d01f      	beq.n	80031f2 <USBD_StdEPReq+0xec>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80031b2:	6992      	ldr	r2, [r2, #24]
 80031b4:	2a00      	cmp	r2, #0
 80031b6:	d0bf      	beq.n	8003138 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80031b8:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80031bc:	fb05 3503 	mla	r5, r5, r3, r3
 80031c0:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80031c2:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80031c6:	d11f      	bne.n	8003208 <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 80031c8:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80031ca:	2202      	movs	r2, #2
 80031cc:	4629      	mov	r1, r5
 80031ce:	e00c      	b.n	80031ea <USBD_StdEPReq+0xe4>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80031d0:	064a      	lsls	r2, r1, #25
 80031d2:	d1b1      	bne.n	8003138 <USBD_StdEPReq+0x32>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80031d4:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 80031d6:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80031da:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80031de:	bf4c      	ite	mi
 80031e0:	f100 0114 	addmi.w	r1, r0, #20
 80031e4:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 80031e8:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80031ea:	4620      	mov	r0, r4
 80031ec:	f000 f84f 	bl	800328e <USBD_CtlSendData>
              break;
 80031f0:	e7ac      	b.n	800314c <USBD_StdEPReq+0x46>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80031f2:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 80031f6:	2a00      	cmp	r2, #0
 80031f8:	d09e      	beq.n	8003138 <USBD_StdEPReq+0x32>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80031fa:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80031fe:	fb03 0505 	mla	r5, r3, r5, r0
 8003202:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8003206:	e7dc      	b.n	80031c2 <USBD_StdEPReq+0xbc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8003208:	4620      	mov	r0, r4
 800320a:	f000 fac7 	bl	800379c <USBD_LL_IsStallEP>
 800320e:	b108      	cbz	r0, 8003214 <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 8003210:	2301      	movs	r3, #1
 8003212:	e7d9      	b.n	80031c8 <USBD_StdEPReq+0xc2>
                pep->status = 0x0000U;
 8003214:	6028      	str	r0, [r5, #0]
 8003216:	e7d8      	b.n	80031ca <USBD_StdEPReq+0xc4>

08003218 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8003218:	780b      	ldrb	r3, [r1, #0]
 800321a:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800321c:	784b      	ldrb	r3, [r1, #1]
 800321e:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8003220:	78ca      	ldrb	r2, [r1, #3]
 8003222:	788b      	ldrb	r3, [r1, #2]
 8003224:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003228:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800322a:	794a      	ldrb	r2, [r1, #5]
 800322c:	790b      	ldrb	r3, [r1, #4]
 800322e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003232:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8003234:	79ca      	ldrb	r2, [r1, #7]
 8003236:	798b      	ldrb	r3, [r1, #6]
 8003238:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800323c:	80c3      	strh	r3, [r0, #6]
}
 800323e:	4770      	bx	lr

08003240 <USBD_CtlError>:
{
 8003240:	b510      	push	{r4, lr}
 8003242:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8003244:	2180      	movs	r1, #128	; 0x80
 8003246:	f000 fa8d 	bl	8003764 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800324a:	4620      	mov	r0, r4
}
 800324c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8003250:	2100      	movs	r1, #0
 8003252:	f000 ba87 	b.w	8003764 <USBD_LL_StallEP>

08003256 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003256:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8003258:	b188      	cbz	r0, 800327e <USBD_GetString+0x28>
 800325a:	4605      	mov	r5, r0
 800325c:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 800325e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2c00      	cmp	r4, #0
 8003266:	d1f9      	bne.n	800325c <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8003268:	3301      	adds	r3, #1
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800326e:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8003270:	2303      	movs	r3, #3
 8003272:	704b      	strb	r3, [r1, #1]
 8003274:	2302      	movs	r3, #2
 8003276:	3801      	subs	r0, #1
    while (*desc != '\0')
 8003278:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800327c:	b905      	cbnz	r5, 8003280 <USBD_GetString+0x2a>
}
 800327e:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	54cd      	strb	r5, [r1, r3]
 8003284:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8003286:	3302      	adds	r3, #2
 8003288:	b2db      	uxtb	r3, r3
 800328a:	548c      	strb	r4, [r1, r2]
 800328c:	e7f4      	b.n	8003278 <USBD_GetString+0x22>

0800328e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800328e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003290:	2202      	movs	r2, #2
{
 8003292:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8003294:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8003298:	e9c0 3307 	strd	r3, r3, [r0, #28]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800329c:	460a      	mov	r2, r1
 800329e:	2100      	movs	r1, #0
 80032a0:	f000 fa9c 	bl	80037dc <USBD_LL_Transmit>

  return USBD_OK;
}
 80032a4:	2000      	movs	r0, #0
 80032a6:	bd10      	pop	{r4, pc}

080032a8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80032a8:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80032aa:	4613      	mov	r3, r2
 80032ac:	460a      	mov	r2, r1
 80032ae:	2100      	movs	r1, #0
 80032b0:	f000 fa94 	bl	80037dc <USBD_LL_Transmit>

  return USBD_OK;
}
 80032b4:	2000      	movs	r0, #0
 80032b6:	bd08      	pop	{r3, pc}

080032b8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80032b8:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80032ba:	2203      	movs	r2, #3
{
 80032bc:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80032be:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80032c2:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80032c6:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80032c8:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80032cc:	2100      	movs	r1, #0
 80032ce:	f000 fa93 	bl	80037f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80032d2:	2000      	movs	r0, #0
 80032d4:	bd10      	pop	{r4, pc}

080032d6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80032d6:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80032d8:	4613      	mov	r3, r2
 80032da:	460a      	mov	r2, r1
 80032dc:	2100      	movs	r1, #0
 80032de:	f000 fa8b 	bl	80037f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80032e2:	2000      	movs	r0, #0
 80032e4:	bd08      	pop	{r3, pc}

080032e6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80032e6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80032e8:	2304      	movs	r3, #4
 80032ea:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80032ee:	2300      	movs	r3, #0
 80032f0:	461a      	mov	r2, r3
 80032f2:	4619      	mov	r1, r3
 80032f4:	f000 fa72 	bl	80037dc <USBD_LL_Transmit>

  return USBD_OK;
}
 80032f8:	2000      	movs	r0, #0
 80032fa:	bd08      	pop	{r3, pc}

080032fc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80032fc:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80032fe:	2305      	movs	r3, #5
 8003300:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003304:	2300      	movs	r3, #0
 8003306:	461a      	mov	r2, r3
 8003308:	4619      	mov	r1, r3
 800330a:	f000 fa75 	bl	80037f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800330e:	2000      	movs	r0, #0
 8003310:	bd08      	pop	{r3, pc}
	...

08003314 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8003314:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8003316:	2200      	movs	r2, #0
 8003318:	490e      	ldr	r1, [pc, #56]	; (8003354 <MX_USB_DEVICE_Init+0x40>)
 800331a:	480f      	ldr	r0, [pc, #60]	; (8003358 <MX_USB_DEVICE_Init+0x44>)
 800331c:	f7ff fc37 	bl	8002b8e <USBD_Init>
 8003320:	b108      	cbz	r0, 8003326 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8003322:	f7fd f953 	bl	80005cc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8003326:	490d      	ldr	r1, [pc, #52]	; (800335c <MX_USB_DEVICE_Init+0x48>)
 8003328:	480b      	ldr	r0, [pc, #44]	; (8003358 <MX_USB_DEVICE_Init+0x44>)
 800332a:	f7ff fc45 	bl	8002bb8 <USBD_RegisterClass>
 800332e:	b108      	cbz	r0, 8003334 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8003330:	f7fd f94c 	bl	80005cc <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8003334:	490a      	ldr	r1, [pc, #40]	; (8003360 <MX_USB_DEVICE_Init+0x4c>)
 8003336:	4808      	ldr	r0, [pc, #32]	; (8003358 <MX_USB_DEVICE_Init+0x44>)
 8003338:	f7ff fc24 	bl	8002b84 <USBD_DFU_RegisterMedia>
 800333c:	b108      	cbz	r0, 8003342 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800333e:	f7fd f945 	bl	80005cc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8003342:	4805      	ldr	r0, [pc, #20]	; (8003358 <MX_USB_DEVICE_Init+0x44>)
 8003344:	f7ff fc3f 	bl	8002bc6 <USBD_Start>
 8003348:	b118      	cbz	r0, 8003352 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800334a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800334e:	f7fd b93d 	b.w	80005cc <Error_Handler>
}
 8003352:	bd08      	pop	{r3, pc}
 8003354:	20000070 	.word	0x20000070
 8003358:	2000028c 	.word	0x2000028c
 800335c:	2000000c 	.word	0x2000000c
 8003360:	200000c0 	.word	0x200000c0

08003364 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8003364:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8003366:	4801      	ldr	r0, [pc, #4]	; (800336c <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003368:	800b      	strh	r3, [r1, #0]
}
 800336a:	4770      	bx	lr
 800336c:	2000008c 	.word	0x2000008c

08003370 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8003370:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8003372:	4801      	ldr	r0, [pc, #4]	; (8003378 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8003374:	800b      	strh	r3, [r1, #0]
}
 8003376:	4770      	bx	lr
 8003378:	200000a0 	.word	0x200000a0

0800337c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800337c:	2300      	movs	r3, #0
 800337e:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8003380:	461e      	mov	r6, r3
    if (((value >> 28)) < 0xA)
 8003382:	0f05      	lsrs	r5, r0, #28
 8003384:	b2ec      	uxtb	r4, r5
 8003386:	2d09      	cmp	r5, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8003388:	bf94      	ite	ls
 800338a:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800338c:	3437      	addhi	r4, #55	; 0x37
 800338e:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8003392:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8003396:	3301      	adds	r3, #1
 8003398:	7066      	strb	r6, [r4, #1]
  for (idx = 0; idx < len; idx++)
 800339a:	b2dc      	uxtb	r4, r3
 800339c:	42a2      	cmp	r2, r4
    value = value << 4;
 800339e:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 80033a2:	d8ee      	bhi.n	8003382 <IntToUnicode+0x6>
  }
}
 80033a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080033a8 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80033a8:	231a      	movs	r3, #26
{
 80033aa:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80033ac:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80033ae:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <USBD_FS_SerialStrDescriptor+0x2c>)
 80033b0:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80033b2:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 80033b4:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 80033b6:	18c0      	adds	r0, r0, r3
 80033b8:	d00a      	beq.n	80033d0 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80033ba:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80033bc:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80033be:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80033c0:	4906      	ldr	r1, [pc, #24]	; (80033dc <USBD_FS_SerialStrDescriptor+0x34>)
 80033c2:	f7ff ffdb 	bl	800337c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80033c6:	2204      	movs	r2, #4
 80033c8:	4905      	ldr	r1, [pc, #20]	; (80033e0 <USBD_FS_SerialStrDescriptor+0x38>)
 80033ca:	4620      	mov	r0, r4
 80033cc:	f7ff ffd6 	bl	800337c <IntToUnicode>
}
 80033d0:	4804      	ldr	r0, [pc, #16]	; (80033e4 <USBD_FS_SerialStrDescriptor+0x3c>)
 80033d2:	bd10      	pop	{r4, pc}
 80033d4:	1fff7a10 	.word	0x1fff7a10
 80033d8:	1fff7a14 	.word	0x1fff7a14
 80033dc:	200000a6 	.word	0x200000a6
 80033e0:	200000b6 	.word	0x200000b6
 80033e4:	200000a4 	.word	0x200000a4

080033e8 <USBD_FS_ManufacturerStrDescriptor>:
{
 80033e8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80033ea:	4c04      	ldr	r4, [pc, #16]	; (80033fc <USBD_FS_ManufacturerStrDescriptor+0x14>)
 80033ec:	460a      	mov	r2, r1
 80033ee:	4804      	ldr	r0, [pc, #16]	; (8003400 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80033f0:	4621      	mov	r1, r4
 80033f2:	f7ff ff30 	bl	8003256 <USBD_GetString>
}
 80033f6:	4620      	mov	r0, r4
 80033f8:	bd10      	pop	{r4, pc}
 80033fa:	bf00      	nop
 80033fc:	20000550 	.word	0x20000550
 8003400:	08003a49 	.word	0x08003a49

08003404 <USBD_FS_ProductStrDescriptor>:
{
 8003404:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003406:	4c04      	ldr	r4, [pc, #16]	; (8003418 <USBD_FS_ProductStrDescriptor+0x14>)
 8003408:	460a      	mov	r2, r1
 800340a:	4804      	ldr	r0, [pc, #16]	; (800341c <USBD_FS_ProductStrDescriptor+0x18>)
 800340c:	4621      	mov	r1, r4
 800340e:	f7ff ff22 	bl	8003256 <USBD_GetString>
}
 8003412:	4620      	mov	r0, r4
 8003414:	bd10      	pop	{r4, pc}
 8003416:	bf00      	nop
 8003418:	20000550 	.word	0x20000550
 800341c:	08003a5c 	.word	0x08003a5c

08003420 <USBD_FS_ConfigStrDescriptor>:
{
 8003420:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003422:	4c04      	ldr	r4, [pc, #16]	; (8003434 <USBD_FS_ConfigStrDescriptor+0x14>)
 8003424:	460a      	mov	r2, r1
 8003426:	4804      	ldr	r0, [pc, #16]	; (8003438 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003428:	4621      	mov	r1, r4
 800342a:	f7ff ff14 	bl	8003256 <USBD_GetString>
}
 800342e:	4620      	mov	r0, r4
 8003430:	bd10      	pop	{r4, pc}
 8003432:	bf00      	nop
 8003434:	20000550 	.word	0x20000550
 8003438:	08003a30 	.word	0x08003a30

0800343c <USBD_FS_InterfaceStrDescriptor>:
{
 800343c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800343e:	4c04      	ldr	r4, [pc, #16]	; (8003450 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003440:	460a      	mov	r2, r1
 8003442:	4804      	ldr	r0, [pc, #16]	; (8003454 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003444:	4621      	mov	r1, r4
 8003446:	f7ff ff06 	bl	8003256 <USBD_GetString>
}
 800344a:	4620      	mov	r0, r4
 800344c:	bd10      	pop	{r4, pc}
 800344e:	bf00      	nop
 8003450:	20000550 	.word	0x20000550
 8003454:	08003a3b 	.word	0x08003a3b

08003458 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8003458:	4603      	mov	r3, r0
 800345a:	b510      	push	{r4, lr}
 800345c:	1e48      	subs	r0, r1, #1
 800345e:	441a      	add	r2, r3
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  uint32_t i    = 0U;
  uint8_t *psrc = src;

  for ( i=0U; i<Len; i++ )
 8003460:	4293      	cmp	r3, r2
 8003462:	d101      	bne.n	8003468 <MEM_If_Read_FS+0x10>
  {
    dest[i] = *psrc++;
  }
  return ( uint8_t* )( dest );
  /* USER CODE END 4 */
}
 8003464:	4608      	mov	r0, r1
 8003466:	bd10      	pop	{r4, pc}
    dest[i] = *psrc++;
 8003468:	f813 4b01 	ldrb.w	r4, [r3], #1
 800346c:	f800 4f01 	strb.w	r4, [r0, #1]!
 8003470:	e7f6      	b.n	8003460 <MEM_If_Read_FS+0x8>

08003472 <MEM_If_GetStatus_FS>:

    break;
  }
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003472:	2000      	movs	r0, #0
 8003474:	4770      	bx	lr
	...

08003478 <MEM_If_Write_FS>:
{
 8003478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800347c:	4606      	mov	r6, r0
 800347e:	4617      	mov	r7, r2
 8003480:	460d      	mov	r5, r1
  USBD_StatusTypeDef result = USBD_FAIL;
 8003482:	2002      	movs	r0, #2
  for ( i=0U; i<Len; i+=4U )
 8003484:	2400      	movs	r4, #0
	if ( ( uint32_t )( dest + i ) > BOOTLADER_SIZE )
 8003486:	f8df 8030 	ldr.w	r8, [pc, #48]	; 80034b8 <MEM_If_Write_FS+0x40>
  for ( i=0U; i<Len; i+=4U )
 800348a:	42bc      	cmp	r4, r7
 800348c:	d301      	bcc.n	8003492 <MEM_If_Write_FS+0x1a>
}
 800348e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ( ( uint32_t )( dest + i ) > BOOTLADER_SIZE )
 8003492:	4545      	cmp	r5, r8
 8003494:	d90a      	bls.n	80034ac <MEM_If_Write_FS+0x34>
      if ( HAL_FLASH_Program( FLASH_TYPEPROGRAM_WORD, ( uint32_t )( dest + i ), *( uint32_t* )( src + i ) ) == HAL_OK )
 8003496:	5932      	ldr	r2, [r6, r4]
 8003498:	2300      	movs	r3, #0
 800349a:	4629      	mov	r1, r5
 800349c:	2002      	movs	r0, #2
 800349e:	f7fd fac5 	bl	8000a2c <HAL_FLASH_Program>
 80034a2:	b930      	cbnz	r0, 80034b2 <MEM_If_Write_FS+0x3a>
        if ( *( uint32_t* )( src + i ) != *( uint32_t* )( dest + i ) )
 80034a4:	5932      	ldr	r2, [r6, r4]
 80034a6:	682b      	ldr	r3, [r5, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d102      	bne.n	80034b2 <MEM_If_Write_FS+0x3a>
  for ( i=0U; i<Len; i+=4U )
 80034ac:	3404      	adds	r4, #4
 80034ae:	3504      	adds	r5, #4
 80034b0:	e7eb      	b.n	800348a <MEM_If_Write_FS+0x12>
        result = USBD_FAIL;
 80034b2:	2002      	movs	r0, #2
 80034b4:	e7eb      	b.n	800348e <MEM_If_Write_FS+0x16>
 80034b6:	bf00      	nop
 80034b8:	08007fff 	.word	0x08007fff

080034bc <MEM_If_Erase_FS>:
  uint32_t               pageError = 0U;
 80034bc:	2300      	movs	r3, #0
{
 80034be:	b510      	push	{r4, lr}
  if ( Add > BOOTLADER_SIZE ) {
 80034c0:	4a25      	ldr	r2, [pc, #148]	; (8003558 <MEM_If_Erase_FS+0x9c>)
{
 80034c2:	b086      	sub	sp, #24
  if ( Add > BOOTLADER_SIZE ) {
 80034c4:	4290      	cmp	r0, r2
  uint32_t               pageError = 0U;
 80034c6:	9300      	str	r3, [sp, #0]
  if ( Add > BOOTLADER_SIZE ) {
 80034c8:	d931      	bls.n	800352e <MEM_If_Erase_FS+0x72>
    eraseInit.TypeErase    = FLASH_TYPEERASE_SECTORS;
 80034ca:	9301      	str	r3, [sp, #4]
    eraseInit.Banks        = FLASH_BANK_1;
 80034cc:	2301      	movs	r3, #1
 80034ce:	9302      	str	r3, [sp, #8]
    eraseInit.Sector       = GET_SECTOR( Add );
 80034d0:	4b22      	ldr	r3, [pc, #136]	; (800355c <MEM_If_Erase_FS+0xa0>)
 80034d2:	4298      	cmp	r0, r3
 80034d4:	d92e      	bls.n	8003534 <MEM_If_Erase_FS+0x78>
 80034d6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80034da:	4298      	cmp	r0, r3
 80034dc:	d92c      	bls.n	8003538 <MEM_If_Erase_FS+0x7c>
 80034de:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80034e2:	4298      	cmp	r0, r3
 80034e4:	d92a      	bls.n	800353c <MEM_If_Erase_FS+0x80>
 80034e6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80034ea:	4298      	cmp	r0, r3
 80034ec:	d928      	bls.n	8003540 <MEM_If_Erase_FS+0x84>
 80034ee:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80034f2:	4298      	cmp	r0, r3
 80034f4:	d926      	bls.n	8003544 <MEM_If_Erase_FS+0x88>
 80034f6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80034fa:	4298      	cmp	r0, r3
 80034fc:	d924      	bls.n	8003548 <MEM_If_Erase_FS+0x8c>
 80034fe:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003502:	4298      	cmp	r0, r3
 8003504:	d922      	bls.n	800354c <MEM_If_Erase_FS+0x90>
 8003506:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800350a:	4298      	cmp	r0, r3
 800350c:	d920      	bls.n	8003550 <MEM_If_Erase_FS+0x94>
 800350e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8003512:	4298      	cmp	r0, r3
 8003514:	bf94      	ite	ls
 8003516:	200a      	movls	r0, #10
 8003518:	200b      	movhi	r0, #11
    eraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800351a:	2301      	movs	r3, #1
 800351c:	2402      	movs	r4, #2
    eraseInit.Sector       = GET_SECTOR( Add );
 800351e:	9003      	str	r0, [sp, #12]
    status = HAL_FLASHEx_Erase( &eraseInit, &pageError );
 8003520:	4669      	mov	r1, sp
 8003522:	a801      	add	r0, sp, #4
    eraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8003524:	e9cd 3404 	strd	r3, r4, [sp, #16]
    status = HAL_FLASHEx_Erase( &eraseInit, &pageError );
 8003528:	f7fd fb2e 	bl	8000b88 <HAL_FLASHEx_Erase>
    if ( status == HAL_OK )
 800352c:	b990      	cbnz	r0, 8003554 <MEM_If_Erase_FS+0x98>
      res = USBD_OK;
 800352e:	2000      	movs	r0, #0
}
 8003530:	b006      	add	sp, #24
 8003532:	bd10      	pop	{r4, pc}
    eraseInit.Sector       = GET_SECTOR( Add );
 8003534:	2002      	movs	r0, #2
 8003536:	e7f0      	b.n	800351a <MEM_If_Erase_FS+0x5e>
 8003538:	2003      	movs	r0, #3
 800353a:	e7ee      	b.n	800351a <MEM_If_Erase_FS+0x5e>
 800353c:	2004      	movs	r0, #4
 800353e:	e7ec      	b.n	800351a <MEM_If_Erase_FS+0x5e>
 8003540:	2005      	movs	r0, #5
 8003542:	e7ea      	b.n	800351a <MEM_If_Erase_FS+0x5e>
 8003544:	2006      	movs	r0, #6
 8003546:	e7e8      	b.n	800351a <MEM_If_Erase_FS+0x5e>
 8003548:	2007      	movs	r0, #7
 800354a:	e7e6      	b.n	800351a <MEM_If_Erase_FS+0x5e>
 800354c:	2008      	movs	r0, #8
 800354e:	e7e4      	b.n	800351a <MEM_If_Erase_FS+0x5e>
 8003550:	2009      	movs	r0, #9
 8003552:	e7e2      	b.n	800351a <MEM_If_Erase_FS+0x5e>
  USBD_StatusTypeDef     res       = USBD_FAIL;
 8003554:	4620      	mov	r0, r4
 8003556:	e7eb      	b.n	8003530 <MEM_If_Erase_FS+0x74>
 8003558:	08007fff 	.word	0x08007fff
 800355c:	0800bffe 	.word	0x0800bffe

08003560 <MEM_If_DeInit_FS>:
{
 8003560:	b508      	push	{r3, lr}
    flashStatus = HAL_FLASH_Lock();
 8003562:	f7fd fa2f 	bl	80009c4 <HAL_FLASH_Lock>
  while ( flashStatus != HAL_OK )
 8003566:	2800      	cmp	r0, #0
 8003568:	d1fb      	bne.n	8003562 <MEM_If_DeInit_FS+0x2>
}
 800356a:	bd08      	pop	{r3, pc}

0800356c <MEM_If_Init_FS>:
{
 800356c:	b508      	push	{r3, lr}
    flashStatus = HAL_FLASH_Unlock();
 800356e:	f7fd fa17 	bl	80009a0 <HAL_FLASH_Unlock>
  while ( flashStatus != HAL_OK )
 8003572:	2800      	cmp	r0, #0
 8003574:	d1fb      	bne.n	800356e <MEM_If_Init_FS+0x2>
}
 8003576:	bd08      	pop	{r3, pc}

08003578 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003578:	b530      	push	{r4, r5, lr}
 800357a:	4604      	mov	r4, r0
 800357c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800357e:	2214      	movs	r2, #20
 8003580:	2100      	movs	r1, #0
 8003582:	a803      	add	r0, sp, #12
 8003584:	f000 f980 	bl	8003888 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800358e:	d12e      	bne.n	80035ee <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003590:	2500      	movs	r5, #0
 8003592:	4c18      	ldr	r4, [pc, #96]	; (80035f4 <HAL_PCD_MspInit+0x7c>)
 8003594:	9501      	str	r5, [sp, #4]
 8003596:	6b23      	ldr	r3, [r4, #48]	; 0x30
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003598:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	6323      	str	r3, [r4, #48]	; 0x30
 80035a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80035a4:	2103      	movs	r1, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	9301      	str	r3, [sp, #4]
 80035ac:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ae:	2302      	movs	r3, #2
 80035b0:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80035b4:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b6:	4810      	ldr	r0, [pc, #64]	; (80035f8 <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80035b8:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035bc:	a903      	add	r1, sp, #12
 80035be:	f7fd fb31 	bl	8000c24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80035c2:	6b63      	ldr	r3, [r4, #52]	; 0x34

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80035c4:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80035c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ca:	6363      	str	r3, [r4, #52]	; 0x34
 80035cc:	9502      	str	r5, [sp, #8]
 80035ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80035d0:	462a      	mov	r2, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80035d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035d6:	6463      	str	r3, [r4, #68]	; 0x44
 80035d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80035da:	4629      	mov	r1, r5
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80035dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035e0:	9302      	str	r3, [sp, #8]
 80035e2:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80035e4:	f7fd f910 	bl	8000808 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80035e8:	2043      	movs	r0, #67	; 0x43
 80035ea:	f7fd f941 	bl	8000870 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80035ee:	b009      	add	sp, #36	; 0x24
 80035f0:	bd30      	pop	{r4, r5, pc}
 80035f2:	bf00      	nop
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40020000 	.word	0x40020000

080035fc <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80035fc:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8003600:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8003604:	f7ff bb02 	b.w	8002c0c <USBD_LL_SetupStage>

08003608 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003608:	231c      	movs	r3, #28
 800360a:	fb03 0301 	mla	r3, r3, r1, r0
 800360e:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8003612:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8003616:	f7ff bb26 	b.w	8002c66 <USBD_LL_DataOutStage>

0800361a <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800361a:	231c      	movs	r3, #28
 800361c:	fb03 0301 	mla	r3, r3, r1, r0
 8003620:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8003624:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003626:	f7ff bb58 	b.w	8002cda <USBD_LL_DataInStage>

0800362a <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800362a:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800362e:	f7ff bbec 	b.w	8002e0a <USBD_LL_SOF>

08003632 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8003632:	68c1      	ldr	r1, [r0, #12]
{ 
 8003634:	b510      	push	{r4, lr}
 8003636:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8003638:	b121      	cbz	r1, 8003644 <HAL_PCD_ResetCallback+0x12>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800363a:	2902      	cmp	r1, #2
 800363c:	d001      	beq.n	8003642 <HAL_PCD_ResetCallback+0x10>
  {
    speed = USBD_SPEED_FULL;
  }
  else
  {
    Error_Handler();
 800363e:	f7fc ffc5 	bl	80005cc <Error_Handler>
    speed = USBD_SPEED_FULL;
 8003642:	2101      	movs	r1, #1
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8003644:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
 8003648:	f7ff fbc9 	bl	8002dde <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800364c:	f8d4 03fc 	ldr.w	r0, [r4, #1020]	; 0x3fc
}
 8003650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003654:	f7ff bb9c 	b.w	8002d90 <USBD_LL_Reset>

08003658 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8003658:	b510      	push	{r4, lr}
 800365a:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800365c:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8003660:	f7ff fbc0 	bl	8002de4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8003664:	6822      	ldr	r2, [r4, #0]
 8003666:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8003672:	6a23      	ldr	r3, [r4, #32]
 8003674:	b123      	cbz	r3, 8003680 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003676:	4a03      	ldr	r2, [pc, #12]	; (8003684 <HAL_PCD_SuspendCallback+0x2c>)
 8003678:	6913      	ldr	r3, [r2, #16]
 800367a:	f043 0306 	orr.w	r3, r3, #6
 800367e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8003680:	bd10      	pop	{r4, pc}
 8003682:	bf00      	nop
 8003684:	e000ed00 	.word	0xe000ed00

08003688 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003688:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800368c:	f7ff bbb3 	b.w	8002df6 <USBD_LL_Resume>

08003690 <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003690:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 8003694:	f7ff bbc7 	b.w	8002e26 <USBD_LL_IsoOUTIncomplete>

08003698 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8003698:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 800369c:	f7ff bbc1 	b.w	8002e22 <USBD_LL_IsoINIncomplete>

080036a0 <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80036a0:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80036a4:	f7ff bbc1 	b.w	8002e2a <USBD_LL_DevConnected>

080036a8 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80036a8:	f8d0 03fc 	ldr.w	r0, [r0, #1020]	; 0x3fc
 80036ac:	f7ff bbbf 	b.w	8002e2e <USBD_LL_DevDisconnected>

080036b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80036b0:	b508      	push	{r3, lr}
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80036b2:	7802      	ldrb	r2, [r0, #0]
 80036b4:	bb2a      	cbnz	r2, 8003702 <USBD_LL_Init+0x52>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80036b6:	4b14      	ldr	r3, [pc, #80]	; (8003708 <USBD_LL_Init+0x58>)
  pdev->pData = &hpcd_USB_OTG_FS;
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80036b8:	2104      	movs	r1, #4
  hpcd_USB_OTG_FS.pData = pdev;
 80036ba:	f8c3 03fc 	str.w	r0, [r3, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 80036be:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80036c2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80036c6:	e9c3 0100 	strd	r0, r1, [r3]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80036ca:	2102      	movs	r1, #2
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80036cc:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80036ce:	e9c3 1203 	strd	r1, r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80036d2:	e9c3 1206 	strd	r1, r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80036d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80036d8:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80036dc:	f7fd fb8c 	bl	8000df8 <HAL_PCD_Init>
 80036e0:	b108      	cbz	r0, 80036e6 <USBD_LL_Init+0x36>
  {
    Error_Handler( );
 80036e2:	f7fc ff73 	bl	80005cc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80036e6:	2180      	movs	r1, #128	; 0x80
 80036e8:	4807      	ldr	r0, [pc, #28]	; (8003708 <USBD_LL_Init+0x58>)
 80036ea:	f7fe f80e 	bl	800170a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80036ee:	2240      	movs	r2, #64	; 0x40
 80036f0:	2100      	movs	r1, #0
 80036f2:	4805      	ldr	r0, [pc, #20]	; (8003708 <USBD_LL_Init+0x58>)
 80036f4:	f7fd ffe9 	bl	80016ca <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80036f8:	2280      	movs	r2, #128	; 0x80
 80036fa:	2101      	movs	r1, #1
 80036fc:	4802      	ldr	r0, [pc, #8]	; (8003708 <USBD_LL_Init+0x58>)
 80036fe:	f7fd ffe4 	bl	80016ca <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
}
 8003702:	2000      	movs	r0, #0
 8003704:	bd08      	pop	{r3, pc}
 8003706:	bf00      	nop
 8003708:	20000750 	.word	0x20000750

0800370c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800370c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800370e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003712:	f7fd fbf8 	bl	8000f06 <HAL_PCD_Start>
 8003716:	2803      	cmp	r0, #3
 8003718:	bf96      	itet	ls
 800371a:	4b02      	ldrls	r3, [pc, #8]	; (8003724 <USBD_LL_Start+0x18>)
 800371c:	2002      	movhi	r0, #2
 800371e:	5c18      	ldrbls	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
  
  return usb_status;
}
 8003720:	bd08      	pop	{r3, pc}
 8003722:	bf00      	nop
 8003724:	08003aba 	.word	0x08003aba

08003728 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8003728:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Stop(pdev->pData);
 800372a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800372e:	f7fd fbff 	bl	8000f30 <HAL_PCD_Stop>
 8003732:	2803      	cmp	r0, #3
 8003734:	bf96      	itet	ls
 8003736:	4b02      	ldrls	r3, [pc, #8]	; (8003740 <USBD_LL_Stop+0x18>)
 8003738:	2002      	movhi	r0, #2
 800373a:	5c18      	ldrbls	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 800373c:	bd08      	pop	{r3, pc}
 800373e:	bf00      	nop
 8003740:	08003aba 	.word	0x08003aba

08003744 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8003744:	b510      	push	{r4, lr}
 8003746:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8003748:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800374c:	4613      	mov	r3, r2
 800374e:	4622      	mov	r2, r4
 8003750:	f7fd fedc 	bl	800150c <HAL_PCD_EP_Open>
 8003754:	2803      	cmp	r0, #3
 8003756:	bf96      	itet	ls
 8003758:	4b01      	ldrls	r3, [pc, #4]	; (8003760 <USBD_LL_OpenEP+0x1c>)
 800375a:	2002      	movhi	r0, #2
 800375c:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800375e:	bd10      	pop	{r4, pc}
 8003760:	08003aba 	.word	0x08003aba

08003764 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003764:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003766:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800376a:	f7fd ff45 	bl	80015f8 <HAL_PCD_EP_SetStall>
 800376e:	2803      	cmp	r0, #3
 8003770:	bf96      	itet	ls
 8003772:	4b02      	ldrls	r3, [pc, #8]	; (800377c <USBD_LL_StallEP+0x18>)
 8003774:	2002      	movhi	r0, #2
 8003776:	5c18      	ldrbls	r0, [r3, r0]

  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 8003778:	bd08      	pop	{r3, pc}
 800377a:	bf00      	nop
 800377c:	08003aba 	.word	0x08003aba

08003780 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8003780:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8003782:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8003786:	f7fd ff6f 	bl	8001668 <HAL_PCD_EP_ClrStall>
 800378a:	2803      	cmp	r0, #3
 800378c:	bf96      	itet	ls
 800378e:	4b02      	ldrls	r3, [pc, #8]	; (8003798 <USBD_LL_ClearStallEP+0x18>)
 8003790:	2002      	movhi	r0, #2
 8003792:	5c18      	ldrbls	r0, [r3, r0]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
  
  return usb_status; 
}
 8003794:	bd08      	pop	{r3, pc}
 8003796:	bf00      	nop
 8003798:	08003aba 	.word	0x08003aba

0800379c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800379c:	221c      	movs	r2, #28
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 800379e:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80037a2:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80037a6:	bf1b      	ittet	ne
 80037a8:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 80037ac:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80037b0:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80037b4:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80037b8:	bf08      	it	eq
 80037ba:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
  }
}
 80037be:	4770      	bx	lr

080037c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80037c0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80037c2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80037c6:	f7fd fe8d 	bl	80014e4 <HAL_PCD_SetAddress>
 80037ca:	2803      	cmp	r0, #3
 80037cc:	bf96      	itet	ls
 80037ce:	4b02      	ldrls	r3, [pc, #8]	; (80037d8 <USBD_LL_SetUSBAddress+0x18>)
 80037d0:	2002      	movhi	r0, #2
 80037d2:	5c18      	ldrbls	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;  
}
 80037d4:	bd08      	pop	{r3, pc}
 80037d6:	bf00      	nop
 80037d8:	08003aba 	.word	0x08003aba

080037dc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80037dc:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80037de:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80037e2:	f7fd fee9 	bl	80015b8 <HAL_PCD_EP_Transmit>
 80037e6:	2803      	cmp	r0, #3
 80037e8:	bf96      	itet	ls
 80037ea:	4b02      	ldrls	r3, [pc, #8]	; (80037f4 <USBD_LL_Transmit+0x18>)
 80037ec:	2002      	movhi	r0, #2
 80037ee:	5c18      	ldrbls	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
  
  return usb_status;    
}
 80037f0:	bd08      	pop	{r3, pc}
 80037f2:	bf00      	nop
 80037f4:	08003aba 	.word	0x08003aba

080037f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80037f8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80037fa:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80037fe:	f7fd feb8 	bl	8001572 <HAL_PCD_EP_Receive>
 8003802:	2803      	cmp	r0, #3
 8003804:	bf96      	itet	ls
 8003806:	4b02      	ldrls	r3, [pc, #8]	; (8003810 <USBD_LL_PrepareReceive+0x18>)
 8003808:	2002      	movhi	r0, #2
 800380a:	5c18      	ldrbls	r0, [r3, r0]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
  
  return usb_status; 
}
 800380c:	bd08      	pop	{r3, pc}
 800380e:	bf00      	nop
 8003810:	08003aba 	.word	0x08003aba

08003814 <__errno>:
 8003814:	4b01      	ldr	r3, [pc, #4]	; (800381c <__errno+0x8>)
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	200000dc 	.word	0x200000dc

08003820 <__libc_init_array>:
 8003820:	b570      	push	{r4, r5, r6, lr}
 8003822:	2500      	movs	r5, #0
 8003824:	4e0c      	ldr	r6, [pc, #48]	; (8003858 <__libc_init_array+0x38>)
 8003826:	4c0d      	ldr	r4, [pc, #52]	; (800385c <__libc_init_array+0x3c>)
 8003828:	1ba4      	subs	r4, r4, r6
 800382a:	10a4      	asrs	r4, r4, #2
 800382c:	42a5      	cmp	r5, r4
 800382e:	d109      	bne.n	8003844 <__libc_init_array+0x24>
 8003830:	f000 f8ea 	bl	8003a08 <_init>
 8003834:	2500      	movs	r5, #0
 8003836:	4e0a      	ldr	r6, [pc, #40]	; (8003860 <__libc_init_array+0x40>)
 8003838:	4c0a      	ldr	r4, [pc, #40]	; (8003864 <__libc_init_array+0x44>)
 800383a:	1ba4      	subs	r4, r4, r6
 800383c:	10a4      	asrs	r4, r4, #2
 800383e:	42a5      	cmp	r5, r4
 8003840:	d105      	bne.n	800384e <__libc_init_array+0x2e>
 8003842:	bd70      	pop	{r4, r5, r6, pc}
 8003844:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003848:	4798      	blx	r3
 800384a:	3501      	adds	r5, #1
 800384c:	e7ee      	b.n	800382c <__libc_init_array+0xc>
 800384e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003852:	4798      	blx	r3
 8003854:	3501      	adds	r5, #1
 8003856:	e7f2      	b.n	800383e <__libc_init_array+0x1e>
 8003858:	08003ac8 	.word	0x08003ac8
 800385c:	08003ac8 	.word	0x08003ac8
 8003860:	08003ac8 	.word	0x08003ac8
 8003864:	08003acc 	.word	0x08003acc

08003868 <malloc>:
 8003868:	4b02      	ldr	r3, [pc, #8]	; (8003874 <malloc+0xc>)
 800386a:	4601      	mov	r1, r0
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	f000 b85f 	b.w	8003930 <_malloc_r>
 8003872:	bf00      	nop
 8003874:	200000dc 	.word	0x200000dc

08003878 <free>:
 8003878:	4b02      	ldr	r3, [pc, #8]	; (8003884 <free+0xc>)
 800387a:	4601      	mov	r1, r0
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	f000 b80b 	b.w	8003898 <_free_r>
 8003882:	bf00      	nop
 8003884:	200000dc 	.word	0x200000dc

08003888 <memset>:
 8003888:	4603      	mov	r3, r0
 800388a:	4402      	add	r2, r0
 800388c:	4293      	cmp	r3, r2
 800388e:	d100      	bne.n	8003892 <memset+0xa>
 8003890:	4770      	bx	lr
 8003892:	f803 1b01 	strb.w	r1, [r3], #1
 8003896:	e7f9      	b.n	800388c <memset+0x4>

08003898 <_free_r>:
 8003898:	b538      	push	{r3, r4, r5, lr}
 800389a:	4605      	mov	r5, r0
 800389c:	2900      	cmp	r1, #0
 800389e:	d043      	beq.n	8003928 <_free_r+0x90>
 80038a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038a4:	1f0c      	subs	r4, r1, #4
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	bfb8      	it	lt
 80038aa:	18e4      	addlt	r4, r4, r3
 80038ac:	f000 f8aa 	bl	8003a04 <__malloc_lock>
 80038b0:	4a1e      	ldr	r2, [pc, #120]	; (800392c <_free_r+0x94>)
 80038b2:	6813      	ldr	r3, [r2, #0]
 80038b4:	4610      	mov	r0, r2
 80038b6:	b933      	cbnz	r3, 80038c6 <_free_r+0x2e>
 80038b8:	6063      	str	r3, [r4, #4]
 80038ba:	6014      	str	r4, [r2, #0]
 80038bc:	4628      	mov	r0, r5
 80038be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038c2:	f000 b8a0 	b.w	8003a06 <__malloc_unlock>
 80038c6:	42a3      	cmp	r3, r4
 80038c8:	d90b      	bls.n	80038e2 <_free_r+0x4a>
 80038ca:	6821      	ldr	r1, [r4, #0]
 80038cc:	1862      	adds	r2, r4, r1
 80038ce:	4293      	cmp	r3, r2
 80038d0:	bf01      	itttt	eq
 80038d2:	681a      	ldreq	r2, [r3, #0]
 80038d4:	685b      	ldreq	r3, [r3, #4]
 80038d6:	1852      	addeq	r2, r2, r1
 80038d8:	6022      	streq	r2, [r4, #0]
 80038da:	6063      	str	r3, [r4, #4]
 80038dc:	6004      	str	r4, [r0, #0]
 80038de:	e7ed      	b.n	80038bc <_free_r+0x24>
 80038e0:	4613      	mov	r3, r2
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	b10a      	cbz	r2, 80038ea <_free_r+0x52>
 80038e6:	42a2      	cmp	r2, r4
 80038e8:	d9fa      	bls.n	80038e0 <_free_r+0x48>
 80038ea:	6819      	ldr	r1, [r3, #0]
 80038ec:	1858      	adds	r0, r3, r1
 80038ee:	42a0      	cmp	r0, r4
 80038f0:	d10b      	bne.n	800390a <_free_r+0x72>
 80038f2:	6820      	ldr	r0, [r4, #0]
 80038f4:	4401      	add	r1, r0
 80038f6:	1858      	adds	r0, r3, r1
 80038f8:	4282      	cmp	r2, r0
 80038fa:	6019      	str	r1, [r3, #0]
 80038fc:	d1de      	bne.n	80038bc <_free_r+0x24>
 80038fe:	6810      	ldr	r0, [r2, #0]
 8003900:	6852      	ldr	r2, [r2, #4]
 8003902:	4401      	add	r1, r0
 8003904:	6019      	str	r1, [r3, #0]
 8003906:	605a      	str	r2, [r3, #4]
 8003908:	e7d8      	b.n	80038bc <_free_r+0x24>
 800390a:	d902      	bls.n	8003912 <_free_r+0x7a>
 800390c:	230c      	movs	r3, #12
 800390e:	602b      	str	r3, [r5, #0]
 8003910:	e7d4      	b.n	80038bc <_free_r+0x24>
 8003912:	6820      	ldr	r0, [r4, #0]
 8003914:	1821      	adds	r1, r4, r0
 8003916:	428a      	cmp	r2, r1
 8003918:	bf01      	itttt	eq
 800391a:	6811      	ldreq	r1, [r2, #0]
 800391c:	6852      	ldreq	r2, [r2, #4]
 800391e:	1809      	addeq	r1, r1, r0
 8003920:	6021      	streq	r1, [r4, #0]
 8003922:	6062      	str	r2, [r4, #4]
 8003924:	605c      	str	r4, [r3, #4]
 8003926:	e7c9      	b.n	80038bc <_free_r+0x24>
 8003928:	bd38      	pop	{r3, r4, r5, pc}
 800392a:	bf00      	nop
 800392c:	20000260 	.word	0x20000260

08003930 <_malloc_r>:
 8003930:	b570      	push	{r4, r5, r6, lr}
 8003932:	1ccd      	adds	r5, r1, #3
 8003934:	f025 0503 	bic.w	r5, r5, #3
 8003938:	3508      	adds	r5, #8
 800393a:	2d0c      	cmp	r5, #12
 800393c:	bf38      	it	cc
 800393e:	250c      	movcc	r5, #12
 8003940:	2d00      	cmp	r5, #0
 8003942:	4606      	mov	r6, r0
 8003944:	db01      	blt.n	800394a <_malloc_r+0x1a>
 8003946:	42a9      	cmp	r1, r5
 8003948:	d903      	bls.n	8003952 <_malloc_r+0x22>
 800394a:	230c      	movs	r3, #12
 800394c:	6033      	str	r3, [r6, #0]
 800394e:	2000      	movs	r0, #0
 8003950:	bd70      	pop	{r4, r5, r6, pc}
 8003952:	f000 f857 	bl	8003a04 <__malloc_lock>
 8003956:	4a21      	ldr	r2, [pc, #132]	; (80039dc <_malloc_r+0xac>)
 8003958:	6814      	ldr	r4, [r2, #0]
 800395a:	4621      	mov	r1, r4
 800395c:	b991      	cbnz	r1, 8003984 <_malloc_r+0x54>
 800395e:	4c20      	ldr	r4, [pc, #128]	; (80039e0 <_malloc_r+0xb0>)
 8003960:	6823      	ldr	r3, [r4, #0]
 8003962:	b91b      	cbnz	r3, 800396c <_malloc_r+0x3c>
 8003964:	4630      	mov	r0, r6
 8003966:	f000 f83d 	bl	80039e4 <_sbrk_r>
 800396a:	6020      	str	r0, [r4, #0]
 800396c:	4629      	mov	r1, r5
 800396e:	4630      	mov	r0, r6
 8003970:	f000 f838 	bl	80039e4 <_sbrk_r>
 8003974:	1c43      	adds	r3, r0, #1
 8003976:	d124      	bne.n	80039c2 <_malloc_r+0x92>
 8003978:	230c      	movs	r3, #12
 800397a:	4630      	mov	r0, r6
 800397c:	6033      	str	r3, [r6, #0]
 800397e:	f000 f842 	bl	8003a06 <__malloc_unlock>
 8003982:	e7e4      	b.n	800394e <_malloc_r+0x1e>
 8003984:	680b      	ldr	r3, [r1, #0]
 8003986:	1b5b      	subs	r3, r3, r5
 8003988:	d418      	bmi.n	80039bc <_malloc_r+0x8c>
 800398a:	2b0b      	cmp	r3, #11
 800398c:	d90f      	bls.n	80039ae <_malloc_r+0x7e>
 800398e:	600b      	str	r3, [r1, #0]
 8003990:	18cc      	adds	r4, r1, r3
 8003992:	50cd      	str	r5, [r1, r3]
 8003994:	4630      	mov	r0, r6
 8003996:	f000 f836 	bl	8003a06 <__malloc_unlock>
 800399a:	f104 000b 	add.w	r0, r4, #11
 800399e:	1d23      	adds	r3, r4, #4
 80039a0:	f020 0007 	bic.w	r0, r0, #7
 80039a4:	1ac3      	subs	r3, r0, r3
 80039a6:	d0d3      	beq.n	8003950 <_malloc_r+0x20>
 80039a8:	425a      	negs	r2, r3
 80039aa:	50e2      	str	r2, [r4, r3]
 80039ac:	e7d0      	b.n	8003950 <_malloc_r+0x20>
 80039ae:	684b      	ldr	r3, [r1, #4]
 80039b0:	428c      	cmp	r4, r1
 80039b2:	bf16      	itet	ne
 80039b4:	6063      	strne	r3, [r4, #4]
 80039b6:	6013      	streq	r3, [r2, #0]
 80039b8:	460c      	movne	r4, r1
 80039ba:	e7eb      	b.n	8003994 <_malloc_r+0x64>
 80039bc:	460c      	mov	r4, r1
 80039be:	6849      	ldr	r1, [r1, #4]
 80039c0:	e7cc      	b.n	800395c <_malloc_r+0x2c>
 80039c2:	1cc4      	adds	r4, r0, #3
 80039c4:	f024 0403 	bic.w	r4, r4, #3
 80039c8:	42a0      	cmp	r0, r4
 80039ca:	d005      	beq.n	80039d8 <_malloc_r+0xa8>
 80039cc:	1a21      	subs	r1, r4, r0
 80039ce:	4630      	mov	r0, r6
 80039d0:	f000 f808 	bl	80039e4 <_sbrk_r>
 80039d4:	3001      	adds	r0, #1
 80039d6:	d0cf      	beq.n	8003978 <_malloc_r+0x48>
 80039d8:	6025      	str	r5, [r4, #0]
 80039da:	e7db      	b.n	8003994 <_malloc_r+0x64>
 80039dc:	20000260 	.word	0x20000260
 80039e0:	20000264 	.word	0x20000264

080039e4 <_sbrk_r>:
 80039e4:	b538      	push	{r3, r4, r5, lr}
 80039e6:	2300      	movs	r3, #0
 80039e8:	4c05      	ldr	r4, [pc, #20]	; (8003a00 <_sbrk_r+0x1c>)
 80039ea:	4605      	mov	r5, r0
 80039ec:	4608      	mov	r0, r1
 80039ee:	6023      	str	r3, [r4, #0]
 80039f0:	f7fc fe1a 	bl	8000628 <_sbrk>
 80039f4:	1c43      	adds	r3, r0, #1
 80039f6:	d102      	bne.n	80039fe <_sbrk_r+0x1a>
 80039f8:	6823      	ldr	r3, [r4, #0]
 80039fa:	b103      	cbz	r3, 80039fe <_sbrk_r+0x1a>
 80039fc:	602b      	str	r3, [r5, #0]
 80039fe:	bd38      	pop	{r3, r4, r5, pc}
 8003a00:	20000b50 	.word	0x20000b50

08003a04 <__malloc_lock>:
 8003a04:	4770      	bx	lr

08003a06 <__malloc_unlock>:
 8003a06:	4770      	bx	lr

08003a08 <_init>:
 8003a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a0a:	bf00      	nop
 8003a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a0e:	bc08      	pop	{r3}
 8003a10:	469e      	mov	lr, r3
 8003a12:	4770      	bx	lr

08003a14 <_fini>:
 8003a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a16:	bf00      	nop
 8003a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a1a:	bc08      	pop	{r3}
 8003a1c:	469e      	mov	lr, r3
 8003a1e:	4770      	bx	lr
