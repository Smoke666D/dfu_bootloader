##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.15.2] date: [Wed May 04 13:25:36 MSK 2022]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------
######################################
# include
######################################
-include make/build_verbosity.mk
-include make/version.mk
-include make/tools.mk
-include make/source.mk
-include make/includes.mk

######################################
# target
######################################
TARGET = dfu_bootloader

######################################
# building variables
######################################
DEBUG = 1
OPT   = -Os

#######################################
# paths
#######################################
BUILD_DIR   = build
OUTPUT_DIR  = out
ASM_SOURCES = Core/Startup/startup_stm32f207zgtx.s
RELEASE_DIR = relese
TEST_DIR    = test

######################################
# names
######################################
TARGET_BASENAME = $(OUTPUT_DIR)/$(RELEASE_DIR)/$(TARGET)_$(RELEASE_DIR)_$(VER)
TARGET_ELF      = $(addsuffix .elf, $(TARGET_BASENAME) )
TARGET_BIN      = $(addsuffix .bin, $(TARGET_BASENAME) )
TARGET_HEX      = $(addsuffix .hex, $(TARGET_BASENAME) )
TARGET_ZIP      = $(addsuffix .zip, $(TARGET_BASENAME) )
TEST_BASENAME   = $(OUTPUT_DIR)/$(TEST_DIR)/$(TARGET)_$(TEST_DIR)_$(VER)
TEST_ELF        = $(addsuffix .elf, $(TEST_BASENAME) )
TEST_HEX        = $(addsuffix .hex, $(TEST_BASENAME) )
#######################################
# binaris
#######################################
HEX = $(OBJCOPY) -O ihex
BIN = $(OBJCOPY) -O binary -S

#######################################
# CFLAGS
#######################################
CPU   = -mcpu=cortex-m3
FLOAT = -mfloat-abi=soft
SPEC  = --specs=nano.specs
MCU   = $(CPU) -mthumb $(FLOAT)
STD   = -std=gnu11

TEST_DEFINES =\
-DUNIT_TEST \
-DUNITY_INCLUDE_CONFIG_H

GLOBAL_DEFINES =\
-DUSE_HAL_DRIVER \
-DUSE_HAL_DRIVER \
-DSTM32F207xx \
-DDEBUG \
-DENCRYPTION

#-DOPTIMIZ \

ASFLAGS = $(MCU) $(STD) $(OPT) -Wall -fdata-sections -ffunction-sections
CFLAGS  = $(MCU) $(STD) $(GLOBAL_DEFINES) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections
CFLAGS += -g3 -fstack-usage
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

#######################################
# LDFLAGS
#######################################
LDSCRIPT = STM32F207ZGTX_FLASH.ld
LIBS = -lc -lm -lnosys  
LDFLAGS_RELEASE = $(MCU) $(SPEC) -T$(LDSCRIPT) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(RELEASE_DIR)/$(TARGET).map,--cref -Wl,--gc-sections
LDFLAGS_TEST    = $(MCU) $(SPEC) -T$(LDSCRIPT) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TEST_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

#######################################
# Release
#######################################
OBJECTS = $(addprefix $(BUILD_DIR)/$(RELEASE_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
OBJECTS += $(addprefix $(BUILD_DIR)/$(RELEASE_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

#######################################
# Test
#######################################
TEST_OBJECTS = $(addprefix $(BUILD_DIR)/$(TEST_DIR)/,$(notdir $(C_TEST_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_TEST_SOURCES)))
TEST_OBJECTS += $(addprefix $(BUILD_DIR)/$(TEST_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

#######################################
#######################################
#######################################

all: release 

release: $(TARGET_ELF) $(TARGET_HEX) $(TARGET_ZIP)

test: $(TEST_ELF) $(TEST_HEX)

#######################################
# build the application
#######################################
############### release ###############
$(BUILD_DIR)/$(RELEASE_DIR)/%.o: %.c Makefile | $(BUILD_DIR) $(BUILD_DIR)/$(RELEASE_DIR)
	@echo "%% $(notdir $<)" "$(STDOUT)"
	$(V1) $(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(RELEASE_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/$(RELEASE_DIR)/%.o: %.s Makefile | $(BUILD_DIR) $(BUILD_DIR)/$(RELEASE_DIR)
	@echo "%% $(notdir $<)" "$(STDOUT)"
	$(V1) $(AS) -c $(CFLAGS) $< -o $@

$(TARGET_ELF): $(OBJECTS) Makefile
	@echo make elf files...
	$(V1) $(CC) $(OBJECTS) $(LDFLAGS_RELEASE) -o $@
	$(V1) $(SIZE) $@

$(TARGET_HEX): $(TARGET_ELF) | $(OUTPUT_DIR) $(OUTPUT_DIR)/$(RELEASE_DIR)
	@echo make hex file...
	$(V1) $(HEX) $< $@
	
$(TARGET_BIN): $(TARGET_ELF) | $(OUTPUT_DIR) $(OUTPUT_DIR)/$(RELEASE_DIR)
	@echo make bin file...
	$(BIN) $< $@	

$(TARGET_ZIP): $(TARGET_HEX) | $(OUTPUT_DIR) $(OUTPUT_DIR)/$(RELEASE_DIR)
	@echo pack hex file to the zip...
	$(V1) zip $(TARGET_ZIP) $(TARGET_HEX)

############### Test #################
$(BUILD_DIR)/$(TEST_DIR)/%.o: %.c Makefile | $(BUILD_DIR) $(BUILD_DIR)/$(TEST_DIR)
	@echo "%% $(notdir $<)" "$(STDOUT)"
	$(V1) $(CC) -c $(TEST_DEFINES) $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(TEST_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/$(TEST_DIR)/%.o: %.s Makefile | $(BUILD_DIR) $(BUILD_DIR)/$(TEST_DIR)
	@echo "%% $(notdir $<)" "$(STDOUT)"
	$(V1) $(AS) -c $(TEST_DEFINES) $(CFLAGS) $< -o $@

$(TEST_ELF): $(TEST_OBJECTS) Makefile
	@echo make test elf files...
	$(V1) $(CC) $(TEST_OBJECTS) $(LDFLAGS_TEST) -o $@
	$(V1) $(SIZE) $@

$(TEST_HEX): $(TEST_ELF) | $(OUTPUT_DIR) $(OUTPUT_DIR)/$(TEST_DIR)
	@echo make test hex file...
	$(V1) $(HEX) $< $@

############### folders ###############
$(OUTPUT_DIR):
	$(V1) mkdir $@		
	
$(BUILD_DIR):
	$(V1) mkdir $@		

$(REPORT_DIR):
	$(V1) mkdir $@

$(BUILD_DIR)/$(RELEASE_DIR):
	$(V1) mkdir $@

$(BUILD_DIR)/$(TEST_DIR):
	$(V1) mkdir $@

$(OUTPUT_DIR)/$(RELEASE_DIR):
	$(V1) mkdir $@

$(OUTPUT_DIR)/$(TEST_DIR):
	$(V1) mkdir $@	
#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
	-rm -fR $(REPORT_DIR)
	-rm -fR $(OUTPUT_DIR)

size:
	$(SIZE) $(TARGET_ELF)

#program: $(TARGET_ELF)
  #$(OPENOCD) -f stlink-v2.cfg -f stm32f2x.cfg -c "program $(TARGET_ELF) verify exit reset"	

flash: $(TARGET_HEX)
	$(STFLASH) --reset --format ihex write $<

zip:
	zip $(TARGET_ZIP) $(TARGET_HEX)	

cppcheck: $(C_SOURCE_PROJ) | $(REPORT_DIR)
	$(CPPCHECK) $(CHKFLAGS) $(C_INCLUDES) $(GLOBAL_DEFINES) --output-file=$(CHKREPORT) $^

misra: $(C_SOURCE_PROJ) | $(REPORT_DIR)
	$(CPPCHECK) $(CHKMISRAFLAGS) $(GLOBAL_DEFINES) --output-file=$(CHKMISRAREPORT) $^

version:
	@echo $(VER)
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***